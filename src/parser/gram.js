
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


import * as __nodes from '../nodes/index.js';
import * as __parser from './index.js';
import * as __common from '../common/index.js';
import * as __utils from '../utils/index.js';

import { ereport, errcode, errmsg, parser_errposition } from '../common/errors.js';

const NULL = null;
const NIL = null;
const yyscanner = null;

const _ = {
	...__nodes,
	...__parser,
	...__common,
	...__utils
};


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            var i_y = 0, i_t = 0, i_m = 0, i_g = 0, i_a = 0;

            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y[i_y++];
                    switch (t[i_t++]) {
                    case 2:
                        q[z] = [
                            m[i_m++],
                            g[i_g++]
                        ];
                        break;

                    case 0:
                        q[z] = a[i_a++];
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... es
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. true
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ true
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... true
    //   has error recovery: .............. false
    //   has error reporting: ............. true
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "%": 16,
  "(": 4,
  ")": 5,
  "*": 8,
  "+": 13,
  ",": 6,
  "-": 14,
  ".": 11,
  "/": 15,
  ":": 12,
  ";": 3,
  "<": 18,
  "=": 7,
  ">": 19,
  "ABORT_P": 20,
  "ABSOLUTE_P": 21,
  "ACCESS": 22,
  "ACTION": 23,
  "ADD_P": 24,
  "ADMIN": 25,
  "AFTER": 26,
  "AGGREGATE": 27,
  "ALL": 442,
  "ALSO": 28,
  "ALTER": 29,
  "ALWAYS": 30,
  "AND": 403,
  "ARRAY": 405,
  "AS": 371,
  "ASC": 476,
  "ASSERTION": 31,
  "ASSIGNMENT": 32,
  "ASYMMETRIC": 406,
  "AT": 33,
  "ATTACH": 34,
  "ATTRIBUTE": 35,
  "AexprConst": 589,
  "BACKWARD": 36,
  "BCONST": 411,
  "BEFORE": 37,
  "BEGIN_P": 38,
  "BETWEEN": 313,
  "BIGINT": 314,
  "BINARY": 380,
  "BIT": 315,
  "BOOLEAN_P": 316,
  "BOTH": 455,
  "BY": 39,
  "Bit": 626,
  "BitWithLength": 628,
  "BitWithoutLength": 629,
  "CACHE": 40,
  "CALL": 41,
  "CALLED": 42,
  "CASCADE": 43,
  "CASCADED": 44,
  "CASE": 430,
  "CAST": 454,
  "CATALOG_P": 45,
  "CHAIN": 46,
  "CHARACTER": 318,
  "CHARACTERISTICS": 47,
  "CHAR_P": 317,
  "CHECKPOINT": 48,
  "CLASS": 49,
  "CLOSE": 50,
  "CLUSTER": 51,
  "COALESCE": 319,
  "COLLATE": 459,
  "COLLATION": 443,
  "COLON_EQUALS": 427,
  "COLUMNS": 52,
  "COMMENT": 53,
  "COMMENTS": 54,
  "COMMIT": 55,
  "COMMITTED": 56,
  "CONFIGURATION": 57,
  "CONFLICT": 58,
  "CONNECTION": 59,
  "CONSTRAINT": 386,
  "CONSTRAINTS": 60,
  "CONTENT_P": 61,
  "CONTINUE_P": 62,
  "CONVERSION_P": 63,
  "COPY": 64,
  "COST": 65,
  "CROSS": 391,
  "CSV": 66,
  "CUBE": 67,
  "CURRENT_CATALOG": 452,
  "CURRENT_DATE": 444,
  "CURRENT_P": 68,
  "CURRENT_ROLE": 449,
  "CURRENT_SCHEMA": 453,
  "CURRENT_TIME": 445,
  "CURRENT_TIMESTAMP": 446,
  "CURRENT_USER": 450,
  "CURSOR": 69,
  "CYCLE": 70,
  "Character": 630,
  "CharacterWithLength": 632,
  "CharacterWithoutLength": 633,
  "ColId": 584,
  "ColLabel": 586,
  "ConstBit": 627,
  "ConstCharacter": 631,
  "ConstDatetime": 636,
  "ConstInterval": 637,
  "ConstTypename": 575,
  "DATABASE": 72,
  "DATA_P": 71,
  "DAY_P": 73,
  "DEALLOCATE": 74,
  "DEC": 320,
  "DECIMAL_P": 321,
  "DECLARE": 75,
  "DEFAULT": 381,
  "DEFAULTS": 76,
  "DEFERRED": 77,
  "DEFINER": 78,
  "DELETE_P": 79,
  "DELIMITER": 80,
  "DELIMITERS": 81,
  "DEPENDS": 82,
  "DESC": 477,
  "DETACH": 83,
  "DICTIONARY": 84,
  "DISABLE_P": 85,
  "DISCARD": 86,
  "DISTINCT": 437,
  "DO": 384,
  "DOCUMENT_P": 87,
  "DOMAIN_P": 88,
  "DOUBLE_P": 89,
  "DROP": 90,
  "DeclareCursorStmt": 521,
  "DeleteStmt": 363,
  "EACH": 91,
  "ELSE": 434,
  "ENABLE_P": 92,
  "ENCODING": 93,
  "ENCRYPTED": 94,
  "END_P": 431,
  "ENUM_P": 95,
  "EOF": 1,
  "EQUALS_GREATER": 428,
  "ESCAPE": 96,
  "EVENT": 97,
  "EXCEPT": 368,
  "EXCLUDE": 98,
  "EXCLUDING": 99,
  "EXCLUSIVE": 100,
  "EXECUTE": 101,
  "EXISTS": 322,
  "EXPLAIN": 102,
  "EXPRESSION": 103,
  "EXTENSION": 104,
  "EXTERNAL": 105,
  "EXTRACT": 323,
  "FALSE_P": 414,
  "FAMILY": 106,
  "FCONST": 410,
  "FETCH": 471,
  "FILTER": 107,
  "FIRST_P": 108,
  "FLOAT_P": 324,
  "FOLLOWING": 109,
  "FOR": 377,
  "FORCE": 110,
  "FORWARD": 111,
  "FROM": 388,
  "FULL": 394,
  "FUNCTION": 112,
  "FUNCTIONS": 113,
  "GENERATED": 114,
  "GLOBAL": 115,
  "GRANTED": 116,
  "GREATER_EQUALS": 420,
  "GREATEST": 325,
  "GROUPING": 326,
  "GROUPS": 117,
  "GROUP_P": 375,
  "GenericType": 576,
  "HANDLER": 118,
  "HAVING": 376,
  "HEADER_P": 119,
  "HOLD": 120,
  "HOUR_P": 121,
  "ICONST": 416,
  "IDENT": 407,
  "IDENTITY_P": 122,
  "IF_P": 123,
  "ILIKE": 425,
  "IMMEDIATE": 124,
  "IMMUTABLE": 125,
  "IMPLICIT_P": 126,
  "IMPORT_P": 127,
  "INCLUDE": 128,
  "INCLUDING": 129,
  "INCREMENT": 130,
  "INDEX": 131,
  "INDEXES": 132,
  "INHERIT": 133,
  "INHERITS": 134,
  "INLINE_P": 135,
  "INNER_P": 397,
  "INOUT": 327,
  "INPUT_P": 136,
  "INSENSITIVE": 137,
  "INSERT": 138,
  "INSTEAD": 139,
  "INTEGER": 329,
  "INTERSECT": 367,
  "INTERVAL": 330,
  "INTO": 373,
  "INT_P": 328,
  "INVOKER": 140,
  "IN_P": 379,
  "IS": 436,
  "ISNULL": 462,
  "ISOLATION": 141,
  "Iconst": 590,
  "InsertStmt": 525,
  "JOIN": 392,
  "KEY": 142,
  "LABEL": 143,
  "LANGUAGE": 144,
  "LARGE_P": 145,
  "LAST_P": 146,
  "LATERAL_P": 389,
  "LEADING": 456,
  "LEAKPROOF": 147,
  "LEAST": 331,
  "LEFT": 395,
  "LESS_EQUALS": 419,
  "LEVEL": 148,
  "LIKE": 423,
  "LIMIT": 470,
  "LISTEN": 149,
  "LOAD": 150,
  "LOCAL": 151,
  "LOCALTIME": 447,
  "LOCALTIMESTAMP": 448,
  "LOCATION": 152,
  "LOCKED": 154,
  "LOCK_P": 153,
  "LOGGED": 155,
  "LockStmt": 511,
  "MAPPING": 156,
  "MATCH": 157,
  "MATERIALIZED": 158,
  "MAXVALUE": 159,
  "METHOD": 160,
  "MINUTE_P": 161,
  "MINVALUE": 162,
  "MODE": 163,
  "MONTH_P": 164,
  "MOVE": 165,
  "MathOp": 594,
  "NAMES": 167,
  "NAME_P": 166,
  "NATIONAL": 332,
  "NATURAL": 393,
  "NCHAR": 333,
  "NEW": 168,
  "NEXT": 169,
  "NO": 170,
  "NONE": 334,
  "NOT": 372,
  "NOTHING": 171,
  "NOTIFY": 172,
  "NOTNULL": 463,
  "NOT_EQUALS": 421,
  "NOT_LA": 424,
  "NOWAIT": 173,
  "NULLIF": 335,
  "NULLS_LA": 478,
  "NULLS_P": 174,
  "NULL_P": 415,
  "NUMERIC": 336,
  "Numeric": 624,
  "OBJECT_P": 175,
  "OF": 176,
  "OFF": 177,
  "OFFSET": 475,
  "OIDS": 178,
  "OLD": 179,
  "ON": 383,
  "ONLY": 378,
  "OPERATOR": 180,
  "OPTION": 181,
  "OPTIONS": 182,
  "OR": 460,
  "ORDER": 469,
  "ORDINALITY": 183,
  "OTHERS": 184,
  "OUTER_P": 398,
  "OUT_P": 337,
  "OVER": 185,
  "OVERLAPS": 465,
  "OVERLAY": 338,
  "OVERRIDING": 186,
  "OWNED": 187,
  "OWNER": 188,
  "Op": 418,
  "OptTableFuncElementList": 569,
  "OptTempTableName": 374,
  "PARALLEL": 189,
  "PARAM": 438,
  "PARSER": 190,
  "PARTIAL": 191,
  "PARTITION": 192,
  "PASSING": 193,
  "PASSWORD": 194,
  "PLACING": 429,
  "PLANS": 195,
  "POLICY": 196,
  "POSITION": 339,
  "PRECEDING": 197,
  "PRECISION": 340,
  "PREPARE": 198,
  "PREPARED": 199,
  "PRESERVE": 200,
  "PRIOR": 201,
  "PRIVILEGES": 202,
  "PROCEDURAL": 203,
  "PROCEDURE": 204,
  "PROCEDURES": 205,
  "PROGRAM": 206,
  "PUBLICATION": 207,
  "PreparableStmt": 484,
  "QUOTE": 208,
  "RANGE": 209,
  "READ": 210,
  "REAL": 341,
  "REASSIGN": 211,
  "RECHECK": 212,
  "RECURSIVE": 213,
  "REF": 214,
  "REFERENCING": 215,
  "REFRESH": 216,
  "REINDEX": 217,
  "RELATIVE_P": 218,
  "RELEASE": 219,
  "RENAME": 220,
  "REPEATABLE": 221,
  "REPLACE": 222,
  "REPLICA": 223,
  "RESET": 224,
  "RESTART": 225,
  "RESTRICT": 226,
  "RETURNING": 387,
  "RETURNS": 227,
  "REVOKE": 228,
  "RIGHT": 396,
  "ROLE": 229,
  "ROLLBACK": 230,
  "ROLLUP": 231,
  "ROUTINE": 232,
  "ROUTINES": 233,
  "ROW": 342,
  "ROWS": 234,
  "RULE": 235,
  "SAVEPOINT": 236,
  "SCHEMA": 237,
  "SCHEMAS": 238,
  "SCONST": 417,
  "SCROLL": 239,
  "SEARCH": 240,
  "SECOND_P": 241,
  "SECURITY": 242,
  "SELECT": 364,
  "SEQUENCE": 243,
  "SEQUENCES": 244,
  "SERIALIZABLE": 245,
  "SERVER": 246,
  "SESSION": 247,
  "SESSION_USER": 451,
  "SET": 248,
  "SETOF": 343,
  "SETS": 249,
  "SHARE": 250,
  "SHOW": 251,
  "SIMILAR": 461,
  "SIMPLE": 252,
  "SKIP": 253,
  "SMALLINT": 344,
  "SNAPSHOT": 254,
  "SQL_P": 255,
  "STABLE": 256,
  "STANDALONE_P": 257,
  "START": 258,
  "STATEMENT": 259,
  "STATISTICS": 260,
  "STDIN": 261,
  "STDOUT": 262,
  "STORAGE": 263,
  "STORED": 264,
  "STRICT_P": 265,
  "STRIP_P": 266,
  "SUBSCRIPTION": 267,
  "SUBSTRING": 345,
  "SUPPORT": 268,
  "SYMMETRIC": 466,
  "SYSID": 269,
  "SYSTEM_P": 270,
  "Sconst": 591,
  "SelectStmt": 485,
  "SignedIconst": 592,
  "SimpleTypename": 574,
  "TABLE": 365,
  "TABLES": 271,
  "TABLESAMPLE": 400,
  "TABLESPACE": 272,
  "TEMP": 273,
  "TEMPLATE": 274,
  "TEMPORARY": 275,
  "TEXT_P": 276,
  "THEN": 433,
  "TIES": 277,
  "TIME": 346,
  "TIMESTAMP": 347,
  "TO": 458,
  "TRAILING": 457,
  "TRANSACTION": 278,
  "TRANSFORM": 279,
  "TREAT": 348,
  "TRIGGER": 280,
  "TRIM": 349,
  "TRUE_P": 413,
  "TRUNCATE": 281,
  "TRUSTED": 282,
  "TYPECAST": 435,
  "TYPES_P": 284,
  "TYPE_P": 283,
  "TableFuncElement": 571,
  "TableFuncElementList": 570,
  "Typename": 572,
  "UNBOUNDED": 285,
  "UNCOMMITTED": 286,
  "UNENCRYPTED": 287,
  "UNION": 366,
  "UNIQUE": 468,
  "UNKNOWN": 288,
  "UNLISTEN": 289,
  "UNLOGGED": 290,
  "UNTIL": 291,
  "UPDATE": 292,
  "USER": 382,
  "USING": 399,
  "UpdateStmt": 516,
  "VACUUM": 293,
  "VALID": 294,
  "VALIDATE": 295,
  "VALIDATOR": 296,
  "VALUES": 350,
  "VALUE_P": 297,
  "VARCHAR": 351,
  "VARIADIC": 441,
  "VARYING": 298,
  "VERSION_P": 299,
  "VIEW": 300,
  "VIEWS": 301,
  "VOLATILE": 302,
  "WHEN": 432,
  "WHERE": 401,
  "WHITESPACE_P": 303,
  "WINDOW": 402,
  "WITH": 369,
  "WITHIN": 304,
  "WITHOUT": 305,
  "WITH_LA": 370,
  "WORK": 306,
  "WRAPPER": 307,
  "WRITE": 308,
  "XCONST": 412,
  "XMLATTRIBUTES": 352,
  "XMLCONCAT": 353,
  "XMLELEMENT": 354,
  "XMLEXISTS": 355,
  "XMLFOREST": 356,
  "XMLNAMESPACES": 357,
  "XMLPARSE": 358,
  "XMLPI": 359,
  "XMLROOT": 360,
  "XMLSERIALIZE": 361,
  "XMLTABLE": 362,
  "XML_P": 309,
  "YEAR_P": 310,
  "YES_P": 311,
  "ZONE": 312,
  "[": 9,
  "]": 10,
  "^": 17,
  "a_expr": 641,
  "access_method": 655,
  "alias_clause": 538,
  "all_Op": 593,
  "all_or_distinct": 660,
  "any_name": 643,
  "any_name_list": 642,
  "any_operator": 422,
  "array_expr": 601,
  "array_expr_list": 602,
  "attr_name": 656,
  "attrs": 644,
  "b_expr": 618,
  "c_expr": 619,
  "case_arg": 617,
  "case_default": 616,
  "case_expr": 613,
  "character": 634,
  "col_name_keyword": 483,
  "columnref": 578,
  "common_table_expr": 492,
  "cte_list": 491,
  "cube_clause": 501,
  "cursor_name": 522,
  "cursor_options": 523,
  "database_name": 654,
  "distinct_clause": 661,
  "empty_grouping_set": 499,
  "error": 2,
  "explicit_row": 439,
  "expr_list": 598,
  "extract_arg": 604,
  "extract_list": 603,
  "file_name": 658,
  "filter_clause": 550,
  "first_or_next": 472,
  "for_locking_clause": 504,
  "for_locking_item": 507,
  "for_locking_items": 506,
  "for_locking_strength": 508,
  "frame_bound": 560,
  "frame_extent": 559,
  "from_clause": 534,
  "from_list": 535,
  "func_alias_clause": 540,
  "func_application": 620,
  "func_arg_expr": 599,
  "func_arg_list": 587,
  "func_expr": 621,
  "func_expr_common_subexpr": 623,
  "func_expr_windowless": 622,
  "func_name": 588,
  "func_table": 562,
  "group_by_item": 498,
  "group_by_list": 497,
  "group_clause": 496,
  "grouping_sets_clause": 502,
  "having_clause": 503,
  "implicit_row": 440,
  "in_expr": 612,
  "index_name": 657,
  "index_params": 385,
  "indirection": 581,
  "indirection_el": 579,
  "insert_column_item": 530,
  "insert_column_list": 529,
  "insert_rest": 527,
  "insert_target": 526,
  "interval_second": 640,
  "into_clause": 495,
  "join_outer": 542,
  "join_qual": 543,
  "join_type": 541,
  "joined_table": 537,
  "limit_clause": 669,
  "lock_type": 513,
  "locked_rels_list": 509,
  "name": 653,
  "name_list": 652,
  "offset_clause": 670,
  "opt_alias_clause": 539,
  "opt_all_clause": 662,
  "opt_array_bounds": 573,
  "opt_asc_desc": 673,
  "opt_asymmetric": 583,
  "opt_col_def_list": 565,
  "opt_collate_clause": 404,
  "opt_conf_expr": 532,
  "opt_existing_window_name": 556,
  "opt_float": 625,
  "opt_for_locking_clause": 505,
  "opt_frame_clause": 558,
  "opt_hold": 524,
  "opt_indirection": 582,
  "opt_interval": 639,
  "opt_lock": 512,
  "opt_materialized": 493,
  "opt_name_list": 651,
  "opt_nowait": 514,
  "opt_nowait_or_skip": 515,
  "opt_nulls_order": 674,
  "opt_on_conflict": 531,
  "opt_ordinality": 566,
  "opt_partition_clause": 557,
  "opt_repeatable_clause": 548,
  "opt_select_limit": 668,
  "opt_slice_bound": 580,
  "opt_sort_clause": 663,
  "opt_table": 659,
  "opt_target_list": 646,
  "opt_timezone": 638,
  "opt_type_modifiers": 577,
  "opt_varying": 635,
  "opt_window_exclusion_clause": 561,
  "opt_with_clause": 494,
  "over_clause": 554,
  "overlay_list": 605,
  "overlay_placing": 606,
  "override_kind": 528,
  "param_name": 426,
  "position_list": 607,
  "qual_Op": 595,
  "qual_all_Op": 596,
  "qualified_name": 650,
  "qualified_name_list": 649,
  "relation_expr": 544,
  "relation_expr_list": 545,
  "relation_expr_opt_alias": 546,
  "reserved_keyword": 409,
  "returning_clause": 533,
  "rollup_clause": 500,
  "row": 464,
  "row_or_rows": 474,
  "rowsfrom_item": 563,
  "rowsfrom_list": 564,
  "select_clause": 488,
  "select_fetch_first_value": 473,
  "select_limit": 667,
  "select_limit_value": 671,
  "select_no_parens": 487,
  "select_offset_value": 672,
  "select_with_parens": 486,
  "set_clause": 518,
  "set_clause_list": 517,
  "set_target": 519,
  "set_target_list": 520,
  "simple_select": 489,
  "sort_clause": 664,
  "sortby": 666,
  "sortby_list": 665,
  "stmt": 481,
  "stmtblock": 479,
  "stmtmulti": 480,
  "sub_type": 467,
  "subquery_Op": 597,
  "substr_for": 610,
  "substr_from": 609,
  "substr_list": 608,
  "table_ref": 536,
  "tablesample_clause": 547,
  "target_el": 648,
  "target_list": 647,
  "trim_list": 611,
  "type_func_name_keyword": 408,
  "type_function_name": 585,
  "type_list": 600,
  "type_name_list": 645,
  "unreserved_keyword": 482,
  "values_clause": 510,
  "when_clause": 615,
  "when_clause_list": 614,
  "where_clause": 567,
  "where_or_current_clause": 568,
  "window_clause": 551,
  "window_definition": 553,
  "window_definition_list": 552,
  "window_specification": 555,
  "with_clause": 490,
  "within_group_clause": 549,
  "xmltable": 390
},
terminals_: {
  1: "EOF",
  2: "error",
  3: ";",
  4: "(",
  5: ")",
  6: ",",
  7: "=",
  8: "*",
  9: "[",
  10: "]",
  11: ".",
  12: ":",
  13: "+",
  14: "-",
  15: "/",
  16: "%",
  17: "^",
  18: "<",
  19: ">",
  20: "ABORT_P",
  21: "ABSOLUTE_P",
  22: "ACCESS",
  23: "ACTION",
  24: "ADD_P",
  25: "ADMIN",
  26: "AFTER",
  27: "AGGREGATE",
  28: "ALSO",
  29: "ALTER",
  30: "ALWAYS",
  31: "ASSERTION",
  32: "ASSIGNMENT",
  33: "AT",
  34: "ATTACH",
  35: "ATTRIBUTE",
  36: "BACKWARD",
  37: "BEFORE",
  38: "BEGIN_P",
  39: "BY",
  40: "CACHE",
  41: "CALL",
  42: "CALLED",
  43: "CASCADE",
  44: "CASCADED",
  45: "CATALOG_P",
  46: "CHAIN",
  47: "CHARACTERISTICS",
  48: "CHECKPOINT",
  49: "CLASS",
  50: "CLOSE",
  51: "CLUSTER",
  52: "COLUMNS",
  53: "COMMENT",
  54: "COMMENTS",
  55: "COMMIT",
  56: "COMMITTED",
  57: "CONFIGURATION",
  58: "CONFLICT",
  59: "CONNECTION",
  60: "CONSTRAINTS",
  61: "CONTENT_P",
  62: "CONTINUE_P",
  63: "CONVERSION_P",
  64: "COPY",
  65: "COST",
  66: "CSV",
  67: "CUBE",
  68: "CURRENT_P",
  69: "CURSOR",
  70: "CYCLE",
  71: "DATA_P",
  72: "DATABASE",
  73: "DAY_P",
  74: "DEALLOCATE",
  75: "DECLARE",
  76: "DEFAULTS",
  77: "DEFERRED",
  78: "DEFINER",
  79: "DELETE_P",
  80: "DELIMITER",
  81: "DELIMITERS",
  82: "DEPENDS",
  83: "DETACH",
  84: "DICTIONARY",
  85: "DISABLE_P",
  86: "DISCARD",
  87: "DOCUMENT_P",
  88: "DOMAIN_P",
  89: "DOUBLE_P",
  90: "DROP",
  91: "EACH",
  92: "ENABLE_P",
  93: "ENCODING",
  94: "ENCRYPTED",
  95: "ENUM_P",
  96: "ESCAPE",
  97: "EVENT",
  98: "EXCLUDE",
  99: "EXCLUDING",
  100: "EXCLUSIVE",
  101: "EXECUTE",
  102: "EXPLAIN",
  103: "EXPRESSION",
  104: "EXTENSION",
  105: "EXTERNAL",
  106: "FAMILY",
  107: "FILTER",
  108: "FIRST_P",
  109: "FOLLOWING",
  110: "FORCE",
  111: "FORWARD",
  112: "FUNCTION",
  113: "FUNCTIONS",
  114: "GENERATED",
  115: "GLOBAL",
  116: "GRANTED",
  117: "GROUPS",
  118: "HANDLER",
  119: "HEADER_P",
  120: "HOLD",
  121: "HOUR_P",
  122: "IDENTITY_P",
  123: "IF_P",
  124: "IMMEDIATE",
  125: "IMMUTABLE",
  126: "IMPLICIT_P",
  127: "IMPORT_P",
  128: "INCLUDE",
  129: "INCLUDING",
  130: "INCREMENT",
  131: "INDEX",
  132: "INDEXES",
  133: "INHERIT",
  134: "INHERITS",
  135: "INLINE_P",
  136: "INPUT_P",
  137: "INSENSITIVE",
  138: "INSERT",
  139: "INSTEAD",
  140: "INVOKER",
  141: "ISOLATION",
  142: "KEY",
  143: "LABEL",
  144: "LANGUAGE",
  145: "LARGE_P",
  146: "LAST_P",
  147: "LEAKPROOF",
  148: "LEVEL",
  149: "LISTEN",
  150: "LOAD",
  151: "LOCAL",
  152: "LOCATION",
  153: "LOCK_P",
  154: "LOCKED",
  155: "LOGGED",
  156: "MAPPING",
  157: "MATCH",
  158: "MATERIALIZED",
  159: "MAXVALUE",
  160: "METHOD",
  161: "MINUTE_P",
  162: "MINVALUE",
  163: "MODE",
  164: "MONTH_P",
  165: "MOVE",
  166: "NAME_P",
  167: "NAMES",
  168: "NEW",
  169: "NEXT",
  170: "NO",
  171: "NOTHING",
  172: "NOTIFY",
  173: "NOWAIT",
  174: "NULLS_P",
  175: "OBJECT_P",
  176: "OF",
  177: "OFF",
  178: "OIDS",
  179: "OLD",
  180: "OPERATOR",
  181: "OPTION",
  182: "OPTIONS",
  183: "ORDINALITY",
  184: "OTHERS",
  185: "OVER",
  186: "OVERRIDING",
  187: "OWNED",
  188: "OWNER",
  189: "PARALLEL",
  190: "PARSER",
  191: "PARTIAL",
  192: "PARTITION",
  193: "PASSING",
  194: "PASSWORD",
  195: "PLANS",
  196: "POLICY",
  197: "PRECEDING",
  198: "PREPARE",
  199: "PREPARED",
  200: "PRESERVE",
  201: "PRIOR",
  202: "PRIVILEGES",
  203: "PROCEDURAL",
  204: "PROCEDURE",
  205: "PROCEDURES",
  206: "PROGRAM",
  207: "PUBLICATION",
  208: "QUOTE",
  209: "RANGE",
  210: "READ",
  211: "REASSIGN",
  212: "RECHECK",
  213: "RECURSIVE",
  214: "REF",
  215: "REFERENCING",
  216: "REFRESH",
  217: "REINDEX",
  218: "RELATIVE_P",
  219: "RELEASE",
  220: "RENAME",
  221: "REPEATABLE",
  222: "REPLACE",
  223: "REPLICA",
  224: "RESET",
  225: "RESTART",
  226: "RESTRICT",
  227: "RETURNS",
  228: "REVOKE",
  229: "ROLE",
  230: "ROLLBACK",
  231: "ROLLUP",
  232: "ROUTINE",
  233: "ROUTINES",
  234: "ROWS",
  235: "RULE",
  236: "SAVEPOINT",
  237: "SCHEMA",
  238: "SCHEMAS",
  239: "SCROLL",
  240: "SEARCH",
  241: "SECOND_P",
  242: "SECURITY",
  243: "SEQUENCE",
  244: "SEQUENCES",
  245: "SERIALIZABLE",
  246: "SERVER",
  247: "SESSION",
  248: "SET",
  249: "SETS",
  250: "SHARE",
  251: "SHOW",
  252: "SIMPLE",
  253: "SKIP",
  254: "SNAPSHOT",
  255: "SQL_P",
  256: "STABLE",
  257: "STANDALONE_P",
  258: "START",
  259: "STATEMENT",
  260: "STATISTICS",
  261: "STDIN",
  262: "STDOUT",
  263: "STORAGE",
  264: "STORED",
  265: "STRICT_P",
  266: "STRIP_P",
  267: "SUBSCRIPTION",
  268: "SUPPORT",
  269: "SYSID",
  270: "SYSTEM_P",
  271: "TABLES",
  272: "TABLESPACE",
  273: "TEMP",
  274: "TEMPLATE",
  275: "TEMPORARY",
  276: "TEXT_P",
  277: "TIES",
  278: "TRANSACTION",
  279: "TRANSFORM",
  280: "TRIGGER",
  281: "TRUNCATE",
  282: "TRUSTED",
  283: "TYPE_P",
  284: "TYPES_P",
  285: "UNBOUNDED",
  286: "UNCOMMITTED",
  287: "UNENCRYPTED",
  288: "UNKNOWN",
  289: "UNLISTEN",
  290: "UNLOGGED",
  291: "UNTIL",
  292: "UPDATE",
  293: "VACUUM",
  294: "VALID",
  295: "VALIDATE",
  296: "VALIDATOR",
  297: "VALUE_P",
  298: "VARYING",
  299: "VERSION_P",
  300: "VIEW",
  301: "VIEWS",
  302: "VOLATILE",
  303: "WHITESPACE_P",
  304: "WITHIN",
  305: "WITHOUT",
  306: "WORK",
  307: "WRAPPER",
  308: "WRITE",
  309: "XML_P",
  310: "YEAR_P",
  311: "YES_P",
  312: "ZONE",
  313: "BETWEEN",
  314: "BIGINT",
  315: "BIT",
  316: "BOOLEAN_P",
  317: "CHAR_P",
  318: "CHARACTER",
  319: "COALESCE",
  320: "DEC",
  321: "DECIMAL_P",
  322: "EXISTS",
  323: "EXTRACT",
  324: "FLOAT_P",
  325: "GREATEST",
  326: "GROUPING",
  327: "INOUT",
  328: "INT_P",
  329: "INTEGER",
  330: "INTERVAL",
  331: "LEAST",
  332: "NATIONAL",
  333: "NCHAR",
  334: "NONE",
  335: "NULLIF",
  336: "NUMERIC",
  337: "OUT_P",
  338: "OVERLAY",
  339: "POSITION",
  340: "PRECISION",
  341: "REAL",
  342: "ROW",
  343: "SETOF",
  344: "SMALLINT",
  345: "SUBSTRING",
  346: "TIME",
  347: "TIMESTAMP",
  348: "TREAT",
  349: "TRIM",
  350: "VALUES",
  351: "VARCHAR",
  352: "XMLATTRIBUTES",
  353: "XMLCONCAT",
  354: "XMLELEMENT",
  355: "XMLEXISTS",
  356: "XMLFOREST",
  357: "XMLNAMESPACES",
  358: "XMLPARSE",
  359: "XMLPI",
  360: "XMLROOT",
  361: "XMLSERIALIZE",
  362: "XMLTABLE",
  363: "DeleteStmt",
  364: "SELECT",
  365: "TABLE",
  366: "UNION",
  367: "INTERSECT",
  368: "EXCEPT",
  369: "WITH",
  370: "WITH_LA",
  371: "AS",
  372: "NOT",
  373: "INTO",
  374: "OptTempTableName",
  375: "GROUP_P",
  376: "HAVING",
  377: "FOR",
  378: "ONLY",
  379: "IN_P",
  380: "BINARY",
  381: "DEFAULT",
  382: "USER",
  383: "ON",
  384: "DO",
  385: "index_params",
  386: "CONSTRAINT",
  387: "RETURNING",
  388: "FROM",
  389: "LATERAL_P",
  390: "xmltable",
  391: "CROSS",
  392: "JOIN",
  393: "NATURAL",
  394: "FULL",
  395: "LEFT",
  396: "RIGHT",
  397: "INNER_P",
  398: "OUTER_P",
  399: "USING",
  400: "TABLESAMPLE",
  401: "WHERE",
  402: "WINDOW",
  403: "AND",
  404: "opt_collate_clause",
  405: "ARRAY",
  406: "ASYMMETRIC",
  407: "IDENT",
  408: "type_func_name_keyword",
  409: "reserved_keyword",
  410: "FCONST",
  411: "BCONST",
  412: "XCONST",
  413: "TRUE_P",
  414: "FALSE_P",
  415: "NULL_P",
  416: "ICONST",
  417: "SCONST",
  418: "Op",
  419: "LESS_EQUALS",
  420: "GREATER_EQUALS",
  421: "NOT_EQUALS",
  422: "any_operator",
  423: "LIKE",
  424: "NOT_LA",
  425: "ILIKE",
  426: "param_name",
  427: "COLON_EQUALS",
  428: "EQUALS_GREATER",
  429: "PLACING",
  430: "CASE",
  431: "END_P",
  432: "WHEN",
  433: "THEN",
  434: "ELSE",
  435: "TYPECAST",
  436: "IS",
  437: "DISTINCT",
  438: "PARAM",
  439: "explicit_row",
  440: "implicit_row",
  441: "VARIADIC",
  442: "ALL",
  443: "COLLATION",
  444: "CURRENT_DATE",
  445: "CURRENT_TIME",
  446: "CURRENT_TIMESTAMP",
  447: "LOCALTIME",
  448: "LOCALTIMESTAMP",
  449: "CURRENT_ROLE",
  450: "CURRENT_USER",
  451: "SESSION_USER",
  452: "CURRENT_CATALOG",
  453: "CURRENT_SCHEMA",
  454: "CAST",
  455: "BOTH",
  456: "LEADING",
  457: "TRAILING",
  458: "TO",
  459: "COLLATE",
  460: "OR",
  461: "SIMILAR",
  462: "ISNULL",
  463: "NOTNULL",
  464: "row",
  465: "OVERLAPS",
  466: "SYMMETRIC",
  467: "sub_type",
  468: "UNIQUE",
  469: "ORDER",
  470: "LIMIT",
  471: "FETCH",
  472: "first_or_next",
  473: "select_fetch_first_value",
  474: "row_or_rows",
  475: "OFFSET",
  476: "ASC",
  477: "DESC",
  478: "NULLS_LA"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  479,
  479,
  480,
  480,
  s,
  [481, 4],
  s,
  [482, 293],
  s,
  [483, 50],
  s,
  [484, 4],
  485,
  485,
  486,
  486,
  s,
  [487, 8],
  488,
  488,
  s,
  [489, 7],
  s,
  [490, 3],
  491,
  491,
  492,
  s,
  [493, 3],
  494,
  494,
  495,
  495,
  496,
  496,
  497,
  497,
  s,
  [498, 5],
  s,
  [499, 5, 1],
  503,
  504,
  504,
  505,
  505,
  506,
  506,
  507,
  s,
  [508, 4],
  509,
  509,
  510,
  510,
  511,
  512,
  512,
  s,
  [513, 8],
  514,
  514,
  s,
  [515, 3],
  516,
  517,
  517,
  518,
  518,
  519,
  520,
  s,
  [520, 4, 1],
  s,
  [523, 4],
  s,
  [524, 3],
  525,
  526,
  526,
  s,
  [527, 5],
  528,
  528,
  529,
  529,
  530,
  s,
  [531, 3],
  s,
  [532, 3],
  533,
  533,
  534,
  534,
  535,
  535,
  s,
  [536, 10],
  s,
  [537, 6],
  s,
  [538, 4],
  539,
  539,
  s,
  [540, 5],
  s,
  [541, 4],
  542,
  542,
  543,
  543,
  s,
  [544, 4],
  545,
  545,
  s,
  [546, 3],
  547,
  547,
  s,
  [548, 4],
  549,
  549,
  550,
  550,
  551,
  551,
  552,
  552,
  553,
  s,
  [554, 3],
  555,
  556,
  556,
  557,
  557,
  s,
  [558, 4],
  559,
  559,
  s,
  [560, 5],
  s,
  [561, 5],
  562,
  562,
  563,
  564,
  564,
  565,
  565,
  566,
  566,
  567,
  567,
  s,
  [568, 3],
  569,
  569,
  570,
  570,
  571,
  s,
  [572, 6],
  s,
  [573, 3],
  s,
  [574, 7],
  s,
  [575, 4],
  576,
  576,
  577,
  577,
  578,
  578,
  s,
  [579, 4],
  580,
  580,
  581,
  581,
  582,
  582,
  583,
  583,
  s,
  [584, 3],
  s,
  [585, 3],
  s,
  [586, 5],
  s,
  [587, 4],
  588,
  588,
  s,
  [589, 12],
  590,
  591,
  s,
  [592, 3],
  593,
  593,
  s,
  [594, 12],
  595,
  595,
  596,
  596,
  s,
  [597, 6],
  598,
  598,
  s,
  [599, 3],
  600,
  600,
  s,
  [601, 3],
  602,
  602,
  603,
  603,
  s,
  [604, 8],
  605,
  605,
  606,
  607,
  607,
  s,
  [608, 6],
  609,
  610,
  s,
  [611, 3],
  612,
  612,
  613,
  614,
  614,
  615,
  616,
  616,
  617,
  617,
  s,
  [618, 25],
  s,
  [619, 14],
  s,
  [620, 7],
  621,
  621,
  622,
  622,
  s,
  [623, 30],
  s,
  [624, 11],
  625,
  625,
  626,
  626,
  627,
  s,
  [627, 4, 1],
  630,
  631,
  s,
  [631, 4, 1],
  s,
  [634, 5],
  635,
  635,
  s,
  [636, 4],
  637,
  s,
  [638, 3],
  s,
  [639, 14],
  640,
  640,
  s,
  [641, 64],
  642,
  642,
  643,
  643,
  644,
  644,
  645,
  645,
  646,
  646,
  647,
  647,
  s,
  [648, 4],
  649,
  649,
  650,
  650,
  651,
  651,
  652,
  s,
  [652, 8, 1],
  659,
  s,
  [660, 3],
  661,
  661,
  662,
  662,
  663,
  663,
  664,
  665,
  665,
  666,
  666,
  s,
  [667, 4],
  668,
  668,
  s,
  [669, 4],
  670,
  670,
  671,
  671,
  672,
  s,
  [673, 3],
  s,
  [674, 3]
]),
  rule: u([
  1,
  2,
  3,
  s,
  [1, 4],
  0,
  s,
  [1, 349],
  3,
  3,
  1,
  2,
  4,
  4,
  2,
  3,
  5,
  5,
  1,
  1,
  9,
  9,
  c,
  [12, 4],
  4,
  2,
  c,
  [376, 3],
  3,
  7,
  1,
  2,
  0,
  1,
  0,
  2,
  0,
  3,
  0,
  1,
  c,
  [390, 5],
  c,
  [26, 4],
  5,
  c,
  [19, 3],
  3,
  c,
  [400, 3],
  2,
  3,
  2,
  c,
  [50, 3],
  2,
  0,
  4,
  5,
  5,
  3,
  0,
  s,
  [2, 3],
  c,
  [47, 3],
  1,
  2,
  c,
  [24, 4],
  0,
  8,
  c,
  [80, 3],
  5,
  2,
  c,
  [62, 4],
  0,
  3,
  s,
  [2, 3],
  c,
  [29, 3],
  7,
  c,
  [28, 3],
  4,
  4,
  7,
  2,
  c,
  [107, 4],
  2,
  8,
  5,
  0,
  4,
  c,
  [50, 3],
  c,
  [87, 3],
  c,
  [13, 3],
  3,
  c,
  [67, 3],
  c,
  [4, 3],
  1,
  4,
  3,
  4,
  5,
  4,
  5,
  c,
  [93, 3],
  4,
  c,
  [492, 4],
  c,
  [10, 3],
  c,
  [83, 4],
  c,
  [11, 3],
  4,
  2,
  1,
  2,
  c,
  [20, 3],
  c,
  [91, 3],
  3,
  6,
  6,
  4,
  0,
  4,
  0,
  5,
  0,
  5,
  c,
  [58, 5],
  c,
  [90, 3],
  0,
  6,
  c,
  [97, 3],
  0,
  s,
  [3, 3],
  c,
  [49, 3],
  s,
  [2, 5],
  c,
  [20, 3],
  c,
  [89, 3],
  6,
  c,
  [123, 3],
  c,
  [63, 3],
  c,
  [98, 4],
  4,
  c,
  [190, 3],
  c,
  [43, 4],
  3,
  5,
  6,
  2,
  3,
  c,
  [21, 3],
  c,
  [196, 7],
  c,
  [6, 5],
  c,
  [55, 4],
  c,
  [52, 4],
  5,
  c,
  [180, 5],
  c,
  [186, 4],
  c,
  [273, 12],
  c,
  [205, 5],
  c,
  [40, 5],
  c,
  [34, 4],
  c,
  [10, 7],
  s,
  [1, 15],
  4,
  1,
  4,
  c,
  [4, 3],
  c,
  [161, 3],
  c,
  [47, 4],
  c,
  [3, 4],
  3,
  c,
  [10, 3],
  c,
  [86, 3],
  c,
  [31, 8],
  c,
  [120, 3],
  c,
  [158, 3],
  c,
  [55, 3],
  c,
  [204, 3],
  c,
  [27, 3],
  1,
  c,
  [73, 3],
  c,
  [307, 3],
  c,
  [147, 5],
  c,
  [17, 3],
  s,
  [3, 12],
  2,
  2,
  5,
  6,
  6,
  7,
  3,
  c,
  [153, 3],
  c,
  [157, 5],
  s,
  [2, 4],
  c,
  [64, 4],
  5,
  6,
  8,
  c,
  [245, 3],
  c,
  [18, 4],
  c,
  [131, 3],
  c,
  [110, 6],
  c,
  [188, 5],
  1,
  1,
  c,
  [22, 3],
  4,
  4,
  6,
  s,
  [5, 3],
  4,
  c,
  [10, 4],
  c,
  [159, 7],
  c,
  [54, 4],
  c,
  [127, 6],
  c,
  [382, 3],
  c,
  [160, 5],
  c,
  [17, 4],
  s,
  [3, 4, -1],
  5,
  2,
  c,
  [400, 4],
  c,
  [155, 8],
  s,
  [3, 7],
  c,
  [310, 3],
  c,
  [425, 5],
  c,
  [139, 16],
  c,
  [4, 5],
  c,
  [89, 3],
  c,
  [4, 4],
  c,
  [100, 3],
  7,
  c,
  [488, 5],
  3,
  c,
  [417, 3],
  s,
  [3, 4, 1],
  6,
  7,
  6,
  7,
  c,
  [170, 4],
  4,
  c,
  [337, 3],
  c,
  [120, 3],
  c,
  [294, 3],
  c,
  [505, 5],
  c,
  [358, 5],
  c,
  [312, 5],
  c,
  [244, 3],
  c,
  [556, 7],
  c,
  [949, 5],
  0,
  c,
  [187, 3],
  c,
  [242, 3],
  c,
  [36, 3],
  c,
  [271, 3],
  c,
  [34, 4],
  c,
  [405, 3],
  5,
  c,
  [80, 3],
  c,
  [32, 6],
  c,
  [452, 3]
])
}),
performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : stmtblock $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 1];
    this._$ = yylstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    break;

case 1:
    /*! Production::    stmtblock : stmtmulti */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp];
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    
    
    return yyvstack[yysp];
    break;

case 2:
    /*! Production::    stmtblock : stmtmulti EOF */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 1];
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,LT,LA,-,-)
    
    
    return yyvstack[yysp - 1];
    break;

case 3:
    /*! Production::    stmtmulti : stmtmulti ";" stmt */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp - 2] != null)
    {
        /* update length of previous stmt */
        updateRawStmtEnd(yyvstack[yysp - 2][yyvstack[yysp - 2].length - 1], yylstack[yysp - 1]);
    }
    if (yyvstack[yysp] != null) {
        yyvstack[yysp - 2].push(makeRawStmt(yyvstack[yysp], yylstack[yysp - 1]));
        this.$ = yyvstack[yysp - 2];
    } else
        this.$ = yyvstack[yysp - 2];
    break;

case 4:
    /*! Production::    stmtmulti : stmt */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp] != null)
        this.$ = [makeRawStmt(yyvstack[yysp], null)];
    else
        this.$ = null;
    break;

case 5:
    /*! Production::    stmt : SelectStmt */
case 6:
    /*! Production::    stmt : UpdateStmt */
case 7:
    /*! Production::    stmt : InsertStmt */
case 9:
    /*! Production::    unreserved_keyword : ABORT_P */
case 10:
    /*! Production::    unreserved_keyword : ABSOLUTE_P */
case 11:
    /*! Production::    unreserved_keyword : ACCESS */
case 12:
    /*! Production::    unreserved_keyword : ACTION */
case 13:
    /*! Production::    unreserved_keyword : ADD_P */
case 14:
    /*! Production::    unreserved_keyword : ADMIN */
case 15:
    /*! Production::    unreserved_keyword : AFTER */
case 16:
    /*! Production::    unreserved_keyword : AGGREGATE */
case 17:
    /*! Production::    unreserved_keyword : ALSO */
case 18:
    /*! Production::    unreserved_keyword : ALTER */
case 19:
    /*! Production::    unreserved_keyword : ALWAYS */
case 20:
    /*! Production::    unreserved_keyword : ASSERTION */
case 21:
    /*! Production::    unreserved_keyword : ASSIGNMENT */
case 22:
    /*! Production::    unreserved_keyword : AT */
case 23:
    /*! Production::    unreserved_keyword : ATTACH */
case 24:
    /*! Production::    unreserved_keyword : ATTRIBUTE */
case 25:
    /*! Production::    unreserved_keyword : BACKWARD */
case 26:
    /*! Production::    unreserved_keyword : BEFORE */
case 27:
    /*! Production::    unreserved_keyword : BEGIN_P */
case 28:
    /*! Production::    unreserved_keyword : BY */
case 29:
    /*! Production::    unreserved_keyword : CACHE */
case 30:
    /*! Production::    unreserved_keyword : CALL */
case 31:
    /*! Production::    unreserved_keyword : CALLED */
case 32:
    /*! Production::    unreserved_keyword : CASCADE */
case 33:
    /*! Production::    unreserved_keyword : CASCADED */
case 34:
    /*! Production::    unreserved_keyword : CATALOG_P */
case 35:
    /*! Production::    unreserved_keyword : CHAIN */
case 36:
    /*! Production::    unreserved_keyword : CHARACTERISTICS */
case 37:
    /*! Production::    unreserved_keyword : CHECKPOINT */
case 38:
    /*! Production::    unreserved_keyword : CLASS */
case 39:
    /*! Production::    unreserved_keyword : CLOSE */
case 40:
    /*! Production::    unreserved_keyword : CLUSTER */
case 41:
    /*! Production::    unreserved_keyword : COLUMNS */
case 42:
    /*! Production::    unreserved_keyword : COMMENT */
case 43:
    /*! Production::    unreserved_keyword : COMMENTS */
case 44:
    /*! Production::    unreserved_keyword : COMMIT */
case 45:
    /*! Production::    unreserved_keyword : COMMITTED */
case 46:
    /*! Production::    unreserved_keyword : CONFIGURATION */
case 47:
    /*! Production::    unreserved_keyword : CONFLICT */
case 48:
    /*! Production::    unreserved_keyword : CONNECTION */
case 49:
    /*! Production::    unreserved_keyword : CONSTRAINTS */
case 50:
    /*! Production::    unreserved_keyword : CONTENT_P */
case 51:
    /*! Production::    unreserved_keyword : CONTINUE_P */
case 52:
    /*! Production::    unreserved_keyword : CONVERSION_P */
case 53:
    /*! Production::    unreserved_keyword : COPY */
case 54:
    /*! Production::    unreserved_keyword : COST */
case 55:
    /*! Production::    unreserved_keyword : CSV */
case 56:
    /*! Production::    unreserved_keyword : CUBE */
case 57:
    /*! Production::    unreserved_keyword : CURRENT_P */
case 58:
    /*! Production::    unreserved_keyword : CURSOR */
case 59:
    /*! Production::    unreserved_keyword : CYCLE */
case 60:
    /*! Production::    unreserved_keyword : DATA_P */
case 61:
    /*! Production::    unreserved_keyword : DATABASE */
case 62:
    /*! Production::    unreserved_keyword : DAY_P */
case 63:
    /*! Production::    unreserved_keyword : DEALLOCATE */
case 64:
    /*! Production::    unreserved_keyword : DECLARE */
case 65:
    /*! Production::    unreserved_keyword : DEFAULTS */
case 66:
    /*! Production::    unreserved_keyword : DEFERRED */
case 67:
    /*! Production::    unreserved_keyword : DEFINER */
case 68:
    /*! Production::    unreserved_keyword : DELETE_P */
case 69:
    /*! Production::    unreserved_keyword : DELIMITER */
case 70:
    /*! Production::    unreserved_keyword : DELIMITERS */
case 71:
    /*! Production::    unreserved_keyword : DEPENDS */
case 72:
    /*! Production::    unreserved_keyword : DETACH */
case 73:
    /*! Production::    unreserved_keyword : DICTIONARY */
case 74:
    /*! Production::    unreserved_keyword : DISABLE_P */
case 75:
    /*! Production::    unreserved_keyword : DISCARD */
case 76:
    /*! Production::    unreserved_keyword : DOCUMENT_P */
case 77:
    /*! Production::    unreserved_keyword : DOMAIN_P */
case 78:
    /*! Production::    unreserved_keyword : DOUBLE_P */
case 79:
    /*! Production::    unreserved_keyword : DROP */
case 80:
    /*! Production::    unreserved_keyword : EACH */
case 81:
    /*! Production::    unreserved_keyword : ENABLE_P */
case 82:
    /*! Production::    unreserved_keyword : ENCODING */
case 83:
    /*! Production::    unreserved_keyword : ENCRYPTED */
case 84:
    /*! Production::    unreserved_keyword : ENUM_P */
case 85:
    /*! Production::    unreserved_keyword : ESCAPE */
case 86:
    /*! Production::    unreserved_keyword : EVENT */
case 87:
    /*! Production::    unreserved_keyword : EXCLUDE */
case 88:
    /*! Production::    unreserved_keyword : EXCLUDING */
case 89:
    /*! Production::    unreserved_keyword : EXCLUSIVE */
case 90:
    /*! Production::    unreserved_keyword : EXECUTE */
case 91:
    /*! Production::    unreserved_keyword : EXPLAIN */
case 92:
    /*! Production::    unreserved_keyword : EXPRESSION */
case 93:
    /*! Production::    unreserved_keyword : EXTENSION */
case 94:
    /*! Production::    unreserved_keyword : EXTERNAL */
case 95:
    /*! Production::    unreserved_keyword : FAMILY */
case 96:
    /*! Production::    unreserved_keyword : FILTER */
case 97:
    /*! Production::    unreserved_keyword : FIRST_P */
case 98:
    /*! Production::    unreserved_keyword : FOLLOWING */
case 99:
    /*! Production::    unreserved_keyword : FORCE */
case 100:
    /*! Production::    unreserved_keyword : FORWARD */
case 101:
    /*! Production::    unreserved_keyword : FUNCTION */
case 102:
    /*! Production::    unreserved_keyword : FUNCTIONS */
case 103:
    /*! Production::    unreserved_keyword : GENERATED */
case 104:
    /*! Production::    unreserved_keyword : GLOBAL */
case 105:
    /*! Production::    unreserved_keyword : GRANTED */
case 106:
    /*! Production::    unreserved_keyword : GROUPS */
case 107:
    /*! Production::    unreserved_keyword : HANDLER */
case 108:
    /*! Production::    unreserved_keyword : HEADER_P */
case 109:
    /*! Production::    unreserved_keyword : HOLD */
case 110:
    /*! Production::    unreserved_keyword : HOUR_P */
case 111:
    /*! Production::    unreserved_keyword : IDENTITY_P */
case 112:
    /*! Production::    unreserved_keyword : IF_P */
case 113:
    /*! Production::    unreserved_keyword : IMMEDIATE */
case 114:
    /*! Production::    unreserved_keyword : IMMUTABLE */
case 115:
    /*! Production::    unreserved_keyword : IMPLICIT_P */
case 116:
    /*! Production::    unreserved_keyword : IMPORT_P */
case 117:
    /*! Production::    unreserved_keyword : INCLUDE */
case 118:
    /*! Production::    unreserved_keyword : INCLUDING */
case 119:
    /*! Production::    unreserved_keyword : INCREMENT */
case 120:
    /*! Production::    unreserved_keyword : INDEX */
case 121:
    /*! Production::    unreserved_keyword : INDEXES */
case 122:
    /*! Production::    unreserved_keyword : INHERIT */
case 123:
    /*! Production::    unreserved_keyword : INHERITS */
case 124:
    /*! Production::    unreserved_keyword : INLINE_P */
case 125:
    /*! Production::    unreserved_keyword : INPUT_P */
case 126:
    /*! Production::    unreserved_keyword : INSENSITIVE */
case 127:
    /*! Production::    unreserved_keyword : INSERT */
case 128:
    /*! Production::    unreserved_keyword : INSTEAD */
case 129:
    /*! Production::    unreserved_keyword : INVOKER */
case 130:
    /*! Production::    unreserved_keyword : ISOLATION */
case 131:
    /*! Production::    unreserved_keyword : KEY */
case 132:
    /*! Production::    unreserved_keyword : LABEL */
case 133:
    /*! Production::    unreserved_keyword : LANGUAGE */
case 134:
    /*! Production::    unreserved_keyword : LARGE_P */
case 135:
    /*! Production::    unreserved_keyword : LAST_P */
case 136:
    /*! Production::    unreserved_keyword : LEAKPROOF */
case 137:
    /*! Production::    unreserved_keyword : LEVEL */
case 138:
    /*! Production::    unreserved_keyword : LISTEN */
case 139:
    /*! Production::    unreserved_keyword : LOAD */
case 140:
    /*! Production::    unreserved_keyword : LOCAL */
case 141:
    /*! Production::    unreserved_keyword : LOCATION */
case 142:
    /*! Production::    unreserved_keyword : LOCK_P */
case 143:
    /*! Production::    unreserved_keyword : LOCKED */
case 144:
    /*! Production::    unreserved_keyword : LOGGED */
case 145:
    /*! Production::    unreserved_keyword : MAPPING */
case 146:
    /*! Production::    unreserved_keyword : MATCH */
case 147:
    /*! Production::    unreserved_keyword : MATERIALIZED */
case 148:
    /*! Production::    unreserved_keyword : MAXVALUE */
case 149:
    /*! Production::    unreserved_keyword : METHOD */
case 150:
    /*! Production::    unreserved_keyword : MINUTE_P */
case 151:
    /*! Production::    unreserved_keyword : MINVALUE */
case 152:
    /*! Production::    unreserved_keyword : MODE */
case 153:
    /*! Production::    unreserved_keyword : MONTH_P */
case 154:
    /*! Production::    unreserved_keyword : MOVE */
case 155:
    /*! Production::    unreserved_keyword : NAME_P */
case 156:
    /*! Production::    unreserved_keyword : NAMES */
case 157:
    /*! Production::    unreserved_keyword : NEW */
case 158:
    /*! Production::    unreserved_keyword : NEXT */
case 159:
    /*! Production::    unreserved_keyword : NO */
case 160:
    /*! Production::    unreserved_keyword : NOTHING */
case 161:
    /*! Production::    unreserved_keyword : NOTIFY */
case 162:
    /*! Production::    unreserved_keyword : NOWAIT */
case 163:
    /*! Production::    unreserved_keyword : NULLS_P */
case 164:
    /*! Production::    unreserved_keyword : OBJECT_P */
case 165:
    /*! Production::    unreserved_keyword : OF */
case 166:
    /*! Production::    unreserved_keyword : OFF */
case 167:
    /*! Production::    unreserved_keyword : OIDS */
case 168:
    /*! Production::    unreserved_keyword : OLD */
case 169:
    /*! Production::    unreserved_keyword : OPERATOR */
case 170:
    /*! Production::    unreserved_keyword : OPTION */
case 171:
    /*! Production::    unreserved_keyword : OPTIONS */
case 172:
    /*! Production::    unreserved_keyword : ORDINALITY */
case 173:
    /*! Production::    unreserved_keyword : OTHERS */
case 174:
    /*! Production::    unreserved_keyword : OVER */
case 175:
    /*! Production::    unreserved_keyword : OVERRIDING */
case 176:
    /*! Production::    unreserved_keyword : OWNED */
case 177:
    /*! Production::    unreserved_keyword : OWNER */
case 178:
    /*! Production::    unreserved_keyword : PARALLEL */
case 179:
    /*! Production::    unreserved_keyword : PARSER */
case 180:
    /*! Production::    unreserved_keyword : PARTIAL */
case 181:
    /*! Production::    unreserved_keyword : PARTITION */
case 182:
    /*! Production::    unreserved_keyword : PASSING */
case 183:
    /*! Production::    unreserved_keyword : PASSWORD */
case 184:
    /*! Production::    unreserved_keyword : PLANS */
case 185:
    /*! Production::    unreserved_keyword : POLICY */
case 186:
    /*! Production::    unreserved_keyword : PRECEDING */
case 187:
    /*! Production::    unreserved_keyword : PREPARE */
case 188:
    /*! Production::    unreserved_keyword : PREPARED */
case 189:
    /*! Production::    unreserved_keyword : PRESERVE */
case 190:
    /*! Production::    unreserved_keyword : PRIOR */
case 191:
    /*! Production::    unreserved_keyword : PRIVILEGES */
case 192:
    /*! Production::    unreserved_keyword : PROCEDURAL */
case 193:
    /*! Production::    unreserved_keyword : PROCEDURE */
case 194:
    /*! Production::    unreserved_keyword : PROCEDURES */
case 195:
    /*! Production::    unreserved_keyword : PROGRAM */
case 196:
    /*! Production::    unreserved_keyword : PUBLICATION */
case 197:
    /*! Production::    unreserved_keyword : QUOTE */
case 198:
    /*! Production::    unreserved_keyword : RANGE */
case 199:
    /*! Production::    unreserved_keyword : READ */
case 200:
    /*! Production::    unreserved_keyword : REASSIGN */
case 201:
    /*! Production::    unreserved_keyword : RECHECK */
case 202:
    /*! Production::    unreserved_keyword : RECURSIVE */
case 203:
    /*! Production::    unreserved_keyword : REF */
case 204:
    /*! Production::    unreserved_keyword : REFERENCING */
case 205:
    /*! Production::    unreserved_keyword : REFRESH */
case 206:
    /*! Production::    unreserved_keyword : REINDEX */
case 207:
    /*! Production::    unreserved_keyword : RELATIVE_P */
case 208:
    /*! Production::    unreserved_keyword : RELEASE */
case 209:
    /*! Production::    unreserved_keyword : RENAME */
case 210:
    /*! Production::    unreserved_keyword : REPEATABLE */
case 211:
    /*! Production::    unreserved_keyword : REPLACE */
case 212:
    /*! Production::    unreserved_keyword : REPLICA */
case 213:
    /*! Production::    unreserved_keyword : RESET */
case 214:
    /*! Production::    unreserved_keyword : RESTART */
case 215:
    /*! Production::    unreserved_keyword : RESTRICT */
case 216:
    /*! Production::    unreserved_keyword : RETURNS */
case 217:
    /*! Production::    unreserved_keyword : REVOKE */
case 218:
    /*! Production::    unreserved_keyword : ROLE */
case 219:
    /*! Production::    unreserved_keyword : ROLLBACK */
case 220:
    /*! Production::    unreserved_keyword : ROLLUP */
case 221:
    /*! Production::    unreserved_keyword : ROUTINE */
case 222:
    /*! Production::    unreserved_keyword : ROUTINES */
case 223:
    /*! Production::    unreserved_keyword : ROWS */
case 224:
    /*! Production::    unreserved_keyword : RULE */
case 225:
    /*! Production::    unreserved_keyword : SAVEPOINT */
case 226:
    /*! Production::    unreserved_keyword : SCHEMA */
case 227:
    /*! Production::    unreserved_keyword : SCHEMAS */
case 228:
    /*! Production::    unreserved_keyword : SCROLL */
case 229:
    /*! Production::    unreserved_keyword : SEARCH */
case 230:
    /*! Production::    unreserved_keyword : SECOND_P */
case 231:
    /*! Production::    unreserved_keyword : SECURITY */
case 232:
    /*! Production::    unreserved_keyword : SEQUENCE */
case 233:
    /*! Production::    unreserved_keyword : SEQUENCES */
case 234:
    /*! Production::    unreserved_keyword : SERIALIZABLE */
case 235:
    /*! Production::    unreserved_keyword : SERVER */
case 236:
    /*! Production::    unreserved_keyword : SESSION */
case 237:
    /*! Production::    unreserved_keyword : SET */
case 238:
    /*! Production::    unreserved_keyword : SETS */
case 239:
    /*! Production::    unreserved_keyword : SHARE */
case 240:
    /*! Production::    unreserved_keyword : SHOW */
case 241:
    /*! Production::    unreserved_keyword : SIMPLE */
case 242:
    /*! Production::    unreserved_keyword : SKIP */
case 243:
    /*! Production::    unreserved_keyword : SNAPSHOT */
case 244:
    /*! Production::    unreserved_keyword : SQL_P */
case 245:
    /*! Production::    unreserved_keyword : STABLE */
case 246:
    /*! Production::    unreserved_keyword : STANDALONE_P */
case 247:
    /*! Production::    unreserved_keyword : START */
case 248:
    /*! Production::    unreserved_keyword : STATEMENT */
case 249:
    /*! Production::    unreserved_keyword : STATISTICS */
case 250:
    /*! Production::    unreserved_keyword : STDIN */
case 251:
    /*! Production::    unreserved_keyword : STDOUT */
case 252:
    /*! Production::    unreserved_keyword : STORAGE */
case 253:
    /*! Production::    unreserved_keyword : STORED */
case 254:
    /*! Production::    unreserved_keyword : STRICT_P */
case 255:
    /*! Production::    unreserved_keyword : STRIP_P */
case 256:
    /*! Production::    unreserved_keyword : SUBSCRIPTION */
case 257:
    /*! Production::    unreserved_keyword : SUPPORT */
case 258:
    /*! Production::    unreserved_keyword : SYSID */
case 259:
    /*! Production::    unreserved_keyword : SYSTEM_P */
case 260:
    /*! Production::    unreserved_keyword : TABLES */
case 261:
    /*! Production::    unreserved_keyword : TABLESPACE */
case 262:
    /*! Production::    unreserved_keyword : TEMP */
case 263:
    /*! Production::    unreserved_keyword : TEMPLATE */
case 264:
    /*! Production::    unreserved_keyword : TEMPORARY */
case 265:
    /*! Production::    unreserved_keyword : TEXT_P */
case 266:
    /*! Production::    unreserved_keyword : TIES */
case 267:
    /*! Production::    unreserved_keyword : TRANSACTION */
case 268:
    /*! Production::    unreserved_keyword : TRANSFORM */
case 269:
    /*! Production::    unreserved_keyword : TRIGGER */
case 270:
    /*! Production::    unreserved_keyword : TRUNCATE */
case 271:
    /*! Production::    unreserved_keyword : TRUSTED */
case 272:
    /*! Production::    unreserved_keyword : TYPE_P */
case 273:
    /*! Production::    unreserved_keyword : TYPES_P */
case 274:
    /*! Production::    unreserved_keyword : UNBOUNDED */
case 275:
    /*! Production::    unreserved_keyword : UNCOMMITTED */
case 276:
    /*! Production::    unreserved_keyword : UNENCRYPTED */
case 277:
    /*! Production::    unreserved_keyword : UNKNOWN */
case 278:
    /*! Production::    unreserved_keyword : UNLISTEN */
case 279:
    /*! Production::    unreserved_keyword : UNLOGGED */
case 280:
    /*! Production::    unreserved_keyword : UNTIL */
case 281:
    /*! Production::    unreserved_keyword : UPDATE */
case 282:
    /*! Production::    unreserved_keyword : VACUUM */
case 283:
    /*! Production::    unreserved_keyword : VALID */
case 284:
    /*! Production::    unreserved_keyword : VALIDATE */
case 285:
    /*! Production::    unreserved_keyword : VALIDATOR */
case 286:
    /*! Production::    unreserved_keyword : VALUE_P */
case 287:
    /*! Production::    unreserved_keyword : VARYING */
case 288:
    /*! Production::    unreserved_keyword : VERSION_P */
case 289:
    /*! Production::    unreserved_keyword : VIEW */
case 290:
    /*! Production::    unreserved_keyword : VIEWS */
case 291:
    /*! Production::    unreserved_keyword : VOLATILE */
case 292:
    /*! Production::    unreserved_keyword : WHITESPACE_P */
case 293:
    /*! Production::    unreserved_keyword : WITHIN */
case 294:
    /*! Production::    unreserved_keyword : WITHOUT */
case 295:
    /*! Production::    unreserved_keyword : WORK */
case 296:
    /*! Production::    unreserved_keyword : WRAPPER */
case 297:
    /*! Production::    unreserved_keyword : WRITE */
case 298:
    /*! Production::    unreserved_keyword : XML_P */
case 299:
    /*! Production::    unreserved_keyword : YEAR_P */
case 300:
    /*! Production::    unreserved_keyword : YES_P */
case 301:
    /*! Production::    unreserved_keyword : ZONE */
case 302:
    /*! Production::    col_name_keyword : BETWEEN */
case 303:
    /*! Production::    col_name_keyword : BIGINT */
case 304:
    /*! Production::    col_name_keyword : BIT */
case 305:
    /*! Production::    col_name_keyword : BOOLEAN_P */
case 306:
    /*! Production::    col_name_keyword : CHAR_P */
case 307:
    /*! Production::    col_name_keyword : CHARACTER */
case 308:
    /*! Production::    col_name_keyword : COALESCE */
case 309:
    /*! Production::    col_name_keyword : DEC */
case 310:
    /*! Production::    col_name_keyword : DECIMAL_P */
case 311:
    /*! Production::    col_name_keyword : EXISTS */
case 312:
    /*! Production::    col_name_keyword : EXTRACT */
case 313:
    /*! Production::    col_name_keyword : FLOAT_P */
case 314:
    /*! Production::    col_name_keyword : GREATEST */
case 315:
    /*! Production::    col_name_keyword : GROUPING */
case 316:
    /*! Production::    col_name_keyword : INOUT */
case 317:
    /*! Production::    col_name_keyword : INT_P */
case 318:
    /*! Production::    col_name_keyword : INTEGER */
case 319:
    /*! Production::    col_name_keyword : INTERVAL */
case 320:
    /*! Production::    col_name_keyword : LEAST */
case 321:
    /*! Production::    col_name_keyword : NATIONAL */
case 322:
    /*! Production::    col_name_keyword : NCHAR */
case 323:
    /*! Production::    col_name_keyword : NONE */
case 324:
    /*! Production::    col_name_keyword : NULLIF */
case 325:
    /*! Production::    col_name_keyword : NUMERIC */
case 326:
    /*! Production::    col_name_keyword : OUT_P */
case 327:
    /*! Production::    col_name_keyword : OVERLAY */
case 328:
    /*! Production::    col_name_keyword : POSITION */
case 329:
    /*! Production::    col_name_keyword : PRECISION */
case 330:
    /*! Production::    col_name_keyword : REAL */
case 331:
    /*! Production::    col_name_keyword : ROW */
case 332:
    /*! Production::    col_name_keyword : SETOF */
case 333:
    /*! Production::    col_name_keyword : SMALLINT */
case 334:
    /*! Production::    col_name_keyword : SUBSTRING */
case 335:
    /*! Production::    col_name_keyword : TIME */
case 336:
    /*! Production::    col_name_keyword : TIMESTAMP */
case 337:
    /*! Production::    col_name_keyword : TREAT */
case 338:
    /*! Production::    col_name_keyword : TRIM */
case 339:
    /*! Production::    col_name_keyword : VALUES */
case 340:
    /*! Production::    col_name_keyword : VARCHAR */
case 341:
    /*! Production::    col_name_keyword : XMLATTRIBUTES */
case 342:
    /*! Production::    col_name_keyword : XMLCONCAT */
case 343:
    /*! Production::    col_name_keyword : XMLELEMENT */
case 344:
    /*! Production::    col_name_keyword : XMLEXISTS */
case 345:
    /*! Production::    col_name_keyword : XMLFOREST */
case 346:
    /*! Production::    col_name_keyword : XMLNAMESPACES */
case 347:
    /*! Production::    col_name_keyword : XMLPARSE */
case 348:
    /*! Production::    col_name_keyword : XMLPI */
case 349:
    /*! Production::    col_name_keyword : XMLROOT */
case 350:
    /*! Production::    col_name_keyword : XMLSERIALIZE */
case 351:
    /*! Production::    col_name_keyword : XMLTABLE */
case 352:
    /*! Production::    PreparableStmt : SelectStmt */
case 353:
    /*! Production::    PreparableStmt : InsertStmt */
case 354:
    /*! Production::    PreparableStmt : UpdateStmt */
case 355:
    /*! Production::    PreparableStmt : DeleteStmt */
case 356:
    /*! Production::    SelectStmt : select_no_parens */
case 357:
    /*! Production::    SelectStmt : select_with_parens */
case 617:
    /*! Production::    opt_asymmetric : ASYMMETRIC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp];
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    break;

case 8:
    /*! Production::    stmt : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = null
    break;

case 358:
    /*! Production::    select_with_parens : "(" select_no_parens ")" */
case 359:
    /*! Production::    select_with_parens : "(" select_with_parens ")" */
case 489:
    /*! Production::    joined_table : "(" joined_table ")" */
case 603:
    /*! Production::    opt_type_modifiers : "(" expr_list ")" */
case 716:
    /*! Production::    in_expr : "(" expr_list ")" */
case 946:
    /*! Production::    opt_name_list : "(" name_list ")" */
case 983:
    /*! Production::    offset_clause : OFFSET select_fetch_first_value row_or_rows */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    break;

case 360:
    /*! Production::    select_no_parens : simple_select */
case 368:
    /*! Production::    select_clause : simple_select */
case 369:
    /*! Production::    select_clause : select_with_parens */
case 372:
    /*! Production::    simple_select : values_clause */
case 386:
    /*! Production::    opt_with_clause : with_clause */
case 394:
    /*! Production::    group_by_item : a_expr */
case 395:
    /*! Production::    group_by_item : empty_grouping_set */
case 396:
    /*! Production::    group_by_item : cube_clause */
case 397:
    /*! Production::    group_by_item : rollup_clause */
case 398:
    /*! Production::    group_by_item : grouping_sets_clause */
case 405:
    /*! Production::    for_locking_clause : for_locking_items */
case 407:
    /*! Production::    opt_for_locking_clause : for_locking_clause */
case 437:
    /*! Production::    set_clause_list : set_clause */
case 445:
    /*! Production::    cursor_name : name */
case 455:
    /*! Production::    insert_target : qualified_name */
case 487:
    /*! Production::    table_ref : joined_table */
case 499:
    /*! Production::    opt_alias_clause : alias_clause */
case 542:
    /*! Production::    opt_existing_window_name : ColId */
case 590:
    /*! Production::    SimpleTypename : GenericType */
case 591:
    /*! Production::    SimpleTypename : Numeric */
case 592:
    /*! Production::    SimpleTypename : Bit */
case 593:
    /*! Production::    SimpleTypename : Character */
case 594:
    /*! Production::    SimpleTypename : ConstDatetime */
case 597:
    /*! Production::    ConstTypename : Numeric */
case 598:
    /*! Production::    ConstTypename : ConstBit */
case 599:
    /*! Production::    ConstTypename : ConstCharacter */
case 600:
    /*! Production::    ConstTypename : ConstDatetime */
case 611:
    /*! Production::    opt_slice_bound : a_expr */
case 619:
    /*! Production::    ColId : IDENT */
case 620:
    /*! Production::    ColId : unreserved_keyword */
case 621:
    /*! Production::    ColId : col_name_keyword */
case 622:
    /*! Production::    type_function_name : IDENT */
case 623:
    /*! Production::    type_function_name : unreserved_keyword */
case 624:
    /*! Production::    type_function_name : type_func_name_keyword */
case 625:
    /*! Production::    ColLabel : IDENT */
case 626:
    /*! Production::    ColLabel : unreserved_keyword */
case 627:
    /*! Production::    ColLabel : col_name_keyword */
case 628:
    /*! Production::    ColLabel : type_func_name_keyword */
case 629:
    /*! Production::    ColLabel : reserved_keyword */
case 648:
    /*! Production::    Iconst : ICONST */
case 649:
    /*! Production::    Sconst : SCONST */
case 653:
    /*! Production::    all_Op : Op */
case 654:
    /*! Production::    all_Op : MathOp */
case 679:
    /*! Production::    func_arg_expr : a_expr */
case 691:
    /*! Production::    extract_arg : IDENT */
case 698:
    /*! Production::    extract_arg : Sconst */
case 708:
    /*! Production::    substr_list : expr_list */
case 714:
    /*! Production::    trim_list : expr_list */
case 723:
    /*! Production::    case_arg : a_expr */
case 725:
    /*! Production::    b_expr : c_expr */
case 750:
    /*! Production::    c_expr : columnref */
case 751:
    /*! Production::    c_expr : AexprConst */
case 754:
    /*! Production::    c_expr : case_expr */
case 755:
    /*! Production::    c_expr : func_expr */
case 772:
    /*! Production::    func_expr : func_expr_common_subexpr */
case 773:
    /*! Production::    func_expr_windowless : func_application */
case 774:
    /*! Production::    func_expr_windowless : func_expr_common_subexpr */
case 818:
    /*! Production::    Bit : BitWithLength */
case 819:
    /*! Production::    Bit : BitWithoutLength */
case 820:
    /*! Production::    ConstBit : BitWithLength */
case 824:
    /*! Production::    Character : CharacterWithLength */
case 825:
    /*! Production::    Character : CharacterWithoutLength */
case 826:
    /*! Production::    ConstCharacter : CharacterWithLength */
case 851:
    /*! Production::    opt_interval : interval_second */
case 862:
    /*! Production::    a_expr : c_expr */
case 934:
    /*! Production::    opt_target_list : target_list */
case 950:
    /*! Production::    name : ColId */
case 953:
    /*! Production::    attr_name : ColLabel */
case 965:
    /*! Production::    opt_sort_clause : sort_clause */
case 976:
    /*! Production::    opt_select_limit : select_limit */
case 984:
    /*! Production::    select_limit_value : a_expr */
case 986:
    /*! Production::    select_offset_value : a_expr */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    break;

case 361:
    /*! Production::    select_no_parens : select_clause sort_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp - 1], yyvstack[yysp], null,
                        null, null, null,
                        yyscanner);
    this.$ = yyvstack[yysp - 1];
    break;

case 362:
    /*! Production::    select_no_parens : select_clause opt_sort_clause for_locking_clause opt_select_limit */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1],
                        yyvstack[yysp][0], yyvstack[yysp][1],
                        null,
                        yyscanner);
    this.$ = yyvstack[yysp - 3];
    break;

case 363:
    /*! Production::    select_no_parens : select_clause opt_sort_clause select_limit opt_for_locking_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp],
                        yyvstack[yysp - 1][0], yyvstack[yysp - 1][1],
                        null,
                        yyscanner);
    this.$ = yyvstack[yysp - 3];
    break;

case 364:
    /*! Production::    select_no_parens : with_clause select_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp], null, null,
                        null, null,
                        yyvstack[yysp - 1],
                        yyscanner);
    this.$ = yyvstack[yysp];
    break;

case 365:
    /*! Production::    select_no_parens : with_clause select_clause sort_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp - 1], yyvstack[yysp], null,
                        null, null,
                        yyvstack[yysp - 2],
                        yyscanner);
    this.$ = yyvstack[yysp - 1];
    break;

case 366:
    /*! Production::    select_no_parens : with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1],
                        yyvstack[yysp][0], yyvstack[yysp][1],
                        yyvstack[yysp - 4],
                        yyscanner);
    this.$ = yyvstack[yysp - 3];
    break;

case 367:
    /*! Production::    select_no_parens : with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    _.insertSelectOptions(yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp],
                        yyvstack[yysp - 1][0], yyvstack[yysp - 1][1],
                        yyvstack[yysp - 4],
                        yyscanner);
    this.$ = yyvstack[yysp - 3];
    break;

case 370:
    /*! Production::    simple_select : SELECT opt_all_clause opt_target_list into_clause from_clause where_clause group_clause having_clause window_clause */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SelectStmt,
        targetList: yyvstack[yysp - 6],
        intoClause: yyvstack[yysp - 5],
        fromClause: yyvstack[yysp - 4],
        whereClause: yyvstack[yysp - 3],
        groupClause: yyvstack[yysp - 2],
        havingClause: yyvstack[yysp - 1],
        windowClause: yyvstack[yysp]
    };
    break;

case 371:
    /*! Production::    simple_select : SELECT distinct_clause target_list into_clause from_clause where_clause group_clause having_clause window_clause */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SelectStmt,
        distinctClause: yyvstack[yysp - 7],
        targetList: yyvstack[yysp - 6],
        intoClause: yyvstack[yysp - 5],
        fromClause: yyvstack[yysp - 4],
        whereClause: yyvstack[yysp - 3],
        groupClause: yyvstack[yysp - 2],
        havingClause: yyvstack[yysp - 1],
        windowClause: yyvstack[yysp]
    };
    break;

case 373:
    /*! Production::    simple_select : TABLE relation_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* same as SELECT * FROM relation_expr */
    var cr = {
        type: _.NodeTag.T_ColumnRef,
        fields: [{
            type: _.NodeTag.T_A_Star,
            location: -1
        }]
    };
    
    var rt = {
        type: _.NodeTag.T_ResTarget,
        name: null,
        indirection: null,
        val: cr,
        location: -1
    };
    
    this.$ = {
        type: _.NodeTag.T_SelectStmt,
        targetList: [rt],
        fromClause: [yyvstack[yysp]]
    };
    break;

case 374:
    /*! Production::    simple_select : select_clause UNION all_or_distinct select_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSetOp(_.SetOperation.SETOP_UNION, yyvstack[yysp - 1], yyvstack[yysp - 3], yyvstack[yysp]);
    break;

case 375:
    /*! Production::    simple_select : select_clause INTERSECT all_or_distinct select_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSetOp(_.SetOperation.SETOP_INTERSECT, yyvstack[yysp - 1], yyvstack[yysp - 3], yyvstack[yysp]);
    break;

case 376:
    /*! Production::    simple_select : select_clause EXCEPT all_or_distinct select_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSetOp(_.SetOperation.SETOP_EXCEPT, yyvstack[yysp - 1], yyvstack[yysp - 3], yyvstack[yysp]);
    break;

case 377:
    /*! Production::    with_clause : WITH cte_list */
case 378:
    /*! Production::    with_clause : WITH_LA cte_list */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WithClause,
        ctes: yyvstack[yysp],
        recursive: false,
        location: yylstack[yysp - 1]
    };
    break;

case 379:
    /*! Production::    with_clause : WITH RECURSIVE cte_list */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WithClause,
        ctes: yyvstack[yysp],
        recursive: true,
        location: yylstack[yysp - 2]
    };
    break;

case 380:
    /*! Production::    cte_list : common_table_expr */
case 392:
    /*! Production::    group_by_list : group_by_item */
case 409:
    /*! Production::    for_locking_items : for_locking_item */
case 442:
    /*! Production::    set_target_list : set_target */
case 464:
    /*! Production::    insert_column_list : insert_column_item */
case 477:
    /*! Production::    from_list : table_ref */
case 535:
    /*! Production::    window_definition_list : window_definition */
case 565:
    /*! Production::    rowsfrom_list : rowsfrom_item */
case 578:
    /*! Production::    TableFuncElementList : TableFuncElement */
case 613:
    /*! Production::    indirection : indirection_el */
case 630:
    /*! Production::    func_arg_list : func_arg_expr */
case 632:
    /*! Production::    func_arg_list : func_arg_expr */
case 677:
    /*! Production::    expr_list : a_expr */
case 682:
    /*! Production::    type_list : Typename */
case 687:
    /*! Production::    array_expr_list : array_expr */
case 718:
    /*! Production::    when_clause_list : when_clause */
case 936:
    /*! Production::    target_list : target_el */
case 942:
    /*! Production::    qualified_name_list : qualified_name */
case 968:
    /*! Production::    sortby_list : sortby */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp]];
    break;

case 381:
    /*! Production::    cte_list : cte_list "," common_table_expr */
case 393:
    /*! Production::    group_by_list : group_by_list "," group_by_item */
case 443:
    /*! Production::    set_target_list : set_target_list "," set_target */
case 465:
    /*! Production::    insert_column_list : insert_column_list "," insert_column_item */
case 478:
    /*! Production::    from_list : from_list "," table_ref */
case 536:
    /*! Production::    window_definition_list : window_definition_list "," window_definition */
case 566:
    /*! Production::    rowsfrom_list : rowsfrom_list "," rowsfrom_item */
case 579:
    /*! Production::    TableFuncElementList : TableFuncElementList "," TableFuncElement */
case 633:
    /*! Production::    func_arg_list : func_arg_list "," func_arg_expr */
case 683:
    /*! Production::    type_list : type_list "," Typename */
case 688:
    /*! Production::    array_expr_list : array_expr_list "," array_expr */
case 937:
    /*! Production::    target_list : target_list "," target_el */
case 943:
    /*! Production::    qualified_name_list : qualified_name_list "," qualified_name */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2]; yyvstack[yysp - 2].push(yyvstack[yysp]);
    break;

case 382:
    /*! Production::    common_table_expr : name opt_name_list AS opt_materialized "(" PreparableStmt ")" */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_CommonTableExpr,
        ctename: yyvstack[yysp - 6],
        aliascolnames: yyvstack[yysp - 5],
        ctematerialized: yyvstack[yysp - 3],
        ctequery: yyvstack[yysp - 1],
        location: yylstack[yysp - 6]
    };
    break;

case 383:
    /*! Production::    opt_materialized : MATERIALIZED */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.CTEMaterialize.CTEMaterializeAlways;
    break;

case 384:
    /*! Production::    opt_materialized : NOT MATERIALIZED */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.CTEMaterialize.CTEMaterializeNever;
    break;

case 385:
    /*! Production::    opt_materialized : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.CTEMaterialize.CTEMaterializeDefault;
    break;

case 387:
    /*! Production::    opt_with_clause : %epsilon */
case 389:
    /*! Production::    into_clause : %epsilon */
case 391:
    /*! Production::    group_clause : %epsilon */
case 404:
    /*! Production::    having_clause : %epsilon */
case 408:
    /*! Production::    opt_for_locking_clause : %epsilon */
case 417:
    /*! Production::    locked_rels_list : %epsilon */
case 476:
    /*! Production::    from_clause : %epsilon */
case 500:
    /*! Production::    opt_alias_clause : %epsilon */
case 511:
    /*! Production::    join_outer : %epsilon */
case 528:
    /*! Production::    opt_repeatable_clause : %epsilon */
case 534:
    /*! Production::    window_clause : %epsilon */
case 540:
    /*! Production::    over_clause : %epsilon */
case 543:
    /*! Production::    opt_existing_window_name : %epsilon */
case 545:
    /*! Production::    opt_partition_clause : %epsilon */
case 572:
    /*! Production::    where_clause : %epsilon */
case 612:
    /*! Production::    opt_slice_bound : %epsilon */
case 615:
    /*! Production::    opt_indirection : %epsilon */
case 859:
    /*! Production::    opt_interval : %epsilon */
case 935:
    /*! Production::    opt_target_list : %epsilon */
case 947:
    /*! Production::    opt_name_list : %epsilon */
case 964:
    /*! Production::    opt_all_clause : %epsilon */
case 966:
    /*! Production::    opt_sort_clause : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = null;
    break;

case 388:
    /*! Production::    into_clause : INTO OptTempTableName */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_IntoClause,
        rel: yyvstack[yysp],
        colNames: null,
        options: null,
        onCommit: ONCOMMIT_NOOP,
        tableSpaceName: null,
        viewQuery: null,
        skipData: false,
    };
    break;

case 390:
    /*! Production::    group_clause : GROUP_P BY group_by_list */
case 544:
    /*! Production::    opt_partition_clause : PARTITION BY expr_list */
case 967:
    /*! Production::    sort_clause : ORDER BY sortby_list */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    break;

case 399:
    /*! Production::    empty_grouping_set : "(" ")" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeGroupingSet(_.GroupingSetKind.GROUPING_SET_EMPTY, null, yylstack[yysp - 1]);
    break;

case 400:
    /*! Production::    rollup_clause : ROLLUP "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeGroupingSet(_.GroupingSetKind.GROUPING_SET_ROLLUP, yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 401:
    /*! Production::    cube_clause : CUBE "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeGroupingSet(_.GroupingSetKind.GROUPING_SET_CUBE, yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 402:
    /*! Production::    grouping_sets_clause : GROUPING SETS "(" group_by_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeGroupingSet(_.GroupingSetKind.GROUPING_SET_SETS, yyvstack[yysp - 1], yylstack[yysp - 4]);
    break;

case 403:
    /*! Production::    having_clause : HAVING a_expr */
case 416:
    /*! Production::    locked_rels_list : OF qualified_name_list */
case 473:
    /*! Production::    returning_clause : RETURNING target_list */
case 475:
    /*! Production::    from_clause : FROM from_list */
case 513:
    /*! Production::    join_qual : ON a_expr */
case 533:
    /*! Production::    window_clause : WINDOW window_definition_list */
case 538:
    /*! Production::    over_clause : OVER window_specification */
case 571:
    /*! Production::    where_clause : WHERE a_expr */
case 573:
    /*! Production::    where_or_current_clause : WHERE a_expr */
case 701:
    /*! Production::    overlay_placing : PLACING a_expr */
case 710:
    /*! Production::    substr_from : FROM a_expr */
case 711:
    /*! Production::    substr_for : FOR a_expr */
case 713:
    /*! Production::    trim_list : FROM expr_list */
case 721:
    /*! Production::    case_default : ELSE a_expr */
case 978:
    /*! Production::    limit_clause : LIMIT select_limit_value */
case 982:
    /*! Production::    offset_clause : OFFSET select_offset_value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    break;

case 406:
    /*! Production::    for_locking_clause : FOR READ ONLY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = null;
    break;

case 410:
    /*! Production::    for_locking_items : for_locking_items for_locking_item */
case 719:
    /*! Production::    when_clause_list : when_clause_list when_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1]; yyvstack[yysp - 1].push(yyvstack[yysp]);
    break;

case 411:
    /*! Production::    for_locking_item : for_locking_strength locked_rels_list opt_nowait_or_skip */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_LockingClause,
        lockedRels: yyvstack[yysp - 1],
        strength: yyvstack[yysp - 2],
        waitPolicy: yyvstack[yysp]
    };
    break;

case 412:
    /*! Production::    for_locking_strength : FOR UPDATE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockClauseStrength.LCS_FORUPDATE;
    break;

case 413:
    /*! Production::    for_locking_strength : FOR NO KEY UPDATE */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockClauseStrength.LCS_FORNOKEYUPDATE;
    break;

case 414:
    /*! Production::    for_locking_strength : FOR SHARE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockClauseStrength.LCS_FORSHARE;
    break;

case 415:
    /*! Production::    for_locking_strength : FOR KEY SHARE */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockClauseStrength.LCS_FORKEYSHARE;
    break;

case 418:
    /*! Production::    values_clause : VALUES "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SelectStmt,
        valuesLists: [yyvstack[yysp - 1]]
    };
    break;

case 419:
    /*! Production::    values_clause : values_clause "," "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4];
    yyvstack[yysp - 4].valuesLists = yyvstack[yysp - 4].valuesLists.concat(yyvstack[yysp - 1]);
    break;

case 433:
    /*! Production::    opt_nowait_or_skip : NOWAIT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockWaitPolicy.LockWaitError;
    break;

case 434:
    /*! Production::    opt_nowait_or_skip : SKIP LOCKED */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockWaitPolicy.LockWaitSkip;
    break;

case 435:
    /*! Production::    opt_nowait_or_skip : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.LockWaitPolicy.LockWaitBlock;
    break;

case 436:
    /*! Production::    UpdateStmt : opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list from_clause where_or_current_clause returning_clause */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_UpdateStmt,
        relation: yyvstack[yysp - 5],
        targetList: yyvstack[yysp - 3],
        fromClause: yyvstack[yysp - 2],
        whereClause: yyvstack[yysp - 1],
        returningList: yyvstack[yysp],
        withClause: yyvstack[yysp - 7]
    };
    break;

case 438:
    /*! Production::    set_clause_list : set_clause_list "," set_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp] || []);
    break;

case 439:
    /*! Production::    set_clause : set_target "=" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].val = yyvstack[yysp];
    this.$ = [yyvstack[yysp - 2]];
    break;

case 440:
    /*! Production::    set_clause : "(" set_target_list ")" "=" a_expr */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var ncolumns = yyvstack[yysp - 3].length;
    var i = 1;
    var col_cell;
    
    /* Create a MultiAssignRef source for each target */
    for (col_cell of yyvstack[yysp - 3])
    {
        /** @type {ResTarget} */
        var res_col = col_cell;
    
        res_col.val = {
            type: _.NodeTag.T_MultiAssignRef,
            source: yyvstack[yysp],
            colno: i,
            ncolumns
        };
        i++;
    }
    
    this.$ = yyvstack[yysp - 3];
    break;

case 441:
    /*! Production::    set_target : ColId opt_indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ResTarget,
        name: yyvstack[yysp - 1],
        indirection: _.check_indirection(yyvstack[yysp], yyscanner),
        val: NULL,	/* upper production sets this */
        location: yylstack[yysp - 1]
    };
    break;

case 454:
    /*! Production::    InsertStmt : opt_with_clause INSERT INTO insert_target insert_rest opt_on_conflict returning_clause */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].relation = yyvstack[yysp - 3];
    yyvstack[yysp - 2].onConflictClause = yyvstack[yysp - 1];
    yyvstack[yysp - 2].returningList = yyvstack[yysp];
    yyvstack[yysp - 2].withClause = yyvstack[yysp - 6];
    this.$ = yyvstack[yysp - 2];
    break;

case 456:
    /*! Production::    insert_target : qualified_name AS ColId */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].alias = _.makeAlias(yyvstack[yysp], NIL);
    this.$ = yyvstack[yysp - 2];
    break;

case 457:
    /*! Production::    insert_rest : SelectStmt */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InsertStmt,
        cols: NIL,
        selectStmt: yyvstack[yysp],
    }
    break;

case 458:
    /*! Production::    insert_rest : OVERRIDING override_kind VALUE_P SelectStmt */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InsertStmt,
        cols: NIL,
        override: yyvstack[yysp - 2],
        selectStmt: yyvstack[yysp],
    }
    break;

case 459:
    /*! Production::    insert_rest : "(" insert_column_list ")" SelectStmt */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InsertStmt,
        cols: yyvstack[yysp - 2],
        selectStmt: yyvstack[yysp],
    }
    break;

case 460:
    /*! Production::    insert_rest : "(" insert_column_list ")" OVERRIDING override_kind VALUE_P SelectStmt */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InsertStmt,
        cols: yyvstack[yysp - 5],
        override: yyvstack[yysp - 2],
        selectStmt: yyvstack[yysp],
    }
    break;

case 461:
    /*! Production::    insert_rest : DEFAULT VALUES */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InsertStmt,
        cols: NIL,
        selectStmt: NULL,
    }
    break;

case 462:
    /*! Production::    override_kind : USER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.OverridingKind.OVERRIDING_USER_VALUE;
    break;

case 463:
    /*! Production::    override_kind : SYSTEM_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.OverridingKind.OVERRIDING_SYSTEM_VALUE;
    break;

case 466:
    /*! Production::    insert_column_item : ColId opt_indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ResTarget,
        name: yyvstack[yysp - 1],
        indirection: _.check_indirection(yyvstack[yysp], yyscanner),
        val: NULL,
        location: yylstack[yysp - 1],
    };
    break;

case 467:
    /*! Production::    opt_on_conflict : ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list where_clause */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_OnConflictClause,
        action:_.OnConflictAction.ONCONFLICT_UPDATE,
        infer: yyvstack[yysp - 5],
        targetList: yyvstack[yysp - 1],
        whereClause: yyvstack[yysp],
        location: yylstack[yysp - 7],
    };
    break;

case 468:
    /*! Production::    opt_on_conflict : ON CONFLICT opt_conf_expr DO NOTHING */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_OnConflictClause,
        action:_.OnConflictAction.ONCONFLICT_NOTHING,
        infer: yyvstack[yysp - 2],
        targetList: NIL,
        whereClause: NULL,
        location: yylstack[yysp - 4],
    };
    break;

case 469:
    /*! Production::    opt_on_conflict : %epsilon */
case 472:
    /*! Production::    opt_conf_expr : %epsilon */
case 526:
    /*! Production::    opt_repeatable_clause : %epsilon */
case 532:
    /*! Production::    filter_clause : %epsilon */
case 575:
    /*! Production::    where_or_current_clause : %epsilon */
case 722:
    /*! Production::    case_default : %epsilon */
case 724:
    /*! Production::    case_arg : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = NULL;
    break;

case 470:
    /*! Production::    opt_conf_expr : "(" index_params ")" where_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InferClause,
        indexElems: yyvstack[yysp - 2],
        whereClause: yyvstack[yysp],
        conname: NULL,
        location: yylstack[yysp - 3],
    };
    break;

case 471:
    /*! Production::    opt_conf_expr : ON CONSTRAINT name */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_InferClause,
        indexElems: NIL,
        whereClause: NULL,
        conname: yyvstack[yysp],
        location: yylstack[yysp - 2],
    };
    break;

case 474:
    /*! Production::    returning_clause : %epsilon */
case 530:
    /*! Production::    within_group_clause : %epsilon */
case 568:
    /*! Production::    opt_col_def_list : %epsilon */
case 589:
    /*! Production::    opt_array_bounds : %epsilon */
case 604:
    /*! Production::    opt_type_modifiers : %epsilon */
case 690:
    /*! Production::    extract_list : %epsilon */
case 703:
    /*! Production::    position_list : %epsilon */
case 709:
    /*! Production::    substr_list : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = NIL;
    break;

case 479:
    /*! Production::    table_ref : relation_expr opt_alias_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 1].alias = yyvstack[yysp];
    this.$ = yyvstack[yysp - 1];
    break;

case 480:
    /*! Production::    table_ref : relation_expr opt_alias_clause tablesample_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].alias = yyvstack[yysp - 1];
    this.$ = {
        ...yyvstack[yysp],
        /* relation_expr goes inside the RangeTableSample node */
        relation: yyvstack[yysp - 2]
    };
    break;

case 481:
    /*! Production::    table_ref : func_table func_alias_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        ...yyvstack[yysp - 1],
        alias: yyvstack[yysp][0],
        coldeflist: yyvstack[yysp][1]
    };
    break;

case 482:
    /*! Production::    table_ref : LATERAL_P func_table func_alias_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        ...yyvstack[yysp - 1],
        lateral: true,
        alias: yyvstack[yysp][0],
        coldeflist: yyvstack[yysp][1]
    };
    break;

case 483:
    /*! Production::    table_ref : xmltable opt_alias_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        ...yyvstack[yysp - 1],
        alias: yyvstack[yysp]
    };
    break;

case 484:
    /*! Production::    table_ref : LATERAL_P xmltable opt_alias_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        ...yyvstack[yysp - 1],
        lateral: true,
        alias: yyvstack[yysp],
    };
    break;

case 485:
    /*! Production::    table_ref : select_with_parens opt_alias_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_RangeSubselect,
        lateral: false,
        subquery: yyvstack[yysp - 1],
        alias: yyvstack[yysp]
    };
    /*
     * The SQL spec does not permit a subselect
     * (<derived_table>) without an alias clause,
     * so we don't either.  This avoids the problem
     * of needing to invent a unique refname for it.
     * That could be surmounted if there's sufficient
     * popular demand, but for now let's just implement
     * the spec and see if anyone complains.
     * However, it does seem like a good idea to emit
     * an error message that's better than "syntax error".
     */
    if (yyvstack[yysp] == null)
    {
        if (_.IsA(yyvstack[yysp - 1], 'SelectStmt') &&
            yyvstack[yysp - 1].valuesLists)
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("VALUES in FROM must have an alias"),
                     errhint("For example, FROM (VALUES ...) [AS] foo."),
                     parser_errposition(yylstack[yysp - 1])));
        else
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("subquery in FROM must have an alias"),
                     errhint("For example, FROM (SELECT ...) [AS] foo."),
                     parser_errposition(yylstack[yysp - 1])));
    }
    break;

case 486:
    /*! Production::    table_ref : LATERAL_P select_with_parens opt_alias_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_RangeSubselect,
        lateral: true,
        subquery: yyvstack[yysp - 1],
        alias: yyvstack[yysp],
    };
    /* same comment as above */
    if (yyvstack[yysp] == null)
    {
        if (_.IsA(yyvstack[yysp - 1], 'SelectStmt') &&
            yyvstack[yysp - 1].valuesLists)
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("VALUES in FROM must have an alias"),
                     errhint("For example, FROM (VALUES ...) [AS] foo."),
                     parser_errposition(yylstack[yysp - 1])));
        else
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("subquery in FROM must have an alias"),
                     errhint("For example, FROM (SELECT ...) [AS] foo."),
                     parser_errposition(yylstack[yysp - 1])));
    }
    break;

case 488:
    /*! Production::    table_ref : "(" joined_table ")" alias_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].alias = yyvstack[yysp];
    this.$ = yyvstack[yysp - 2];
    break;

case 490:
    /*! Production::    joined_table : table_ref CROSS JOIN table_ref */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* CROSS JOIN is same as unqualified inner join */
    this.$ = {
        type: _.NodeTag.T_JoinExpr,
        jointype: _.JoinType.JOIN_INNER,
        isNatural: false,
        larg: yyvstack[yysp - 3],
        rarg: yyvstack[yysp],
        usingClause: null,
        quals: null
    };
    break;

case 491:
    /*! Production::    joined_table : table_ref join_type JOIN table_ref join_qual */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_JoinExpr,
        jointype: yyvstack[yysp - 3],
        isNatural: false,
        larg: yyvstack[yysp - 4],
        rarg: yyvstack[yysp - 1],
    };
    if (Array.isArray(yyvstack[yysp]))
        this.$.usingClause = yyvstack[yysp]; /* USING clause */
    else
        this.$.quals = yyvstack[yysp]; /* ON clause */
    break;

case 492:
    /*! Production::    joined_table : table_ref JOIN table_ref join_qual */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* letting join_type reduce to empty doesn't work */
    this.$ = {
        type: _.NodeTag.T_JoinExpr,
        jointype: _.JoinType.JOIN_INNER,
        isNatural: false,
        larg: yyvstack[yysp - 3],
        rarg: yyvstack[yysp - 1],
    };
    if (Array.isArray(yyvstack[yysp]))
        this.$.usingClause = yyvstack[yysp]; /* USING clause */
    else
        this.$.quals = yyvstack[yysp]; /* ON clause */
    break;

case 493:
    /*! Production::    joined_table : table_ref NATURAL join_type JOIN table_ref */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_JoinExpr,
        jointype: yyvstack[yysp - 2],
        isNatural: true,
        larg: yyvstack[yysp - 4],
        rarg: yyvstack[yysp],
        usingClause: null, /* figure out which columns later... */
        quals: null, /* fill later */
    };
    break;

case 494:
    /*! Production::    joined_table : table_ref NATURAL JOIN table_ref */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* letting join_type reduce to empty doesn't work */
    this.$ = {
        type: _.NodeTag.T_JoinExpr,
        jointype: _.JoinType.JOIN_INNER,
        isNatural: true,
        larg: yyvstack[yysp - 3],
        rarg: yyvstack[yysp],
        usingClause: null, /* figure out which columns later... */
        quals: null, /* fill later */
    };
    break;

case 495:
    /*! Production::    alias_clause : AS ColId "(" name_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp - 3],
        colnames: yyvstack[yysp - 1]
    };
    break;

case 496:
    /*! Production::    alias_clause : AS ColId */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp]
    };
    break;

case 497:
    /*! Production::    alias_clause : ColId "(" name_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp - 3],
        colnames: yyvstack[yysp - 1]
    };
    break;

case 498:
    /*! Production::    alias_clause : ColId */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp]
    };
    break;

case 501:
    /*! Production::    func_alias_clause : alias_clause */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp], NIL];
    break;

case 502:
    /*! Production::    func_alias_clause : AS "(" TableFuncElementList ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [NULL, yyvstack[yysp - 1]];
    break;

case 503:
    /*! Production::    func_alias_clause : AS ColId "(" TableFuncElementList ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var a = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp - 3]
    };
    this.$ = [a, yyvstack[yysp - 1]];
    break;

case 504:
    /*! Production::    func_alias_clause : ColId "(" TableFuncElementList ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    var a = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp - 3]
    };
    this.$ = [a, yyvstack[yysp - 1]];
    break;

case 505:
    /*! Production::    func_alias_clause : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [NULL, NIL];
    break;

case 506:
    /*! Production::    join_type : FULL join_outer */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.JoinType.JOIN_FULL;
    break;

case 507:
    /*! Production::    join_type : LEFT join_outer */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.JoinType.JOIN_LEFT;
    break;

case 508:
    /*! Production::    join_type : RIGHT join_outer */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.JoinType.JOIN_RIGHT;
    break;

case 509:
    /*! Production::    join_type : INNER_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.JoinType.JOIN_INNER;
    break;

case 510:
    /*! Production::    join_outer : OUTER_P */
case 963:
    /*! Production::    opt_all_clause : ALL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = null;
    break;

case 512:
    /*! Production::    join_qual : USING "(" name_list ")" */
case 525:
    /*! Production::    opt_repeatable_clause : REPEATABLE "(" a_expr ")" */
case 527:
    /*! Production::    opt_repeatable_clause : REPEATABLE "(" a_expr ")" */
case 567:
    /*! Production::    opt_col_def_list : AS "(" TableFuncElementList ")" */
case 668:
    /*! Production::    qual_Op : OPERATOR "(" any_operator ")" */
case 670:
    /*! Production::    qual_all_Op : OPERATOR "(" any_operator ")" */
case 672:
    /*! Production::    subquery_Op : OPERATOR "(" any_operator ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    break;

case 514:
    /*! Production::    relation_expr : qualified_name */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* inheritance query, implicitly */
    this.$ = yyvstack[yysp];
    this.$.inh = true;
    this.$.alias = null;
    break;

case 515:
    /*! Production::    relation_expr : qualified_name "*" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* inheritance query, explicitly */
    this.$ = yyvstack[yysp - 1];
    this.$.inh = true;
    this.$.alias = null;
    break;

case 516:
    /*! Production::    relation_expr : ONLY qualified_name */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* no inheritance */
    this.$ = yyvstack[yysp];
    this.$.inh = false;
    this.$.alias = null;
    break;

case 517:
    /*! Production::    relation_expr : ONLY "(" qualified_name ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* no inheritance, SQL99-style syntax */
    this.$ = yyvstack[yysp - 1];
    this.$.inh = false;
    this.$.alias = null;
    break;

case 520:
    /*! Production::    relation_expr_opt_alias : relation_expr */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    console.log('1', this.$);
    break;

case 521:
    /*! Production::    relation_expr_opt_alias : relation_expr ColId */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    yyvstack[yysp - 1].alias = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp]
    };
    
    console.log('2', yyvstack[yysp - 1]);
    break;

case 522:
    /*! Production::    relation_expr_opt_alias : relation_expr AS ColId */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2];
    yyvstack[yysp - 2].alias = {
        type: _.NodeTag.T_Alias,
        aliasname: yyvstack[yysp]
    };
    
    console.log('3', this.$);
    break;

case 523:
    /*! Production::    tablesample_clause : TABLESAMPLE func_name "(" expr_list ")" opt_repeatable_clause */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* $$.relation will be filled in later */
    this.$ = {
        type: _.NodeTag.T_RangeTableSample,
        method: yyvstack[yysp - 4],
        args: yyvstack[yysp - 2],
        repeatable: yyvstack[yysp],
        location: yylstack[yysp - 4],
    };
    break;

case 524:
    /*! Production::    tablesample_clause : TABLESAMPLE func_name "(" expr_list ")" opt_repeatable_clause */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_RangeTableSample,
        /* n.relation will be filled in later */
        method: yyvstack[yysp - 4],
        args: yyvstack[yysp - 2],
        repeatable: yyvstack[yysp],
        location: yylstack[yysp - 4]
    };
    break;

case 529:
    /*! Production::    within_group_clause : WITHIN GROUP_P "(" sort_clause ")" */
case 531:
    /*! Production::    filter_clause : FILTER "(" WHERE a_expr ")" */
case 962:
    /*! Production::    distinct_clause : DISTINCT ON "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    break;

case 537:
    /*! Production::    window_definition : ColId AS window_specification */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    this.$.name = yyvstack[yysp - 2];
    break;

case 539:
    /*! Production::    over_clause : OVER ColId */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        name: yyvstack[yysp],
        refname: null,
        partitionClause: null,
        orderClause: null,
        frameOptions: _.FRAMEOPTION_DEFAULTS,
        startOffset: null,
        endOffset: null,
        location: yylstack[yysp]
    };
    break;

case 541:
    /*! Production::    window_specification : "(" opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        name: null,
        refname: yyvstack[yysp - 4],
        partitionClause: yyvstack[yysp - 3],
        orderClause: yyvstack[yysp - 2],
        /* copy relevant fields of opt_frame_clause */
        frameOptions: yyvstack[yysp - 1].frameOptions,
        startOffset: yyvstack[yysp - 1].startOffset,
        endOffset: yyvstack[yysp - 1].endOffset,
        location: yylstack[yysp - 5]
    };
    break;

case 546:
    /*! Production::    opt_frame_clause : RANGE frame_extent opt_window_exclusion_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.frameOptions |= _.FRAMEOPTION_NONDEFAULT | _.FRAMEOPTION_RANGE;
    this.$.frameOptions |= yyvstack[yysp];
    break;

case 547:
    /*! Production::    opt_frame_clause : ROWS frame_extent opt_window_exclusion_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.frameOptions |= _.FRAMEOPTION_NONDEFAULT | _.FRAMEOPTION_ROWS;
    this.$.frameOptions |= yyvstack[yysp];
    break;

case 548:
    /*! Production::    opt_frame_clause : GROUPS frame_extent opt_window_exclusion_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.frameOptions |= _.FRAMEOPTION_NONDEFAULT | _.FRAMEOPTION_GROUPS;
    this.$.frameOptions |= yyvstack[yysp];
    break;

case 549:
    /*! Production::    opt_frame_clause : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        frameOptions: _.FRAMEOPTION_DEFAULTS,
        startOffset: null,
        endOffset: null
    };
    break;

case 550:
    /*! Production::    frame_extent : frame_bound */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    /* reject invalid cases */
    if (this.$.frameOptions & _.FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
        ereport(ERROR,
                (errcode(ERRCODE_WINDOWING_ERROR),
                 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
                 parser_errposition(yylstack[yysp])));
    if (this.$.frameOptions & _.FRAMEOPTION_START_OFFSET_FOLLOWING)
        ereport(ERROR,
                (errcode(ERRCODE_WINDOWING_ERROR),
                 errmsg("frame starting from following row cannot end with current row"),
                 parser_errposition(yylstack[yysp])));
    this.$.frameOptions |= _.FRAMEOPTION_END_CURRENT_ROW;
    break;

case 551:
    /*! Production::    frame_extent : BETWEEN frame_bound AND frame_bound */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n1 = yyvstack[yysp - 2];
    var n2 = yyvstack[yysp];
    /* form merged options */
    var frameOptions = n1.frameOptions;
    /* shift converts START_ options to END_ options */
    frameOptions |= n2.frameOptions << 1;
    frameOptions |= _.FRAMEOPTION_BETWEEN;
    /* reject invalid cases */
    if (frameOptions & _.FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
        ereport(ERROR,
                (errcode(ERRCODE_WINDOWING_ERROR),
                 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
                 parser_errposition(yylstack[yysp - 2])));
    if (frameOptions & _.FRAMEOPTION_END_UNBOUNDED_PRECEDING)
        ereport(ERROR,
                (errcode(ERRCODE_WINDOWING_ERROR),
                 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
                 parser_errposition(yylstack[yysp])));
    if ((frameOptions & _.FRAMEOPTION_START_CURRENT_ROW) &&
        (frameOptions & _.FRAMEOPTION_END_OFFSET_PRECEDING))
        ereport(ERROR,
                (errcode(ERRCODE_WINDOWING_ERROR),
                 errmsg("frame starting from current row cannot have preceding rows"),
                 parser_errposition(yylstack[yysp])));
    if ((frameOptions & _.FRAMEOPTION_START_OFFSET_FOLLOWING) &&
        (frameOptions & (_.FRAMEOPTION_END_OFFSET_PRECEDING |
                         _.FRAMEOPTION_END_CURRENT_ROW)))
        ereport(ERROR,
                (errcode(ERRCODE_WINDOWING_ERROR),
                 errmsg("frame starting from following row cannot have preceding rows"),
                 parser_errposition(yylstack[yysp])));
    n1.frameOptions = frameOptions;
    n1.endOffset = n2.startOffset;
    this.$ = n1;
    break;

case 552:
    /*! Production::    frame_bound : UNBOUNDED PRECEDING */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        frameOptions: _.FRAMEOPTION_START_UNBOUNDED_PRECEDING,
        startOffset: null,
        endOffset: null
    };
    break;

case 553:
    /*! Production::    frame_bound : UNBOUNDED FOLLOWING */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        frameOptions: _.FRAMEOPTION_START_UNBOUNDED_FOLLOWING,
        startOffset: null,
        endOffset: null
    };
    break;

case 554:
    /*! Production::    frame_bound : CURRENT_P ROW */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        frameOptions: _.FRAMEOPTION_START_CURRENT_ROW,
        startOffset: null,
        endOffset: null
    };
    break;

case 555:
    /*! Production::    frame_bound : a_expr PRECEDING */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        frameOptions: _.FRAMEOPTION_START_OFFSET_PRECEDING,
        startOffset: yyvstack[yysp - 1],
        endOffset: null
    };
    break;

case 556:
    /*! Production::    frame_bound : a_expr FOLLOWING */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_WindowDef,
        frameOptions: _.FRAMEOPTION_START_OFFSET_FOLLOWING,
        startOffset: yyvstack[yysp - 1],
        endOffset: null
    };
    break;

case 557:
    /*! Production::    opt_window_exclusion_clause : EXCLUDE CURRENT_P ROW */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.FRAMEOPTION_EXCLUDE_CURRENT_ROW;
    break;

case 558:
    /*! Production::    opt_window_exclusion_clause : EXCLUDE GROUP_P */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.FRAMEOPTION_EXCLUDE_GROUP;
    break;

case 559:
    /*! Production::    opt_window_exclusion_clause : EXCLUDE TIES */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.FRAMEOPTION_EXCLUDE_TIES;
    break;

case 560:
    /*! Production::    opt_window_exclusion_clause : EXCLUDE NO OTHERS */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = 0;
    break;

case 561:
    /*! Production::    opt_window_exclusion_clause : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = 0;
    break;

case 562:
    /*! Production::    func_table : func_expr_windowless opt_ordinality */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* alias and coldeflist are set by table_ref production */
    this.$ = {
        type: _.NodeTag.T_RangeFunction,
        lateral: false,
        ordinality: yyvstack[yysp],
        is_rowsfrom: false,
        functions: [[yyvstack[yysp - 1], NIL]],
    };
    break;

case 563:
    /*! Production::    func_table : ROWS FROM "(" rowsfrom_list ")" opt_ordinality */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* alias and coldeflist are set by table_ref production */
    this.$ = {
        type: _.NodeTag.T_RangeFunction,
        lateral: false,
        ordinality: yyvstack[yysp],
        is_rowsfrom: true,
        functions: yyvstack[yysp - 2],
    }
    break;

case 564:
    /*! Production::    rowsfrom_item : func_expr_windowless opt_col_def_list */
case 706:
    /*! Production::    substr_list : a_expr substr_from */
case 973:
    /*! Production::    select_limit : offset_clause limit_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], yyvstack[yysp]];
    break;

case 569:
    /*! Production::    opt_ordinality : WITH_LA ORDINALITY */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = true;
    break;

case 570:
    /*! Production::    opt_ordinality : %epsilon */
case 837:
    /*! Production::    opt_varying : %epsilon */
case 845:
    /*! Production::    opt_timezone : %epsilon */
case 960:
    /*! Production::    all_or_distinct : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = false;
    break;

case 574:
    /*! Production::    where_or_current_clause : WHERE CURRENT_P OF cursor_name */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* cvarno is filled in by parse analysis */
    this.$ = {
        type: _.NodeTag.T_CurrentOfExpr,
        cursor_name: yyvstack[yysp],
        cursor_param: 0
    };
    break;

case 580:
    /*! Production::    TableFuncElement : ColId Typename opt_collate_clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ColumnDef,
        colname: yyvstack[yysp - 2],
        typeName: yyvstack[yysp - 1],
        inhcount: 0,
        is_local: true,
        is_not_null: false,
        is_from_type: false,
        storage: 0,
        raw_default: NULL,
        cooked_default: NULL,
        collClause: /* (CollateClause *) */ yyvstack[yysp],
        collOid: -1,
        constraints: NIL,
        location: yylstack[yysp - 2]
    }
    break;

case 581:
    /*! Production::    Typename : SimpleTypename opt_array_bounds */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.arrayBounds = yyvstack[yysp];
    break;

case 582:
    /*! Production::    Typename : SETOF SimpleTypename opt_array_bounds */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.arrayBounds = yyvstack[yysp];
    this.$.setof = true;
    break;

case 583:
    /*! Production::    Typename : SimpleTypename ARRAY "[" Iconst "]" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4];
    this.$.arrayBounds = [_.makeInteger(yyvstack[yysp - 1])];
    break;

case 584:
    /*! Production::    Typename : SETOF SimpleTypename ARRAY "[" Iconst "]" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4];
    this.$.arrayBounds = [_.makeInteger(yyvstack[yysp - 1])];
    this.$.setof = true;
    break;

case 585:
    /*! Production::    Typename : SimpleTypename ARRAY */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.arrayBounds = [_.makeInteger(-1)];
    break;

case 586:
    /*! Production::    Typename : SETOF SimpleTypename ARRAY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.arrayBounds = [_.makeInteger(-1)];
    this.$.setof = true;
    break;

case 587:
    /*! Production::    opt_array_bounds : opt_array_bounds "[" "]" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2] || []; this.$.push(_.makeInteger(-1));
    break;

case 588:
    /*! Production::    opt_array_bounds : opt_array_bounds "[" Iconst "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3] || []; this.$.push(_.makeInteger(yyvstack[yysp - 1]));
    break;

case 595:
    /*! Production::    SimpleTypename : ConstInterval opt_interval */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1];
    this.$.typmods = yyvstack[yysp];
    break;

case 596:
    /*! Production::    SimpleTypename : ConstInterval "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3];
    this.$.typmods = [_.makeIntConst(_.INTERVAL_FULL_RANGE, -1),
                             _.makeIntConst(yyvstack[yysp - 1], yylstack[yysp - 1])];
    break;

case 601:
    /*! Production::    GenericType : type_function_name opt_type_modifiers */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeTypeName(yyvstack[yysp - 1]);
    this.$.typmods = yyvstack[yysp];
    this.$.location = yylstack[yysp - 1];
    break;

case 602:
    /*! Production::    GenericType : type_function_name attrs opt_type_modifiers */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 1].unshift(_.makeString(yyvstack[yysp - 2]))
    this.$ = _.makeTypeNameFromNameList(yyvstack[yysp - 1]);
    this.$.typmods = yyvstack[yysp];
    this.$.location = yylstack[yysp - 2];
    break;

case 605:
    /*! Production::    columnref : ColId */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeColumnRef(yyvstack[yysp], null, yylstack[yysp], null /* yyscanner */);
    break;

case 606:
    /*! Production::    columnref : ColId indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeColumnRef(yyvstack[yysp - 1], yyvstack[yysp], yylstack[yysp - 1], null /* yyscanner */);
    break;

case 607:
    /*! Production::    indirection_el : "." attr_name */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeString(yyvstack[yysp]);
    break;

case 608:
    /*! Production::    indirection_el : "." "*" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeNode('A_Star');
    break;

case 609:
    /*! Production::    indirection_el : "[" a_expr "]" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    var ai = _.makeNode('A_Indices');
    ai.is_slice = false;
    ai.lidx = null;
    ai.uidx = yyvstack[yysp - 1];
    this.$ = ai;
    break;

case 610:
    /*! Production::    indirection_el : "[" opt_slice_bound ":" opt_slice_bound "]" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var ai = _.makeNode('A_Indices');
    ai.is_slice = true;
    ai.lidx = yyvstack[yysp - 3];
    ai.uidx = yyvstack[yysp - 1];
    this.$ = ai;
    break;

case 614:
    /*! Production::    indirection : indirection indirection_el */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 1].push(yyvstack[yysp]); this.$ = yyvstack[yysp - 1];
    break;

case 616:
    /*! Production::    opt_indirection : opt_indirection indirection_el */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = (yyvstack[yysp - 1] || []).push(yyvstack[yysp]);
    break;

case 618:
    /*! Production::    opt_asymmetric : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,LT,LA,-,-):
    this.$ = undefined;
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,LT,LA,-,-)
    break;

case 631:
    /*! Production::    func_arg_list : func_arg_list "," func_arg_expr */
case 678:
    /*! Production::    expr_list : expr_list "," a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].push(yyvstack[yysp]);
    this.$ = yyvstack[yysp - 2];
    break;

case 634:
    /*! Production::    func_name : type_function_name */
case 667:
    /*! Production::    qual_Op : Op */
case 669:
    /*! Production::    qual_all_Op : all_Op */
case 671:
    /*! Production::    subquery_Op : all_Op */
case 928:
    /*! Production::    any_name : ColId */
case 948:
    /*! Production::    name_list : name */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeString(yyvstack[yysp])];
    break;

case 635:
    /*! Production::    func_name : ColId indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp].unshift(_.makeString(yyvstack[yysp - 1]));
    this.$ = check_func_name(yyvstack[yysp], yyscanner);
    break;

case 636:
    /*! Production::    AexprConst : Iconst */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeIntConst(yyvstack[yysp], yylstack[yysp]);
    break;

case 637:
    /*! Production::    AexprConst : FCONST */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFloatConst(yyvstack[yysp], yylstack[yysp]);
    break;

case 638:
    /*! Production::    AexprConst : Sconst */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeStringConst(yyvstack[yysp], yylstack[yysp]);
    break;

case 639:
    /*! Production::    AexprConst : BCONST */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeBitStringConst(yyvstack[yysp], yylstack[yysp]);
    break;

case 640:
    /*! Production::    AexprConst : XCONST */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* This is a bit constant per SQL99:
     * Without Feature F511, "BIT data type",
     * a <general literal> shall not be a
     * <bit string literal> or a <hex string literal>.
     */
    this.$ = _.makeBitStringConst(yyvstack[yysp], yylstack[yysp]);
    break;

case 641:
    /*! Production::    AexprConst : func_name Sconst */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* generic type 'literal' syntax */
    var t = _.makeTypeNameFromNameList(yyvstack[yysp - 1]);
    t.location = yylstack[yysp - 1];
    this.$ = _.makeStringConstCast(yyvstack[yysp], yylstack[yysp], t);
    break;

case 642:
    /*! Production::    AexprConst : ConstTypename Sconst */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeStringConstCast(yyvstack[yysp], yylstack[yysp], yyvstack[yysp - 1]);
    break;

case 643:
    /*! Production::    AexprConst : ConstInterval Sconst opt_interval */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    var t = yyvstack[yysp - 2];
    t.typmods = yyvstack[yysp];
    this.$ = _.makeStringConstCast(yyvstack[yysp - 1], yylstack[yysp - 1], t);
    break;

case 644:
    /*! Production::    AexprConst : ConstInterval "(" Iconst ")" Sconst */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var t = yyvstack[yysp - 4];
    t.typmods = [_.makeIntConst(INTERVAL_FULL_RANGE, -1),
                            makeIntConst(yyvstack[yysp - 2], yylstack[yysp - 2])];
    this.$ = _.makeStringConstCast(yyvstack[yysp], yylstack[yysp], t);
    break;

case 645:
    /*! Production::    AexprConst : TRUE_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeBoolAConst(true, yylstack[yysp]);
    break;

case 646:
    /*! Production::    AexprConst : FALSE_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeBoolAConst(false, yylstack[yysp]);
    break;

case 647:
    /*! Production::    AexprConst : NULL_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeNullAConst(yylstack[yysp]);
    break;

case 655:
    /*! Production::    MathOp : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "+";
    break;

case 656:
    /*! Production::    MathOp : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "-";
    break;

case 657:
    /*! Production::    MathOp : "*" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "*";
    break;

case 658:
    /*! Production::    MathOp : "/" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "/";
    break;

case 659:
    /*! Production::    MathOp : "%" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "%";
    break;

case 660:
    /*! Production::    MathOp : "^" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "^";
    break;

case 661:
    /*! Production::    MathOp : "<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "<";
    break;

case 662:
    /*! Production::    MathOp : ">" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ">";
    break;

case 663:
    /*! Production::    MathOp : "=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "=";
    break;

case 664:
    /*! Production::    MathOp : LESS_EQUALS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "<=";
    break;

case 665:
    /*! Production::    MathOp : GREATER_EQUALS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = ">=";
    break;

case 666:
    /*! Production::    MathOp : NOT_EQUALS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "<>";
    break;

case 673:
    /*! Production::    subquery_Op : LIKE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeString("~~")];
    break;

case 674:
    /*! Production::    subquery_Op : NOT_LA LIKE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeString("!~~")];
    break;

case 675:
    /*! Production::    subquery_Op : ILIKE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeString("~~*")];
    break;

case 676:
    /*! Production::    subquery_Op : NOT_LA ILIKE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeString("!~~*")];
    break;

case 680:
    /*! Production::    func_arg_expr : param_name COLON_EQUALS a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_NamedArgExpr,
        name: yyvstack[yysp - 2],
        arg: yyvstack[yysp],
        argnumber: -1,		/* until determined */
        location: yylstack[yysp - 2]
    };
    break;

case 681:
    /*! Production::    func_arg_expr : param_name EQUALS_GREATER a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_NamedArgExpr,
        name: yyvstack[yysp - 2],
        arg: yyvstack[yysp],
        argnumber: -1,		/* until determined */
        location: yylstack[yysp - 2]
    }
    break;

case 684:
    /*! Production::    array_expr : "[" expr_list "]" */
case 685:
    /*! Production::    array_expr : "[" array_expr_list "]" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeAArrayExpr(yyvstack[yysp - 1], yylstack[yysp - 2]);
    break;

case 686:
    /*! Production::    array_expr : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeAArrayExpr(NIL, yylstack[yysp - 1]);
    break;

case 689:
    /*! Production::    extract_list : extract_arg FROM a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeStringConst(yyvstack[yysp - 2], yylstack[yysp - 2]), yyvstack[yysp]];
    break;

case 692:
    /*! Production::    extract_arg : YEAR_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "year";
    break;

case 693:
    /*! Production::    extract_arg : MONTH_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "month";
    break;

case 694:
    /*! Production::    extract_arg : DAY_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "day";
    break;

case 695:
    /*! Production::    extract_arg : HOUR_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "hour";
    break;

case 696:
    /*! Production::    extract_arg : MINUTE_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "minute";
    break;

case 697:
    /*! Production::    extract_arg : SECOND_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "second";
    break;

case 699:
    /*! Production::    overlay_list : a_expr overlay_placing substr_from substr_for */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]];
    break;

case 700:
    /*! Production::    overlay_list : a_expr overlay_placing substr_from */
case 704:
    /*! Production::    substr_list : a_expr substr_from substr_for */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]];
    break;

case 702:
    /*! Production::    position_list : b_expr IN_P b_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp], yyvstack[yysp - 2]];
    break;

case 705:
    /*! Production::    substr_list : a_expr substr_for substr_from */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* not legal per SQL99, but might as well allow it */
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1]];
    break;

case 707:
    /*! Production::    substr_list : a_expr substr_for */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /*
     * Since there are no cases where this syntax allows
     * a textual FOR value, we forcibly cast the argument
     * to int4.  The possible matches in pg_proc are
     * substring(text,int4) and substring(text,text),
     * and we don't want the parser to choose the latter,
     * which it is likely to do if the second argument
     * is unknown or doesn't have an implicit cast to int4.
     */
    this.$ = [yyvstack[yysp - 1], _.makeIntConst(1, -1),
                    _.makeTypeCast(yyvstack[yysp],
                                 _.SystemTypeName("int4"), -1)];
    break;

case 712:
    /*! Production::    trim_list : a_expr FROM expr_list */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]; yyvstack[yysp].push(yyvstack[yysp - 2]);
    break;

case 715:
    /*! Production::    in_expr : select_with_parens */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* other fields will be filled later */
    this.$ = {
        type: _.NodeTag.T_SubLink,
        subselect: yyvstack[yysp]
    };
    break;

case 717:
    /*! Production::    case_expr : CASE case_arg when_clause_list case_default END_P */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_CaseExpr,
        casetype: -1, /* not analyzed yet */
        arg: yyvstack[yysp - 3],
        args: yyvstack[yysp - 2],
        defresult: yyvstack[yysp - 1],
        location: yylstack[yysp - 4],
    };
    break;

case 720:
    /*! Production::    when_clause : WHEN a_expr THEN a_expr */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_CaseWhen,
        expr: yyvstack[yysp - 2],
        result: yyvstack[yysp],
        location: yylstack[yysp - 3]
    };
    break;

case 726:
    /*! Production::    b_expr : b_expr TYPECAST Typename */
case 863:
    /*! Production::    a_expr : a_expr TYPECAST Typename */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeTypeCast(yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 727:
    /*! Production::    b_expr : "+" b_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "+", NULL, yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 728:
    /*! Production::    b_expr : "-" b_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = doNegate(yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 729:
    /*! Production::    b_expr : b_expr "+" b_expr */
case 868:
    /*! Production::    a_expr : a_expr "+" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "+", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 730:
    /*! Production::    b_expr : b_expr "-" b_expr */
case 869:
    /*! Production::    a_expr : a_expr "-" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "-", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 731:
    /*! Production::    b_expr : b_expr "*" b_expr */
case 870:
    /*! Production::    a_expr : a_expr "*" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "*", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 732:
    /*! Production::    b_expr : b_expr "/" b_expr */
case 871:
    /*! Production::    a_expr : a_expr "/" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "/", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 733:
    /*! Production::    b_expr : b_expr "%" b_expr */
case 872:
    /*! Production::    a_expr : a_expr "%" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "%", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 734:
    /*! Production::    b_expr : b_expr "^" b_expr */
case 873:
    /*! Production::    a_expr : a_expr "^" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "^", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 735:
    /*! Production::    b_expr : b_expr "<" b_expr */
case 874:
    /*! Production::    a_expr : a_expr "<" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "<", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 736:
    /*! Production::    b_expr : b_expr ">" b_expr */
case 875:
    /*! Production::    a_expr : a_expr ">" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, ">", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 737:
    /*! Production::    b_expr : b_expr "=" b_expr */
case 876:
    /*! Production::    a_expr : a_expr "=" a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "=", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 738:
    /*! Production::    b_expr : b_expr LESS_EQUALS b_expr */
case 877:
    /*! Production::    a_expr : a_expr LESS_EQUALS a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "<=", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 739:
    /*! Production::    b_expr : b_expr GREATER_EQUALS b_expr */
case 878:
    /*! Production::    a_expr : a_expr GREATER_EQUALS a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, ">=", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 740:
    /*! Production::    b_expr : b_expr NOT_EQUALS b_expr */
case 879:
    /*! Production::    a_expr : a_expr NOT_EQUALS a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "<>", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 741:
    /*! Production::    b_expr : b_expr qual_Op b_expr */
case 880:
    /*! Production::    a_expr : a_expr qual_Op a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP, yyvstack[yysp - 1], yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 742:
    /*! Production::    b_expr : qual_Op b_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP, yyvstack[yysp - 1], NULL, yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 743:
    /*! Production::    b_expr : b_expr qual_Op */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP, yyvstack[yysp], yyvstack[yysp - 1], NULL, yylstack[yysp]);
    break;

case 744:
    /*! Production::    b_expr : b_expr IS DISTINCT FROM b_expr */
case 910:
    /*! Production::    a_expr : a_expr IS DISTINCT FROM a_expr */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_DISTINCT, "=", yyvstack[yysp - 4], yyvstack[yysp], yylstack[yysp - 3]);
    break;

case 745:
    /*! Production::    b_expr : b_expr IS NOT DISTINCT FROM b_expr */
case 911:
    /*! Production::    a_expr : a_expr IS NOT DISTINCT FROM a_expr */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_NOT_DISTINCT, "=", yyvstack[yysp - 5], yyvstack[yysp], yylstack[yysp - 4]);
    break;

case 746:
    /*! Production::    b_expr : b_expr IS OF "(" type_list ")" */
case 912:
    /*! Production::    a_expr : a_expr IS OF "(" type_list ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OF, "=", yyvstack[yysp - 5], yyvstack[yysp - 1], yylstack[yysp - 4]);
    break;

case 747:
    /*! Production::    b_expr : b_expr IS NOT OF "(" type_list ")" */
case 913:
    /*! Production::    a_expr : a_expr IS NOT OF "(" type_list ")" */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OF, "<>", yyvstack[yysp - 6], yyvstack[yysp - 1], yylstack[yysp - 5]);
    break;

case 748:
    /*! Production::    b_expr : b_expr IS DOCUMENT_P */
case 923:
    /*! Production::    a_expr : a_expr IS DOCUMENT_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeXmlExpr(_.XmlExprOp.IS_DOCUMENT, NULL, NIL,
    [yyvstack[yysp - 2]], yylstack[yysp - 1]);
    break;

case 749:
    /*! Production::    b_expr : b_expr IS NOT DOCUMENT_P */
case 924:
    /*! Production::    a_expr : a_expr IS NOT DOCUMENT_P */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeNotExpr(_.makeXmlExpr(_.XmlExprOp.IS_DOCUMENT, NULL, NIL,
                [yyvstack[yysp - 3]], yylstack[yysp - 2]),
    yylstack[yysp - 2]);
    break;

case 752:
    /*! Production::    c_expr : PARAM opt_indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    var p = {
        type: _.NodeTag.T_ParamRef,
        number: yyvstack[yysp - 1],
        location: yylstack[yysp - 1]
    };
    
    if (yyvstack[yysp])
    {
        this.$ = {
            type: _.NodeTag.T_A_Indirection,
            arg: p,
            indirection: _.check_indirection(yyvstack[yysp], yyscanner),
        };
    }
    else
        this.$ = p;
    break;

case 753:
    /*! Production::    c_expr : "(" a_expr ")" opt_indirection */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp])
    {
        this.$ = {
            type: _.NodeTag.T_A_Indirection,
            arg: yyvstack[yysp - 2],
            indirection: _.check_indirection(yyvstack[yysp], yyscanner),
        };
    }
    else if (true /* operator_precedence_warning */)
    {
        /*
         * If precedence warnings are enabled, insert
         * AEXPR_PAREN nodes wrapping all explicitly
         * parenthesized subexpressions; this prevents bogus
         * warnings from being issued when the ordering has
         * been forced by parentheses.  Take care that an
         * AEXPR_PAREN node has the same exprLocation as its
         * child, so as not to cause surprising changes in
         * error cursor positioning.
         *
         * In principle we should not be relying on a GUC to
         * decide whether to insert AEXPR_PAREN nodes.
         * However, since they have no effect except to
         * suppress warnings, it's probably safe enough; and
         * we'd just as soon not waste cycles on dummy parse
         * nodes if we don't have to.
         */
        this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_PAREN, NIL, yyvstack[yysp - 2], NULL,
                                 _.exprLocation(yyvstack[yysp - 2]));
    }
    else
        this.$ = yyvstack[yysp - 2];
    break;

case 756:
    /*! Production::    c_expr : select_with_parens */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.SubLink,
        subLinkType: _.SubLinkType.EXPR_SUBLINK,
        subLinkId: 0,
        testexpr: NULL,
        operName: NIL,
        subselect: yyvstack[yysp],
        location: yylstack[yysp]
    };
    break;

case 757:
    /*! Production::    c_expr : select_with_parens indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /*
     * Because the select_with_parens nonterminal is designed
     * to "eat" as many levels of parens as possible, the
     * '(' a_expr ')' opt_indirection production above will
     * fail to match a sub-SELECT with indirection decoration;
     * the sub-SELECT won't be regarded as an a_expr as long
     * as there are parens around it.  To support applying
     * subscripting or field selection to a sub-SELECT result,
     * we need this redundant-looking production.
     */
    var n = {
        type: _.NodeTag.SubLink,
        subLinkType: _.SubLinkType.EXPR_SUBLINK,
        subLinkId: 0,
        testexpr: NULL,
        operName: NIL,
        subselect: yyvstack[yysp - 1],
        location: yylstack[yysp - 1],
    };
    
    this.$ = {
        type: _.NodeTag.A_Indirection,
        arg: n,
        indirection: _.check_indirection(yyvstack[yysp], yyscanner),
    };
    break;

case 758:
    /*! Production::    c_expr : EXISTS select_with_parens */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SubLink,
        subLinkType: _.SubLinkType.EXISTS_SUBLINK,
        subLinkId: 0,
        testexpr: NULL,
        operName: NIL,
        subselect: yyvstack[yysp],
        location: yylstack[yysp - 1],
    };
    break;

case 759:
    /*! Production::    c_expr : ARRAY select_with_parens */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SubLink,
        subLinkType: ARRAY_SUBLINK,
        subLinkId: 0,
        testexpr: NULL,
        operName: NIL,
        subselect: yyvstack[yysp],
        location: yylstack[yysp - 1],
    };
    break;

case 760:
    /*! Production::    c_expr : ARRAY array_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    /* point outermost A_ArrayExpr to the ARRAY keyword */
    this.$.location = yylstack[yysp - 1];
    break;

case 761:
    /*! Production::    c_expr : explicit_row */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_RowExpr,
        args: yyvstack[yysp],
        row_typeid: -1,	/* not analyzed yet */
        colnames: NIL,	/* to be filled in during analysis */
        row_format: _.CoercionForm.COERCE_EXPLICIT_CALL, /* abuse */
        location: yylstack[yysp],
    };
    break;

case 762:
    /*! Production::    c_expr : implicit_row */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_RowExpr,
        args: yyvstack[yysp],
        row_typeid: -1,	/* not analyzed yet */
        colnames: NIL,	/* to be filled in during analysis */
        row_format: _.CoercionForm.COERCE_IMPLICIT_CAST, /* abuse */
        location: yylstack[yysp]
    };
    break;

case 763:
    /*! Production::    c_expr : GROUPING "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
          type: _.NodeTag.T_GroupingFunc,
        args: yyvstack[yysp - 1],
        location: yylstack[yysp - 3]
    };
    break;

case 764:
    /*! Production::    func_application : func_name "(" ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(yyvstack[yysp - 2], NIL, yylstack[yysp - 2]);
    break;

case 765:
    /*! Production::    func_application : func_name "(" func_arg_list opt_sort_clause ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(yyvstack[yysp - 4], yyvstack[yysp - 2], yylstack[yysp - 4]);
    this.$.agg_order = yyvstack[yysp - 1];
    break;

case 766:
    /*! Production::    func_application : func_name "(" VARIADIC func_arg_expr opt_sort_clause ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(yyvstack[yysp - 5], [yyvstack[yysp - 2]], yylstack[yysp - 5]);
    this.$.func_variadic = true;
    this.$.agg_order = yyvstack[yysp - 1];
    break;

case 767:
    /*! Production::    func_application : func_name "(" func_arg_list "," VARIADIC func_arg_expr opt_sort_clause ")" */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(yyvstack[yysp - 7], [...yyvstack[yysp - 5], yyvstack[yysp - 2]], yylstack[yysp - 7]);
    this.$.func_variadic = true;
    this.$.agg_order = yyvstack[yysp - 1];
    break;

case 768:
    /*! Production::    func_application : func_name "(" ALL func_arg_list opt_sort_clause ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* Ideally we'd mark the FuncCall node to indicate
     * "must be an aggregate", but there's no provision
     * for that in FuncCall at the moment.
     */
    this.$ = _.makeFuncCall(yyvstack[yysp - 5], yyvstack[yysp - 2], yylstack[yysp - 5]);
    this.$.agg_order = yyvstack[yysp - 1];
    break;

case 769:
    /*! Production::    func_application : func_name "(" DISTINCT func_arg_list opt_sort_clause ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(yyvstack[yysp - 5], yyvstack[yysp - 2], yylstack[yysp - 5]);
    this.$.agg_order = yyvstack[yysp - 1];
    this.$.agg_distinct = true;
    break;

case 770:
    /*! Production::    func_application : func_name "(" "*" ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /*
     * We consider AGGREGATE(*) to invoke a parameterless
     * aggregate.  This does the right thing for COUNT(*),
     * and there are no other aggregates in SQL that accept
     * '*' as parameter.
     *
     * The FuncCall node is also marked agg_star = true,
     * so that later processing can detect what the argument
     * really was.
     */
    this.$ = _.makeFuncCall(yyvstack[yysp - 3], NIL, yylstack[yysp - 3]);
    this.$.agg_star = true;
    break;

case 771:
    /*! Production::    func_expr : func_application within_group_clause filter_clause over_clause */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /** @type {FuncCall} */
    var n = yyvstack[yysp - 3];
    
    /*
     * The order clause for WITHIN GROUP and the one for
     * plain-aggregate ORDER BY share a field, so we have to
     * check here that at most one is present.  We also check
     * for DISTINCT and VARIADIC here to give a better error
     * location.  Other consistency checks are deferred to
     * parse analysis.
     */
    if (yyvstack[yysp - 2] != NIL)
    {
        if (n.agg_order != NIL)
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
                     parser_errposition(yylstack[yysp - 2])));
        if (n.agg_distinct)
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("cannot use DISTINCT with WITHIN GROUP"),
                     parser_errposition(yylstack[yysp - 2])));
        if (n.func_variadic)
            ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("cannot use VARIADIC with WITHIN GROUP"),
                     parser_errposition(yylstack[yysp - 2])));
        n.agg_order = yyvstack[yysp - 2];
        n.agg_within_group = true;
    }
    n.agg_filter = yyvstack[yysp - 1];
    n.over = yyvstack[yysp];
    this.$ = n;
    break;

case 775:
    /*! Production::    func_expr_common_subexpr : COLLATION FOR "(" a_expr ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(_.SystemFuncName("pg_collation_for"),
    [yyvstack[yysp - 1]],
    yylstack[yysp - 4]);
    break;

case 776:
    /*! Production::    func_expr_common_subexpr : CURRENT_DATE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_DATE, -1, yylstack[yysp]);
    break;

case 777:
    /*! Production::    func_expr_common_subexpr : CURRENT_TIME */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_TIME, -1, yylstack[yysp]);
    break;

case 778:
    /*! Production::    func_expr_common_subexpr : CURRENT_TIME "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_TIME_N, yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 779:
    /*! Production::    func_expr_common_subexpr : CURRENT_TIMESTAMP */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_TIMESTAMP, -1, yylstack[yysp]);
    break;

case 780:
    /*! Production::    func_expr_common_subexpr : CURRENT_TIMESTAMP "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_TIMESTAMP_N, yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 781:
    /*! Production::    func_expr_common_subexpr : LOCALTIME */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_LOCALTIME, -1, yylstack[yysp]);
    break;

case 782:
    /*! Production::    func_expr_common_subexpr : LOCALTIME "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_LOCALTIME_N, yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 783:
    /*! Production::    func_expr_common_subexpr : LOCALTIMESTAMP */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_LOCALTIMESTAMP, -1, yylstack[yysp]);
    break;

case 784:
    /*! Production::    func_expr_common_subexpr : LOCALTIMESTAMP "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_LOCALTIMESTAMP_N, yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 785:
    /*! Production::    func_expr_common_subexpr : CURRENT_ROLE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_ROLE, -1, yylstack[yysp]);
    break;

case 786:
    /*! Production::    func_expr_common_subexpr : CURRENT_USER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_USER, -1, yylstack[yysp]);
    break;

case 787:
    /*! Production::    func_expr_common_subexpr : SESSION_USER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_SESSION_USER, -1, yylstack[yysp]);
    break;

case 788:
    /*! Production::    func_expr_common_subexpr : USER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_USER, -1, yylstack[yysp]);
    break;

case 789:
    /*! Production::    func_expr_common_subexpr : CURRENT_CATALOG */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_CATALOG, -1, yylstack[yysp]);
    break;

case 790:
    /*! Production::    func_expr_common_subexpr : CURRENT_SCHEMA */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSQLValueFunction(_.SQLValueFunctionOp.SVFOP_CURRENT_SCHEMA, -1, yylstack[yysp]);
    break;

case 791:
    /*! Production::    func_expr_common_subexpr : CAST "(" a_expr AS Typename ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeTypeCast(yyvstack[yysp - 3], yyvstack[yysp - 1], yylstack[yysp - 5]);
    break;

case 792:
    /*! Production::    func_expr_common_subexpr : EXTRACT "(" extract_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(_.SystemFuncName("date_part"), yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 793:
    /*! Production::    func_expr_common_subexpr : OVERLAY "(" overlay_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* overlay(A PLACING B FROM C FOR D) is converted to
     * overlay(A, B, C, D)
     * overlay(A PLACING B FROM C) is converted to
     * overlay(A, B, C)
     */
    this.$ = _.makeFuncCall(_.SystemFuncName("overlay"), yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 794:
    /*! Production::    func_expr_common_subexpr : POSITION "(" position_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* position(A in B) is converted to position(B, A) */
    this.$ = _.makeFuncCall(_.SystemFuncName("position"), yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 795:
    /*! Production::    func_expr_common_subexpr : SUBSTRING "(" substr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* substring(A from B for C) is converted to
     * substring(A, B, C) - thomas 2000-11-28
     */
    this.$ = _.makeFuncCall(_.SystemFuncName("substring"), yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 796:
    /*! Production::    func_expr_common_subexpr : TREAT "(" a_expr AS Typename ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* TREAT(expr AS target) converts expr of a particular type to target,
     * which is defined to be a subtype of the original expression.
     * In SQL99, this is intended for use with structured UDTs,
     * but let's make this a generally useful form allowing stronger
     * coercions than are handled by implicit casting.
     *
     * Convert SystemTypeName() to SystemFuncName() even though
     * at the moment they result in the same thing.
     */
    this.$ = _.makeFuncCall(_.SystemFuncName(yyvstack[yysp - 1].names[yyvstack[yysp - 1].names.length - 1].val.str),
                                [yyvstack[yysp - 3]],
                                yylstack[yysp - 5]);
    break;

case 797:
    /*! Production::    func_expr_common_subexpr : TRIM "(" BOTH trim_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* various trim expressions are defined in SQL
     * - thomas 1997-07-19
     */
    this.$ = _.makeFuncCall(_.SystemFuncName("btrim"), yyvstack[yysp - 1], yylstack[yysp - 4]);
    break;

case 798:
    /*! Production::    func_expr_common_subexpr : TRIM "(" LEADING trim_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(_.SystemFuncName("ltrim"), yyvstack[yysp - 1], yylstack[yysp - 4]);
    break;

case 799:
    /*! Production::    func_expr_common_subexpr : TRIM "(" TRAILING trim_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(_.SystemFuncName("rtrim"), yyvstack[yysp - 1], yylstack[yysp - 4]);
    break;

case 800:
    /*! Production::    func_expr_common_subexpr : TRIM "(" trim_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(_.SystemFuncName("btrim"), yyvstack[yysp - 1], yylstack[yysp - 3]);
    break;

case 801:
    /*! Production::    func_expr_common_subexpr : NULLIF "(" a_expr "," a_expr ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_NULLIF, "=", yyvstack[yysp - 3], yyvstack[yysp - 1], yylstack[yysp - 5]);
    break;

case 802:
    /*! Production::    func_expr_common_subexpr : COALESCE "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_CoalesceExpr,
        args: yyvstack[yysp - 1],
        location: yylstack[yysp - 3]
    };
    break;

case 803:
    /*! Production::    func_expr_common_subexpr : GREATEST "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_MinMaxExpr,
        args: yyvstack[yysp - 1],
        op: _.MinMaxOp.IS_GREATEST,
        location: yylstack[yysp - 3],
    }
    break;

case 804:
    /*! Production::    func_expr_common_subexpr : LEAST "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.MinMaxExpr,
        args: yyvstack[yysp - 1],
        op: _.MinMaxOp.IS_LEAST,
        location: yylstack[yysp - 3]
    };
    break;

case 805:
    /*! Production::    Numeric : INT_P */
case 806:
    /*! Production::    Numeric : INTEGER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("int4");
    this.$.location = yylstack[yysp];
    break;

case 807:
    /*! Production::    Numeric : SMALLINT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("int2");
    this.$.location = yylstack[yysp];
    break;

case 808:
    /*! Production::    Numeric : BIGINT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("int8");
    this.$.location = yylstack[yysp];
    break;

case 809:
    /*! Production::    Numeric : REAL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("float4");
    this.$.location = yylstack[yysp];
    break;

case 810:
    /*! Production::    Numeric : FLOAT_P opt_float */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    this.$.location = yylstack[yysp - 1];
    break;

case 811:
    /*! Production::    Numeric : DOUBLE_P PRECISION */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("float8");
    this.$.location = yylstack[yysp - 1];
    break;

case 812:
    /*! Production::    Numeric : DECIMAL_P opt_type_modifiers */
case 813:
    /*! Production::    Numeric : DEC opt_type_modifiers */
case 814:
    /*! Production::    Numeric : NUMERIC opt_type_modifiers */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("numeric");
    this.$.typmods = yyvstack[yysp];
    this.$.location = yylstack[yysp - 1];
    break;

case 815:
    /*! Production::    Numeric : BOOLEAN_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("bool");
    this.$.location = yylstack[yysp];
    break;

case 816:
    /*! Production::    opt_float : "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    /*
     * Check FLOAT() precision limits assuming IEEE floating
     * types - thomas 1997-09-18
     */
    if (yyvstack[yysp - 1] < 1)
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                 errmsg("precision for type float must be at least 1 bit"),
                 parser_errposition(yylstack[yysp - 1])));
    else if (yyvstack[yysp - 1] <= 24)
        this.$ = _.SystemTypeName("float4");
    else if (yyvstack[yysp - 1] <= 53)
        this.$ = _.SystemTypeName("float8");
    else
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                 errmsg("precision for type float must be less than 54 bits"),
                 parser_errposition(yylstack[yysp - 1])));
    break;

case 817:
    /*! Production::    opt_float : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("float8");
    break;

case 821:
    /*! Production::    ConstBit : BitWithoutLength */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    this.$.typmods = null;
    break;

case 822:
    /*! Production::    BitWithLength : BIT opt_varying "(" expr_list ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var typname = yyvstack[yysp - 3] ? "varbit" : "bit";
    
    this.$ = _.SystemTypeName(typname);
    this.$.typmods = yyvstack[yysp - 1];
    this.$.location = yylstack[yysp - 4];
    break;

case 823:
    /*! Production::    BitWithoutLength : BIT opt_varying */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* bit defaults to bit(1), varbit to no limit */
    if (yyvstack[yysp])
    {
        this.$ = _.SystemTypeName("varbit");
    }
    else
    {
        this.$ = _.SystemTypeName("bit");
        this.$.typmods = [_.makeIntConst(1, -1)];
    }
    this.$.location = yylstack[yysp - 1];
    break;

case 827:
    /*! Production::    ConstCharacter : CharacterWithoutLength */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* Length was not specified so allow to be unrestricted.
     * This handles problems with fixed-length (bpchar) strings
     * which in column definitions must default to a length
     * of one, but should not be constrained if the length
     * was not specified.
     */
    this.$ = yyvstack[yysp];
    this.$.typmods = null;
    break;

case 828:
    /*! Production::    CharacterWithLength : character "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName(yyvstack[yysp - 3]);
    this.$.typmods = [_.makeIntConst(yyvstack[yysp - 1], yylstack[yysp - 1])];
    this.$.location = yylstack[yysp - 3];
    break;

case 829:
    /*! Production::    CharacterWithoutLength : character */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName(yyvstack[yysp]);
    /* char defaults to char(1), varchar to no limit */
    if (strcmp(yyvstack[yysp], "bpchar") == 0)
        this.$.typmods = [_.makeIntConst(1, -1)];
    this.$.location = yylstack[yysp];
    break;

case 830:
    /*! Production::    character : CHARACTER opt_varying */
case 831:
    /*! Production::    character : CHAR_P opt_varying */
case 835:
    /*! Production::    character : NCHAR opt_varying */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp] ? "varchar": "bpchar";
    break;

case 832:
    /*! Production::    character : VARCHAR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = "varchar";
    break;

case 833:
    /*! Production::    character : NATIONAL CHARACTER opt_varying */
case 834:
    /*! Production::    character : NATIONAL CHAR_P opt_varying */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp] ? "varchar": "bpchar";
    break;

case 836:
    /*! Production::    opt_varying : VARYING */
case 958:
    /*! Production::    all_or_distinct : ALL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = true;
    break;

case 838:
    /*! Production::    ConstDatetime : TIMESTAMP "(" Iconst ")" opt_timezone */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp])
        this.$ = _.SystemTypeName("timestamptz");
    else
        this.$ = _.SystemTypeName("timestamp");
    this.$.typmods = [_.makeIntConst(yyvstack[yysp - 2], yylstack[yysp - 2])];
    this.$.location = yylstack[yysp - 4];
    break;

case 839:
    /*! Production::    ConstDatetime : TIMESTAMP opt_timezone */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp])
        this.$ = _.SystemTypeName("timestamptz");
    else
        this.$ = _.SystemTypeName("timestamp");
    this.$.location = yylstack[yysp - 1];
    break;

case 840:
    /*! Production::    ConstDatetime : TIME "(" Iconst ")" opt_timezone */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp])
        this.$ = _.SystemTypeName("timetz");
    else
        this.$ = _.SystemTypeName("time");
    this.$.typmods = [_.makeIntConst(yyvstack[yysp - 2], yylstack[yysp - 2])];
    this.$.location = yylstack[yysp - 4];
    break;

case 841:
    /*! Production::    ConstDatetime : TIME opt_timezone */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp])
        this.$ = _.SystemTypeName("timetz");
    else
        this.$ = _.SystemTypeName("time");
    this.$.location = yylstack[yysp - 1];
    break;

case 842:
    /*! Production::    ConstInterval : INTERVAL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SystemTypeName("interval");
    this.$.location = yylstack[yysp];
    break;

case 843:
    /*! Production::    opt_timezone : WITH_LA TIME ZONE */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = true;
    break;

case 844:
    /*! Production::    opt_timezone : WITHOUT TIME ZONE */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = false;
    break;

case 846:
    /*! Production::    opt_interval : YEAR_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.YEAR), yylstack[yysp])];
    break;

case 847:
    /*! Production::    opt_interval : MONTH_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.MONTH), yylstack[yysp])];
    break;

case 848:
    /*! Production::    opt_interval : DAY_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.DAY), yylstack[yysp])];
    break;

case 849:
    /*! Production::    opt_interval : HOUR_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.HOUR), yylstack[yysp])];
    break;

case 850:
    /*! Production::    opt_interval : MINUTE_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.MINUTE), yylstack[yysp])];
    break;

case 852:
    /*! Production::    opt_interval : YEAR_P TO MONTH_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.YEAR) |
    _.INTERVAL_MASK(_.MONTH), yylstack[yysp - 2])];
    break;

case 853:
    /*! Production::    opt_interval : DAY_P TO HOUR_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.DAY) |
    _.INTERVAL_MASK(_.HOUR), yylstack[yysp - 2])];
    break;

case 854:
    /*! Production::    opt_interval : DAY_P TO MINUTE_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.DAY) |
    _.INTERVAL_MASK(_.HOUR) |
    _.INTERVAL_MASK(_.MINUTE), yylstack[yysp - 2])];
    break;

case 855:
    /*! Production::    opt_interval : DAY_P TO interval_second */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    linitial(this.$) = _.makeIntConst(_.INTERVAL_MASK(_.DAY) |
                                _.INTERVAL_MASK(_.HOUR) |
                                _.INTERVAL_MASK(_.MINUTE) |
                                _.INTERVAL_MASK(_.SECOND), yylstack[yysp - 2]);
    break;

case 856:
    /*! Production::    opt_interval : HOUR_P TO MINUTE_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.HOUR) |
    _.INTERVAL_MASK(_.MINUTE), yylstack[yysp - 2])];
    break;

case 857:
    /*! Production::    opt_interval : HOUR_P TO interval_second */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    linitial(this.$) = _.makeIntConst(_.INTERVAL_MASK(_.HOUR) |
                                _.INTERVAL_MASK(_.MINUTE) |
                                _.INTERVAL_MASK(_.SECOND), yylstack[yysp - 2]);
    break;

case 858:
    /*! Production::    opt_interval : MINUTE_P TO interval_second */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp];
    linitial(this.$) = _.makeIntConst(_.INTERVAL_MASK(_.MINUTE) |
                                _.INTERVAL_MASK(_.SECOND), yylstack[yysp - 2]);
    break;

case 860:
    /*! Production::    interval_second : SECOND_P */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.SECOND), yylstack[yysp])];
    break;

case 861:
    /*! Production::    interval_second : SECOND_P "(" Iconst ")" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [_.makeIntConst(_.INTERVAL_MASK(_.SECOND), yylstack[yysp - 3]),
    _.makeIntConst(yyvstack[yysp - 1], yylstack[yysp - 1])];
    break;

case 864:
    /*! Production::    a_expr : a_expr COLLATE any_name */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_CollateClause,
        arg: yyvstack[yysp - 2],
        collname: yyvstack[yysp],
        location: yylstack[yysp - 1]
    };
    break;

case 865:
    /*! Production::    a_expr : a_expr AT TIME ZONE a_expr */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeFuncCall(_.SystemFuncName("timezone"),
    [yyvstack[yysp], yyvstack[yysp - 4]],
    yylstack[yysp - 3]);
    break;

case 866:
    /*! Production::    a_expr : "+" a_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_OP, "+", null, yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 867:
    /*! Production::    a_expr : "-" a_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.doNegate(yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 881:
    /*! Production::    a_expr : qual_Op a_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP, yyvstack[yysp - 1], null, yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 882:
    /*! Production::    a_expr : a_expr qual_Op */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP, yyvstack[yysp], yyvstack[yysp - 1], null, yylstack[yysp]);
    break;

case 883:
    /*! Production::    a_expr : a_expr AND a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeAndExpr(yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 884:
    /*! Production::    a_expr : a_expr OR a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeOrExpr(yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 885:
    /*! Production::    a_expr : NOT a_expr */
case 886:
    /*! Production::    a_expr : NOT_LA a_expr */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeNotExpr(yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 887:
    /*! Production::    a_expr : a_expr LIKE a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_LIKE, "~~",
    yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 888:
    /*! Production::    a_expr : a_expr LIKE a_expr ESCAPE a_expr */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("like_escape"),
                               [yyvstack[yysp - 2], yyvstack[yysp]],
                               yylstack[yysp - 3]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_LIKE, "~~",
                                   yyvstack[yysp - 4], n, yylstack[yysp - 3]);
    break;

case 889:
    /*! Production::    a_expr : a_expr NOT_LA LIKE a_expr */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_LIKE, "!~~",
    yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2]);
    break;

case 890:
    /*! Production::    a_expr : a_expr NOT_LA LIKE a_expr ESCAPE a_expr */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("like_escape"),
                               [yyvstack[yysp - 2], yyvstack[yysp]],
                               yylstack[yysp - 4]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_LIKE, "!~~",
                                   yyvstack[yysp - 5], n, yylstack[yysp - 4]);
    break;

case 891:
    /*! Production::    a_expr : a_expr ILIKE a_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_ILIKE, "~~*",
    yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    break;

case 892:
    /*! Production::    a_expr : a_expr ILIKE a_expr ESCAPE a_expr */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("like_escape"),
                               [yyvstack[yysp - 2], yyvstack[yysp]],
                               yylstack[yysp - 3]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_ILIKE, "~~*",
                                   yyvstack[yysp - 4], n, yylstack[yysp - 3]);
    break;

case 893:
    /*! Production::    a_expr : a_expr NOT_LA ILIKE a_expr */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_ILIKE, "!~~*",
    yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2]);
    break;

case 894:
    /*! Production::    a_expr : a_expr NOT_LA ILIKE a_expr ESCAPE a_expr */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("like_escape"),
                               [yyvstack[yysp - 2], yyvstack[yysp]],
                               yylstack[yysp - 4]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_ILIKE, "!~~*",
                                   yyvstack[yysp - 5], n, yylstack[yysp - 4]);
    break;

case 895:
    /*! Production::    a_expr : a_expr SIMILAR TO a_expr */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("similar_to_escape"),
                               [yyvstack[yysp]],
                               yylstack[yysp - 2]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_SIMILAR, "~",
                                   yyvstack[yysp - 3], n, yylstack[yysp - 2]);
    break;

case 896:
    /*! Production::    a_expr : a_expr SIMILAR TO a_expr ESCAPE a_expr */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("similar_to_escape"),
                               [yyvstack[yysp - 2], yyvstack[yysp]],
                               yylstack[yysp - 4]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_SIMILAR, "~",
                                   yyvstack[yysp - 5], n, yylstack[yysp - 4]);
    break;

case 897:
    /*! Production::    a_expr : a_expr NOT_LA SIMILAR TO a_expr */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("similar_to_escape"),
                               [yyvstack[yysp]],
                               yylstack[yysp - 3]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_SIMILAR, "!~",
                                   yyvstack[yysp - 4], n, yylstack[yysp - 3]);
    break;

case 898:
    /*! Production::    a_expr : a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    var n = _.makeFuncCall(_.SystemFuncName("similar_to_escape"),
                               [yyvstack[yysp - 2], yyvstack[yysp]],
                               yylstack[yysp - 5]);
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_SIMILAR, "!~",
                                   yyvstack[yysp - 6], n, yylstack[yysp - 5]);
    break;

case 899:
    /*! Production::    a_expr : a_expr IS NULL_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_NullTest,
        arg: yyvstack[yysp - 2],
        nulltesttype: _.NullTestType.IS_NULL,
        location: yylstack[yysp - 1],
    }
    break;

case 900:
    /*! Production::    a_expr : a_expr ISNULL */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_NullTest,
        arg: yyvstack[yysp - 1],
        nulltesttype: _.NullTestType.IS_NULL,
        location: yylstack[yysp],
    }
    break;

case 901:
    /*! Production::    a_expr : a_expr IS NOT NULL_P */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_NullTest,
        arg: yyvstack[yysp - 3],
        nulltesttype: _.NullTestType.IS_NOT_NULL,
        location: yylstack[yysp - 2],
    }
    break;

case 902:
    /*! Production::    a_expr : a_expr NOTNULL */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_NullTest,
        arg: yyvstack[yysp - 1],
        nulltesttype: _.NullTestType.IS_NOT_NULL,
        location: yylstack[yysp],
    }
    break;

case 903:
    /*! Production::    a_expr : row OVERLAPS row */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp - 2].length != 2)
        ereport(ERROR,
                (errcode(ERRCODE_SYNTAX_ERROR),
                 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
                 parser_errposition(yylstack[yysp - 2])));
    if (yyvstack[yysp].length != 2)
        ereport(ERROR,
                (errcode(ERRCODE_SYNTAX_ERROR),
                 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
                 parser_errposition(yylstack[yysp])));
    this.$ = _.makeFuncCall(_.SystemFuncName("overlaps"),
                               list_concat(yyvstack[yysp - 2], yyvstack[yysp]),
                               yylstack[yysp - 1]);
    break;

case 904:
    /*! Production::    a_expr : a_expr IS TRUE_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_BooleanTest,
        arg: yyvstack[yysp - 2],
        booltesttype: _.BoolTestType.IS_TRUE,
        location: yylstack[yysp - 1],
    }
    break;

case 905:
    /*! Production::    a_expr : a_expr IS NOT TRUE_P */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_BooleanTest,
        arg: yyvstack[yysp - 3],
        booltesttype: _.BoolTestType.IS_NOT_TRUE,
        location: yylstack[yysp - 2],
    }
    break;

case 906:
    /*! Production::    a_expr : a_expr IS FALSE_P */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_BooleanTest,
        arg: yyvstack[yysp - 2],
        booltesttype: _.BoolTestType.IS_FALSE,
        location: yylstack[yysp - 1],
    }
    break;

case 907:
    /*! Production::    a_expr : a_expr IS NOT FALSE_P */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_BooleanTest,
        arg: yyvstack[yysp - 3],
        booltesttype: _.BoolTestType.IS_NOT_FALSE,
        location: yylstack[yysp - 2],
    }
    break;

case 908:
    /*! Production::    a_expr : a_expr IS UNKNOWN */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_BooleanTest,
        arg: yyvstack[yysp - 2],
        booltesttype: _.BoolTestType.IS_UNKNOWN,
        location: yylstack[yysp - 1],
    }
    break;

case 909:
    /*! Production::    a_expr : a_expr IS NOT UNKNOWN */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_BooleanTest,
        arg: yyvstack[yysp - 3],
        booltesttype: _.BoolTestType.IS_NOT_UNKNOWN,
        location: yylstack[yysp - 2],
    }
    break;

case 914:
    /*! Production::    a_expr : a_expr BETWEEN opt_asymmetric b_expr AND a_expr */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_BETWEEN,
    "BETWEEN",
    yyvstack[yysp - 5],
    [yyvstack[yysp - 2], yyvstack[yysp]],
    yylstack[yysp - 4]);
    break;

case 915:
    /*! Production::    a_expr : a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_NOT_BETWEEN,
    "NOT BETWEEN",
    yyvstack[yysp - 6],
    [yyvstack[yysp - 2], yyvstack[yysp]],
    yylstack[yysp - 5]);
    break;

case 916:
    /*! Production::    a_expr : a_expr BETWEEN SYMMETRIC b_expr AND a_expr */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_BETWEEN_SYM,
    "BETWEEN SYMMETRIC",
    yyvstack[yysp - 5],
    [yyvstack[yysp - 2], yyvstack[yysp]],
    yylstack[yysp - 4]);
    break;

case 917:
    /*! Production::    a_expr : a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_NOT_BETWEEN_SYM,
    "NOT BETWEEN SYMMETRIC",
    yyvstack[yysp - 6],
    [yyvstack[yysp - 2], yyvstack[yysp]],
    yylstack[yysp - 5]);
    break;

case 918:
    /*! Production::    a_expr : a_expr IN_P in_expr */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* in_expr returns a SubLink or a list of a_exprs */
    if (_.IsA(yyvstack[yysp], 'SubLink'))
    {
        /* generate foo = ANY (subquery) */
        var n = yyvstack[yysp];
        n.subLinkType = _.SubLinkType.ANY_SUBLINK;
        n.subLinkId = 0;
        n.testexpr = yyvstack[yysp - 2];
        n.operName = NIL;		/* show it's IN not = ANY */
        n.location = yylstack[yysp - 1];
        this.$ = n;
    }
    else
    {
        /* generate scalar IN expression */
        this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_IN, "=", yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1]);
    }
    break;

case 919:
    /*! Production::    a_expr : a_expr NOT_LA IN_P in_expr */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* in_expr returns a SubLink or a list of a_exprs */
    if (_.IsA(yyvstack[yysp], 'SubLink'))
    {
        /* generate NOT (foo = ANY (subquery)) */
        /* Make an = ANY node */
        var n = yyvstack[yysp];
        n.subLinkType = _.SubLinkType.ANY_SUBLINK;
        n.subLinkId = 0;
        n.testexpr = yyvstack[yysp - 3];
        n.operName = NIL;		/* show it's IN not = ANY */
        n.location = yylstack[yysp - 2];
        /* Stick a NOT on top; must have same parse location */
        this.$ = _.makeNotExpr(n, yylstack[yysp - 2]);
    }
    else
    {
        /* generate scalar NOT IN expression */
        this.$ = _.makeSimpleA_Expr(_.A_Expr_Kind.AEXPR_IN, "<>", yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2]);
    }
    break;

case 920:
    /*! Production::    a_expr : a_expr subquery_Op sub_type select_with_parens */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SubLink,
        subLinkType: yyvstack[yysp - 1],
        subLinkId: 0,
        testexpr: yyvstack[yysp - 3],
        operName: yyvstack[yysp - 2],
        subselect: yyvstack[yysp],
        location: yylstack[yysp - 2]
    };
    break;

case 921:
    /*! Production::    a_expr : a_expr subquery_Op sub_type "(" a_expr ")" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    if (yyvstack[yysp - 3] == _.SubLinkType.ANY_SUBLINK)
        this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP_ANY, yyvstack[yysp - 4], yyvstack[yysp - 5], yyvstack[yysp - 1], yylstack[yysp - 4]);
    else
        this.$ = _.makeA_Expr(_.A_Expr_Kind.AEXPR_OP_ALL, yyvstack[yysp - 4], yyvstack[yysp - 5], yyvstack[yysp - 1], yylstack[yysp - 4]);
    break;

case 922:
    /*! Production::    a_expr : UNIQUE select_with_parens */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 1];
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,LT,LA,-,-)
    
    
    /* Not sure how to get rid of the parentheses
     * but there are lots of shift/reduce errors without them.
     *
     * Should be able to implement this by plopping the entire
     * select into a node, then transforming the target expressions
     * from whatever they are into count(*), and testing the
     * entire result equal to one.
     * But, will probably implement a separate node in the executor.
     */
    ereport(ERROR,
            (errcode(_.ERRCODE_FEATURE_NOT_SUPPORTED),
             errmsg("UNIQUE predicate is not yet implemented"),
             parser_errposition(yylstack[yysp - 1])));
    break;

case 925:
    /*! Production::    a_expr : DEFAULT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    /*
     * The SQL spec only allows DEFAULT in "contextually typed
     * expressions", but for us, it's easier to allow it in
     * any a_expr and then throw error during parse analysis
     * if it's in an inappropriate context.  This way also
     * lets us say something smarter than "syntax error".
     */
    this.$ = {
        type: _.NodeTag.T_SetToDefault,
        /* parse analysis will fill in the rest */
        location: yylstack[yysp]
    }
    break;

case 929:
    /*! Production::    any_name : ColId attrs */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp].unshift(_.makeString(yyvstack[yysp - 1])); this.$ = yyvstack[yysp];
    break;

case 930:
    /*! Production::    attrs : "." attr_name */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [makeString(yyvstack[yysp])];
    break;

case 931:
    /*! Production::    attrs : attrs "." attr_name */
case 949:
    /*! Production::    name_list : name_list "," name */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].push(_.makeString(yyvstack[yysp])); this.$ = yyvstack[yysp - 2];
    break;

case 938:
    /*! Production::    target_el : a_expr AS ColLabel */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ResTarget,
        name: yyvstack[yysp],
        indirection: null,
        val: yyvstack[yysp - 2],
        location: yylstack[yysp - 2]
    }
    break;

case 939:
    /*! Production::    target_el : a_expr IDENT */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ResTarget,
        name: yyvstack[yysp],
        indirection: null,
        val: yyvstack[yysp - 1],
        location: yylstack[yysp - 1]
    }
    break;

case 940:
    /*! Production::    target_el : a_expr */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ResTarget,
        name: null,
        indirection: null,
        val: yyvstack[yysp],
        location: yylstack[yysp]
    }
    break;

case 941:
    /*! Production::    target_el : "*" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_ResTarget,
        name: null,
        indirection: null,
        val: {
            type: _.NodeTag.T_ColumnRef,
            fields: [{ type: _.NodeTag.T_A_Star }],
            location: yylstack[yysp]
        },
        location: yylstack[yysp]
    }
    break;

case 944:
    /*! Production::    qualified_name : ColId */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeRangeVar(null, yyvstack[yysp], yylstack[yysp]);
    break;

case 945:
    /*! Production::    qualified_name : ColId indirection */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    // check_qualified_name($2, yyscanner);
    this.$ = _.makeRangeVar(null, null, yylstack[yysp - 1]);
    switch (yyvstack[yysp].length)
    {
        case 1:
            this.$.catalogname = null;
            this.$.schemaname = yyvstack[yysp - 1];
            this.$.relname = yyvstack[yysp][0].str;
            break;
        case 2:
            this.$.catalogname = yyvstack[yysp - 1];
            this.$.schemaname = yyvstack[yysp][0].str;
            this.$.relname = yyvstack[yysp][1].str
            break;
        default:
            yyvstack[yysp].unshift(_.makeString(yyvstack[yysp - 1]));
            /* ereport(ERROR,
                    (errcode(ERRCODE_SYNTAX_ERROR),
                     errmsg("improper qualified name (too many dotted names): %s",
                            NameListToString($2))),
                     parser_errposition(@1))); */
            throw new Error(`improper qualified name (too many dotted names): ${yyvstack[yysp - 1]}, ${yyvstack[yysp]}`)
            break;
    }
    break;

case 959:
    /*! Production::    all_or_distinct : DISTINCT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = false;
    break;

case 961:
    /*! Production::    distinct_clause : DISTINCT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [];
    break;

case 969:
    /*! Production::    sortby_list : sortby_list "," sortby */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    yyvstack[yysp - 2].push(yyvstack[yysp]); this.$ = yyvstack[yysp - 2];
    break;

case 970:
    /*! Production::    sortby : a_expr USING qual_all_Op opt_nulls_order */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SortBy,
        node: yyvstack[yysp - 3],
        sortby_dir: _.SortByDir.SORTBY_USING,
        sortby_nulls: yyvstack[yysp],
        useOp: yyvstack[yysp - 1],
        location: yylstack[yysp - 1],
    };
    break;

case 971:
    /*! Production::    sortby : a_expr opt_asc_desc opt_nulls_order */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = {
        type: _.NodeTag.T_SortBy,
        node: yyvstack[yysp - 2],
        sortby_dir: yyvstack[yysp - 1],
        sortby_nulls: yyvstack[yysp],
        useOp: NIL,
        location: -1		/* no operator */
    };
    break;

case 972:
    /*! Production::    select_limit : limit_clause offset_clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp], yyvstack[yysp - 1]];
    break;

case 974:
    /*! Production::    select_limit : limit_clause */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [NULL, yyvstack[yysp]];
    break;

case 975:
    /*! Production::    select_limit : offset_clause */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp], NULL];
    break;

case 977:
    /*! Production::    opt_select_limit : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [NULL,NULL];
    break;

case 979:
    /*! Production::    limit_clause : LIMIT select_limit_value "," select_offset_value */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 3];
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,LT,LA,-,-)
    
    
    /* Disabled because it was too confusing, bjm 2002-02-18 */
    ereport(ERROR,
            (errcode(ERRCODE_SYNTAX_ERROR),
             errmsg("LIMIT #,# syntax is not supported"),
             errhint("Use separate LIMIT and OFFSET clauses."),
             parser_errposition(yylstack[yysp - 3])));
    break;

case 980:
    /*! Production::    limit_clause : FETCH first_or_next select_fetch_first_value row_or_rows ONLY */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2];
    break;

case 981:
    /*! Production::    limit_clause : FETCH first_or_next row_or_rows ONLY */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.makeIntConst(1, -1);
    break;

case 985:
    /*! Production::    select_limit_value : ALL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    /* LIMIT ALL is represented as a NULL constant */
    this.$ = _.makeNullAConst(yylstack[yysp]);
    break;

case 987:
    /*! Production::    opt_asc_desc : ASC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SortByDir.SORTBY_ASC;
    break;

case 988:
    /*! Production::    opt_asc_desc : DESC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SortByDir.SORTBY_DESC;
    break;

case 989:
    /*! Production::    opt_asc_desc : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SortByDir.SORTBY_DEFAULT;
    break;

case 990:
    /*! Production::    opt_nulls_order : NULLS_LA FIRST_P */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SortByNulls.SORTBY_NULLS_FIRST;
    break;

case 991:
    /*! Production::    opt_nulls_order : NULLS_LA LAST_P */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SortByNulls.SORTBY_NULLS_LAST;
    break;

case 992:
    /*! Production::    opt_nulls_order : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = _.SortByNulls.SORTBY_NULLS_DEFAULT;
    break;

default:
                // default action for all unlisted resolve states: 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 444, 446, 447, 448, 449, 450, 451, 452, 453, 518, 519, 576, 577, 650, 651, 652, 926, 927, 932, 933, 951, 952, 954, 955, 956, 957

                // When we hit this entry, it's always a non-recoverable issue as this is a severe internal parser state failure:
                function __b0rk_on_internal_failure(str) {
                    var hash = yyparser.constructParseErrorInfo(str, null, null, false);

                    return yyparser.parseError(str, hash, yyparser.JisonParserError);
                }

                return __b0rk_on_internal_failure("internal parser failure: resolving unlisted state: " + yystate);
}
},
table: bt({
  len: u([
  23,
  1,
  2,
  s,
  [0, 5],
  13,
  2,
  13,
  10,
  10,
  12,
  404,
  14,
  s,
  [350, 3],
  1,
  0,
  21,
  351,
  1,
  9,
  11,
  s,
  [7, 3],
  1,
  15,
  0,
  0,
  1,
  9,
  8,
  431,
  411,
  0,
  382,
  1,
  0,
  373,
  349,
  383,
  s,
  [0, 346],
  7,
  352,
  0,
  3,
  0,
  7,
  409,
  0,
  1,
  348,
  349,
  12,
  11,
  11,
  5,
  8,
  9,
  0,
  410,
  1,
  410,
  13,
  8,
  0,
  0,
  8,
  8,
  410,
  9,
  11,
  0,
  0,
  20,
  20,
  0,
  54,
  0,
  0,
  s,
  [408, 5],
  c,
  [433, 5],
  1,
  417,
  0,
  0,
  79,
  79,
  4,
  0,
  0,
  78,
  c,
  [7, 3],
  s,
  [0, 5],
  3,
  2,
  3,
  s,
  [0, 3],
  410,
  79,
  0,
  414,
  414,
  s,
  [0, 7],
  79,
  1,
  0,
  s,
  [411, 4],
  s,
  [0, 6],
  1,
  s,
  [413, 10],
  82,
  78,
  81,
  78,
  81,
  81,
  s,
  [80, 3],
  78,
  78,
  79,
  81,
  c,
  [5, 3],
  82,
  82,
  c,
  [66, 6],
  80,
  21,
  1,
  409,
  0,
  0,
  348,
  382,
  0,
  351,
  410,
  349,
  7,
  1,
  349,
  2,
  39,
  351,
  0,
  347,
  16,
  9,
  s,
  [0, 5],
  4,
  1,
  0,
  1,
  0,
  1,
  c,
  [142, 3],
  40,
  0,
  2,
  0,
  1,
  41,
  12,
  349,
  13,
  0,
  13,
  13,
  0,
  50,
  12,
  11,
  19,
  1,
  410,
  349,
  0,
  330,
  348,
  1,
  s,
  [409, 12],
  469,
  408,
  408,
  409,
  5,
  409,
  1,
  c,
  [189, 3],
  378,
  3,
  1,
  442,
  c,
  [54, 3],
  s,
  [79, 5],
  1,
  0,
  78,
  33,
  42,
  383,
  78,
  s,
  [0, 3],
  413,
  409,
  1,
  80,
  0,
  416,
  0,
  83,
  2,
  3,
  33,
  78,
  1,
  1,
  s,
  [2, 4],
  408,
  12,
  409,
  405,
  411,
  408,
  414,
  408,
  s,
  [409, 3],
  0,
  80,
  s,
  [0, 4],
  c,
  [136, 3],
  2,
  82,
  82,
  c,
  [5, 3],
  0,
  c,
  [33, 3],
  0,
  2,
  19,
  409,
  2,
  c,
  [71, 3],
  s,
  [0, 7],
  34,
  1,
  0,
  4,
  c,
  [259, 3],
  408,
  8,
  0,
  1,
  349,
  1,
  0,
  6,
  0,
  3,
  360,
  1,
  347,
  c,
  [156, 3],
  409,
  1,
  c,
  [35, 4],
  1,
  12,
  0,
  409,
  17,
  c,
  [694, 3],
  0,
  0,
  18,
  377,
  c,
  [260, 5],
  328,
  s,
  [0, 5],
  87,
  c,
  [76, 3],
  c,
  [226, 4],
  s,
  [80, 3],
  s,
  [0, 5],
  c,
  [92, 4],
  0,
  s,
  [81, 3],
  0,
  2,
  81,
  0,
  77,
  1,
  s,
  [79, 6],
  s,
  [73, 6],
  c,
  [9, 4],
  409,
  409,
  1,
  378,
  3,
  73,
  408,
  0,
  7,
  c,
  [81, 4],
  1,
  0,
  403,
  403,
  s,
  [0, 3],
  418,
  c,
  [130, 4],
  c,
  [173, 3],
  c,
  [148, 3],
  1,
  0,
  5,
  410,
  411,
  411,
  1,
  0,
  35,
  2,
  0,
  79,
  c,
  [220, 4],
  c,
  [361, 3],
  5,
  0,
  408,
  77,
  1,
  1,
  408,
  s,
  [1, 4],
  33,
  c,
  [136, 5],
  c,
  [372, 6],
  34,
  1,
  18,
  c,
  [62, 3],
  403,
  1,
  38,
  2,
  33,
  s,
  [411, 3],
  1,
  35,
  409,
  2,
  33,
  s,
  [2, 3],
  c,
  [205, 5],
  s,
  [1, 5],
  18,
  c,
  [459, 4],
  410,
  c,
  [346, 4],
  348,
  39,
  6,
  350,
  408,
  2,
  0,
  6,
  5,
  c,
  [62, 4],
  c,
  [246, 3],
  c,
  [63, 5],
  c,
  [397, 3],
  0,
  15,
  c,
  [12, 6],
  s,
  [0, 10],
  2,
  17,
  408,
  18,
  26,
  377,
  376,
  370,
  376,
  376,
  0,
  385,
  373,
  377,
  c,
  [229, 3],
  1,
  77,
  77,
  79,
  c,
  [51, 3],
  81,
  350,
  76,
  408,
  408,
  73,
  73,
  408,
  c,
  [174, 3],
  408,
  73,
  c,
  [63, 5],
  1,
  0,
  408,
  331,
  18,
  c,
  [99, 3],
  417,
  1,
  c,
  [374, 3],
  c,
  [106, 3],
  1,
  411,
  0,
  4,
  5,
  c,
  [170, 3],
  408,
  1,
  4,
  3,
  s,
  [2, 3],
  c,
  [31, 3],
  33,
  0,
  349,
  1,
  2,
  33,
  s,
  [0, 4],
  330,
  0,
  408,
  0,
  2,
  408,
  0,
  403,
  330,
  s,
  [403, 12],
  418,
  4,
  1,
  s,
  [20, 3],
  0,
  3,
  3,
  408,
  408,
  330,
  s,
  [1, 3],
  0,
  409,
  c,
  [34, 3],
  c,
  [74, 5],
  c,
  [318, 3],
  82,
  0,
  17,
  0,
  1,
  33,
  20,
  0,
  0,
  5,
  408,
  0,
  39,
  1,
  348,
  0,
  411,
  4,
  13,
  14,
  348,
  5,
  c,
  [182, 6],
  16,
  1,
  49,
  376,
  1,
  1,
  376,
  6,
  s,
  [3, 3],
  0,
  28,
  0,
  347,
  28,
  c,
  [200, 3],
  27,
  s,
  [376, 3],
  c,
  [686, 3],
  8,
  366,
  c,
  [438, 3],
  1,
  377,
  3,
  2,
  77,
  77,
  1,
  0,
  350,
  0,
  79,
  73,
  c,
  [179, 3],
  18,
  18,
  c,
  [6, 3],
  331,
  76,
  2,
  c,
  [153, 3],
  0,
  33,
  442,
  c,
  [272, 3],
  c,
  [34, 3],
  410,
  1,
  35,
  35,
  c,
  [325, 8],
  0,
  0,
  33,
  c,
  [119, 3],
  350,
  408,
  c,
  [295, 3],
  33,
  3,
  33,
  18,
  c,
  [779, 3],
  s,
  [20, 4],
  s,
  [14, 6],
  20,
  1,
  3,
  c,
  [287, 4],
  34,
  c,
  [532, 3],
  c,
  [153, 3],
  c,
  [202, 4],
  16,
  c,
  [304, 7],
  36,
  37,
  408,
  c,
  [694, 3],
  c,
  [334, 4],
  3,
  0,
  1,
  15,
  408,
  414,
  26,
  376,
  376,
  11,
  1,
  376,
  s,
  [0, 5],
  350,
  28,
  349,
  349,
  27,
  351,
  c,
  [726, 4],
  375,
  0,
  368,
  c,
  [609, 5],
  0,
  c,
  [312, 3],
  c,
  [138, 3],
  c,
  [132, 3],
  330,
  73,
  73,
  0,
  c,
  [168, 3],
  0,
  0,
  35,
  7,
  0,
  c,
  [79, 4],
  403,
  c,
  [66, 3],
  331,
  0,
  c,
  [390, 3],
  349,
  39,
  2,
  1,
  348,
  c,
  [78, 3],
  349,
  46,
  16,
  0,
  48,
  s,
  [0, 4],
  418,
  s,
  [48, 3],
  1,
  11,
  0,
  1,
  408,
  c,
  [235, 3],
  349,
  c,
  [536, 3],
  330,
  351,
  2,
  332,
  c,
  [284, 3],
  c,
  [61, 3],
  1,
  s,
  [73, 3],
  c,
  [6, 3],
  7,
  1,
  0,
  19,
  403,
  331,
  c,
  [941, 5],
  c,
  [132, 3],
  13,
  14,
  c,
  [899, 3],
  0,
  c,
  [602, 3],
  0,
  349,
  58,
  1,
  409,
  c,
  [22, 3],
  348,
  c,
  [120, 3],
  373,
  367,
  c,
  [174, 4],
  5,
  409,
  19,
  2,
  0,
  c,
  [144, 3],
  348,
  c,
  [746, 3],
  2,
  414,
  c,
  [611, 4],
  s,
  [0, 4],
  349,
  1,
  s,
  [410, 3],
  6,
  c,
  [644, 5],
  c,
  [87, 3],
  28,
  2,
  c,
  [68, 3],
  430,
  34,
  35,
  34,
  c,
  [339, 3],
  c,
  [276, 5],
  c,
  [914, 3],
  s,
  [0, 6],
  c,
  [280, 3],
  0,
  1,
  409,
  c,
  [453, 5]
]),
  symbol: u([
  1,
  3,
  4,
  138,
  292,
  350,
  364,
  365,
  369,
  370,
  479,
  480,
  481,
  s,
  [485, 6, 1],
  494,
  510,
  516,
  525,
  1,
  1,
  3,
  1,
  3,
  5,
  366,
  367,
  368,
  377,
  383,
  387,
  469,
  470,
  471,
  475,
  138,
  292,
  c,
  [15, 13],
  c,
  [10, 4],
  c,
  [8, 4],
  663,
  664,
  c,
  [62, 6],
  486,
  488,
  489,
  510,
  4,
  c,
  [70, 5],
  c,
  [66, 5],
  510,
  c,
  [86, 3],
  5,
  8,
  13,
  14,
  s,
  [20, 343, 1],
  c,
  [382, 3],
  372,
  373,
  375,
  376,
  377,
  381,
  382,
  383,
  387,
  388,
  401,
  402,
  405,
  407,
  408,
  s,
  [410, 9, 1],
  424,
  430,
  s,
  [437, 4, 1],
  s,
  [442, 13, 1],
  464,
  s,
  [468, 4, 1],
  475,
  661,
  662,
  c,
  [449, 3],
  6,
  c,
  [450, 10],
  c,
  [411, 343],
  378,
  407,
  482,
  483,
  544,
  584,
  650,
  c,
  [350, 343],
  c,
  [349, 3],
  491,
  492,
  584,
  653,
  c,
  [350, 350],
  4,
  c,
  [1555, 10],
  c,
  [1553, 11],
  c,
  [1072, 348],
  546,
  584,
  650,
  373,
  c,
  [1438, 3],
  c,
  [1434, 3],
  c,
  [1433, 3],
  377,
  c,
  [4, 3],
  504,
  506,
  507,
  508,
  667,
  669,
  670,
  c,
  [1874, 4],
  437,
  442,
  660,
  c,
  [7, 14],
  39,
  c,
  [1929, 13],
  663,
  664,
  5,
  c,
  [14, 5],
  c,
  [12, 4],
  c,
  [33, 4],
  c,
  [1929, 4],
  c,
  [1917, 379],
  c,
  [1916, 3],
  c,
  [1915, 18],
  482,
  483,
  486,
  575,
  578,
  584,
  585,
  s,
  [588, 4, 1],
  595,
  613,
  619,
  620,
  621,
  623,
  624,
  627,
  628,
  629,
  s,
  [631, 4, 1],
  636,
  637,
  641,
  646,
  647,
  648,
  4,
  c,
  [428, 346],
  372,
  381,
  382,
  c,
  [416, 31],
  c,
  [412, 28],
  c,
  [411, 352],
  383,
  c,
  [412, 31],
  c,
  [1673, 3],
  5,
  6,
  8,
  c,
  [1223, 346],
  371,
  c,
  [1222, 3],
  383,
  387,
  s,
  [391, 7, 1],
  s,
  [399, 4, 1],
  407,
  c,
  [1606, 5],
  c,
  [2398, 346],
  584,
  650,
  c,
  [1947, 4],
  6,
  8,
  9,
  11,
  c,
  [356, 343],
  s,
  [364, 8, 1],
  c,
  [1951, 4],
  c,
  [730, 18],
  579,
  581,
  4,
  6,
  c,
  [2777, 5],
  c,
  [739, 344],
  371,
  c,
  [3138, 8],
  371,
  651,
  c,
  [362, 8],
  c,
  [2267, 391],
  598,
  c,
  [2268, 16],
  248,
  c,
  [771, 347],
  584,
  c,
  [1858, 346],
  526,
  c,
  [1859, 4],
  5,
  c,
  [3880, 5],
  s,
  [667, 4, 1],
  c,
  [3893, 6],
  s,
  [504, 5, 1],
  c,
  [3904, 9],
  507,
  508,
  142,
  170,
  210,
  250,
  c,
  [5807, 4],
  c,
  [16, 3],
  475,
  c,
  [35, 7],
  470,
  471,
  669,
  c,
  [1163, 366],
  c,
  [5762, 15],
  c,
  [3431, 28],
  671,
  472,
  c,
  [1574, 380],
  473,
  c,
  [411, 28],
  672,
  c,
  [830, 3],
  173,
  176,
  253,
  c,
  [857, 6],
  509,
  c,
  [4704, 8],
  c,
  [8, 17],
  c,
  [4288, 407],
  665,
  666,
  c,
  [5205, 20],
  c,
  [5183, 6],
  c,
  [4802, 4],
  c,
  [4800, 5],
  c,
  [2841, 4],
  495,
  c,
  [6683, 7],
  c,
  [21, 13],
  c,
  [20, 4],
  7,
  c,
  [4352, 3],
  s,
  [15, 5, 1],
  33,
  180,
  313,
  c,
  [3633, 4],
  c,
  [33, 4],
  379,
  c,
  [34, 5],
  403,
  407,
  s,
  [418, 4, 1],
  423,
  424,
  425,
  435,
  436,
  s,
  [459, 5, 1],
  c,
  [50, 4],
  593,
  594,
  595,
  597,
  c,
  [524, 408],
  c,
  [408, 1632],
  465,
  4,
  486,
  582,
  c,
  [412, 346],
  c,
  [8076, 4],
  c,
  [416, 37],
  c,
  [9597, 5],
  c,
  [421, 25],
  c,
  [2515, 6],
  s,
  [9, 11, 1],
  33,
  96,
  109,
  117,
  180,
  197,
  209,
  234,
  c,
  [2525, 11],
  384,
  387,
  388,
  c,
  [5432, 8],
  c,
  [2534, 11],
  429,
  s,
  [431, 6, 1],
  c,
  [2539, 9],
  476,
  477,
  478,
  579,
  581,
  c,
  [5837, 5],
  c,
  [80, 73],
  486,
  4,
  9,
  486,
  601,
  c,
  [83, 78],
  c,
  [78, 52],
  s,
  [417, 5, 1],
  c,
  [79, 24],
  c,
  [319, 77],
  4,
  417,
  591,
  417,
  591,
  c,
  [5, 3],
  c,
  [1235, 363],
  432,
  c,
  [1236, 30],
  617,
  c,
  [816, 21],
  10,
  c,
  [495, 10],
  107,
  c,
  [496, 3],
  185,
  c,
  [497, 3],
  304,
  c,
  [498, 52],
  549,
  c,
  [655, 18],
  c,
  [7388, 347],
  c,
  [413, 17],
  s,
  [400, 4, 1],
  c,
  [990, 30],
  c,
  [414, 430],
  c,
  [1483, 61],
  377,
  c,
  [80, 7],
  c,
  [988, 9],
  c,
  [492, 346],
  370,
  c,
  [1974, 55],
  c,
  [411, 1226],
  c,
  [11601, 4],
  c,
  [2139, 384],
  c,
  [2552, 413],
  c,
  [413, 3348],
  c,
  [5855, 9],
  340,
  c,
  [5856, 24],
  404,
  405,
  c,
  [7341, 79],
  c,
  [6015, 53],
  298,
  c,
  [80, 53],
  635,
  c,
  [159, 161],
  c,
  [81, 105],
  c,
  [80, 53],
  577,
  c,
  [80, 159],
  625,
  c,
  [480, 80],
  c,
  [78, 102],
  317,
  318,
  c,
  [8294, 77],
  c,
  [556, 137],
  c,
  [396, 156],
  c,
  [236, 24],
  305,
  c,
  [80, 4],
  c,
  [5484, 23],
  c,
  [81, 27],
  638,
  c,
  [82, 108],
  c,
  [243, 62],
  c,
  [78, 41],
  c,
  [1514, 34],
  c,
  [11730, 17],
  4,
  c,
  [14202, 409],
  c,
  [15711, 730],
  c,
  [16811, 344],
  407,
  408,
  409,
  482,
  483,
  586,
  656,
  4,
  c,
  [1584, 3],
  c,
  [1491, 382],
  580,
  c,
  [11096, 23],
  c,
  [1491, 346],
  c,
  [16461, 4],
  c,
  [16458, 6],
  371,
  c,
  [1848, 347],
  652,
  653,
  5,
  6,
  c,
  [8765, 5],
  c,
  [2705, 8],
  117,
  180,
  c,
  [2702, 3],
  379,
  403,
  c,
  [14307, 15],
  c,
  [14304, 5],
  c,
  [391, 346],
  517,
  518,
  519,
  c,
  [16442, 347],
  584,
  4,
  186,
  c,
  [20691, 5],
  381,
  c,
  [20691, 6],
  510,
  527,
  c,
  [16, 7],
  371,
  381,
  142,
  170,
  250,
  292,
  378,
  142,
  250,
  c,
  [3399, 4],
  c,
  [16434, 4],
  c,
  [15096, 16],
  c,
  [15089, 4],
  c,
  [778, 15],
  c,
  [15082, 5],
  473,
  474,
  474,
  s,
  [1, 4, 2],
  c,
  [42, 30],
  c,
  [15126, 7],
  c,
  [15687, 4],
  c,
  [15686, 7],
  515,
  c,
  [483, 347],
  649,
  c,
  [16925, 4],
  c,
  [20764, 10],
  c,
  [13, 16],
  6,
  117,
  209,
  234,
  c,
  [389, 6],
  c,
  [484, 14],
  c,
  [1262, 5],
  c,
  [445, 4],
  399,
  c,
  [446, 18],
  c,
  [3936, 3],
  c,
  [449, 4],
  673,
  c,
  [17014, 26],
  c,
  [99, 3],
  c,
  [3962, 12],
  534,
  374,
  c,
  [20432, 409],
  648,
  c,
  [3232, 349],
  c,
  [349, 293],
  c,
  [348, 5],
  320,
  321,
  324,
  c,
  [342, 3],
  332,
  333,
  336,
  341,
  343,
  344,
  346,
  347,
  351,
  407,
  408,
  482,
  572,
  574,
  576,
  585,
  624,
  626,
  628,
  629,
  630,
  c,
  [681, 5],
  c,
  [1570, 347],
  643,
  346,
  c,
  [5400, 379],
  467,
  c,
  [15834, 408],
  c,
  [409, 4120],
  c,
  [16468, 362],
  371,
  c,
  [27219, 5],
  379,
  s,
  [381, 4, 1],
  c,
  [10746, 13],
  c,
  [446, 12],
  c,
  [10753, 7],
  s,
  [430, 7, 1],
  c,
  [458, 15],
  s,
  [459, 6, 1],
  c,
  [27247, 5],
  c,
  [6835, 3],
  c,
  [21618, 1223],
  c,
  [1694, 30],
  313,
  379,
  423,
  425,
  461,
  c,
  [414, 409],
  458,
  87,
  176,
  288,
  372,
  c,
  [59, 3],
  437,
  c,
  [418, 346],
  382,
  s,
  [405, 4, 1],
  c,
  [417, 9],
  c,
  [416, 16],
  466,
  583,
  4,
  486,
  612,
  467,
  c,
  [2499, 433],
  s,
  [467, 5, 1],
  c,
  [18998, 7],
  c,
  [21630, 15],
  c,
  [22125, 58],
  c,
  [9860, 7],
  c,
  [79, 313],
  464,
  c,
  [22523, 78],
  c,
  [10294, 13],
  c,
  [11111, 16],
  c,
  [112, 4],
  c,
  [109, 5],
  11,
  c,
  [25468, 13],
  377,
  c,
  [11151, 17],
  c,
  [28370, 6],
  c,
  [43, 13],
  c,
  [27605, 344],
  379,
  c,
  [473, 7],
  400,
  c,
  [25847, 16],
  c,
  [536, 78],
  4,
  9,
  c,
  [11650, 3],
  c,
  [14262, 390],
  601,
  602,
  c,
  [3488, 408],
  c,
  [14673, 17],
  422,
  c,
  [15264, 79],
  579,
  c,
  [32062, 348],
  c,
  [492, 16],
  426,
  c,
  [33968, 5],
  s,
  [441, 14, 1],
  c,
  [496, 9],
  s,
  [587, 5, 1],
  595,
  599,
  c,
  [24775, 22],
  c,
  [2013, 10],
  73,
  c,
  [494, 3],
  121,
  161,
  164,
  c,
  [497, 4],
  241,
  310,
  c,
  [1401, 52],
  639,
  640,
  416,
  590,
  432,
  614,
  615,
  c,
  [1942, 21],
  432,
  c,
  [1943, 11],
  c,
  [24080, 25],
  c,
  [117, 52],
  550,
  375,
  4,
  416,
  590,
  416,
  590,
  c,
  [4, 4],
  c,
  [4603, 408],
  5,
  73,
  c,
  [599, 3],
  241,
  310,
  407,
  417,
  591,
  603,
  604,
  c,
  [420, 392],
  605,
  c,
  [1944, 17],
  5,
  c,
  [4193, 347],
  c,
  [4192, 27],
  c,
  [405, 12],
  607,
  613,
  s,
  [618, 4, 1],
  c,
  [406, 11],
  c,
  [405, 347],
  c,
  [2350, 47],
  608,
  c,
  [6248, 773],
  388,
  c,
  [409, 29],
  455,
  456,
  457,
  c,
  [822, 15],
  611,
  c,
  [7478, 816],
  c,
  [3990, 17],
  c,
  [409, 818],
  c,
  [19992, 80],
  c,
  [489, 409],
  416,
  590,
  c,
  [491, 25],
  c,
  [21042, 26],
  c,
  [492, 30],
  c,
  [21044, 10],
  c,
  [82, 73],
  416,
  590,
  346,
  346,
  c,
  [4765, 4],
  c,
  [16611, 19],
  c,
  [602, 409],
  c,
  [18375, 3],
  c,
  [5280, 12],
  c,
  [7261, 22],
  12,
  4,
  158,
  372,
  493,
  5,
  6,
  c,
  [2770, 408],
  c,
  [5733, 4],
  c,
  [874, 3],
  534,
  7,
  c,
  [16391, 346],
  519,
  520,
  584,
  582,
  c,
  [17873, 5],
  531,
  270,
  382,
  528,
  c,
  [19154, 344],
  c,
  [18781, 4],
  c,
  [364, 3],
  c,
  [18798, 6],
  529,
  530,
  584,
  350,
  c,
  [17111, 347],
  292,
  c,
  [1485, 408],
  672,
  474,
  378,
  154,
  c,
  [1489, 4],
  c,
  [19454, 8],
  c,
  [424, 408],
  666,
  c,
  [7676, 9],
  180,
  c,
  [2353, 4],
  593,
  594,
  596,
  c,
  [19504, 13],
  478,
  674,
  c,
  [2822, 11],
  c,
  [2821, 6],
  567,
  c,
  [1592, 344],
  378,
  382,
  389,
  390,
  407,
  408,
  c,
  [6762, 15],
  535,
  536,
  537,
  544,
  562,
  c,
  [444, 3],
  620,
  622,
  623,
  c,
  [19940, 4],
  c,
  [3879, 49],
  c,
  [3304, 26],
  573,
  c,
  [19128, 308],
  c,
  [19127, 7],
  c,
  [19126, 13],
  c,
  [3714, 18],
  c,
  [8600, 38],
  c,
  [414, 29],
  639,
  640,
  c,
  [9181, 51],
  c,
  [82, 29],
  577,
  644,
  c,
  [4456, 53],
  c,
  [25323, 29],
  c,
  [80, 77],
  c,
  [25483, 10],
  c,
  [80, 176],
  c,
  [24928, 27],
  c,
  [82, 29],
  c,
  [24929, 10],
  c,
  [82, 98],
  c,
  [4367, 29],
  c,
  [4448, 81],
  c,
  [81, 108],
  317,
  318,
  c,
  [164, 83],
  c,
  [9456, 5],
  c,
  [10973, 69],
  644,
  312,
  c,
  [11984, 395],
  c,
  [79, 83],
  c,
  [78, 8],
  c,
  [76, 35],
  c,
  [73, 395],
  c,
  [754, 256],
  c,
  [78, 8],
  c,
  [77, 20],
  c,
  [74, 9],
  c,
  [73, 13],
  c,
  [16966, 818],
  458,
  c,
  [14850, 381],
  c,
  [1273, 452],
  c,
  [863, 29],
  c,
  [15720, 3],
  c,
  [15719, 4],
  388,
  c,
  [28146, 347],
  c,
  [11528, 41],
  c,
  [11527, 17],
  c,
  [403, 748],
  c,
  [38565, 55],
  c,
  [9889, 18],
  486,
  422,
  582,
  6,
  10,
  6,
  10,
  c,
  [8397, 3],
  5,
  6,
  469,
  c,
  [48226, 3],
  c,
  [14221, 363],
  c,
  [1658, 29],
  c,
  [14217, 17],
  c,
  [410, 388],
  c,
  [14628, 23],
  c,
  [411, 411],
  c,
  [1238, 3],
  c,
  [16896, 28],
  c,
  [28007, 5],
  427,
  428,
  c,
  [6886, 66],
  s,
  [458, 6, 1],
  c,
  [31158, 15],
  c,
  [79, 231],
  c,
  [6386, 77],
  5,
  431,
  432,
  434,
  615,
  616,
  c,
  [10032, 412],
  c,
  [3809, 16],
  c,
  [15764, 56],
  554,
  s,
  [4, 3],
  c,
  [15756, 408],
  s,
  [5, 3],
  c,
  [1335, 12],
  371,
  c,
  [18232, 21],
  388,
  c,
  [18267, 22],
  429,
  c,
  [36, 11],
  606,
  c,
  [35, 10],
  180,
  379,
  c,
  [32, 4],
  435,
  436,
  595,
  c,
  [3899, 1152],
  c,
  [403, 57],
  c,
  [2636, 15],
  377,
  379,
  388,
  c,
  [1302, 19],
  609,
  610,
  c,
  [38, 14],
  c,
  [1339, 21],
  c,
  [15487, 379],
  c,
  [15484, 381],
  c,
  [411, 473],
  c,
  [3943, 16],
  c,
  [1306, 20],
  c,
  [14025, 411],
  c,
  [4388, 29],
  c,
  [21284, 6],
  c,
  [32437, 4],
  c,
  [14475, 412],
  5,
  312,
  312,
  5,
  5,
  c,
  [12089, 18],
  c,
  [437, 3],
  c,
  [21223, 385],
  c,
  [33994, 24],
  4,
  158,
  c,
  [13734, 347],
  c,
  [33638, 3],
  c,
  [33636, 37],
  c,
  [819, 3],
  387,
  401,
  568,
  c,
  [33642, 347],
  c,
  [33641, 3],
  c,
  [5095, 409],
  c,
  [34441, 4],
  9,
  11,
  579,
  c,
  [772, 4],
  533,
  58,
  297,
  5,
  6,
  582,
  378,
  c,
  [36657, 350],
  c,
  [14054, 13],
  4,
  108,
  146,
  c,
  [1968, 11],
  c,
  [1967, 5],
  496,
  c,
  [6392, 412],
  c,
  [2394, 14],
  c,
  [18, 12],
  c,
  [6384, 7],
  c,
  [25, 6],
  541,
  c,
  [26, 4],
  c,
  [53576, 368],
  482,
  483,
  538,
  539,
  584,
  c,
  [377, 364],
  c,
  [376, 10],
  540,
  584,
  c,
  [2365, 344],
  382,
  c,
  [15259, 18],
  c,
  [15255, 7],
  c,
  [746, 374],
  c,
  [1122, 376],
  539,
  c,
  [1122, 345],
  c,
  [10822, 4],
  c,
  [16387, 21],
  c,
  [10806, 5],
  c,
  [16391, 15],
  c,
  [46309, 348],
  c,
  [762, 20],
  566,
  c,
  [39777, 351],
  c,
  [1138, 9],
  c,
  [42552, 12],
  c,
  [378, 5],
  c,
  [14838, 5],
  c,
  [376, 354],
  c,
  [55859, 19],
  c,
  [10396, 50],
  c,
  [42028, 29],
  c,
  [77, 125],
  c,
  [17673, 29],
  c,
  [21143, 11],
  c,
  [17260, 72],
  c,
  [40465, 350],
  c,
  [16799, 76],
  c,
  [31254, 816],
  c,
  [15191, 73],
  c,
  [15264, 481],
  c,
  [11356, 1152],
  c,
  [1768, 135],
  c,
  [16544, 348],
  c,
  [483, 62],
  c,
  [40377, 320],
  600,
  c,
  [21252, 10],
  c,
  [13402, 10],
  c,
  [9176, 5],
  c,
  [13402, 3],
  c,
  [18, 18],
  c,
  [10420, 348],
  c,
  [55080, 71],
  c,
  [10421, 4],
  c,
  [31703, 75],
  9,
  601,
  5,
  c,
  [15759, 367],
  441,
  c,
  [16581, 43],
  5,
  c,
  [16995, 3],
  c,
  [17000, 5],
  c,
  [17005, 367],
  c,
  [4360, 454],
  164,
  121,
  161,
  241,
  640,
  c,
  [3, 3],
  241,
  c,
  [31555, 3],
  417,
  591,
  431,
  c,
  [423, 408],
  c,
  [12621, 21],
  433,
  c,
  [13066, 12],
  c,
  [10598, 346],
  555,
  584,
  401,
  469,
  664,
  c,
  [34291, 33],
  c,
  [43327, 330],
  c,
  [1156, 408],
  388,
  609,
  c,
  [5795, 811],
  c,
  [1551, 676],
  c,
  [17884, 863],
  c,
  [403, 3628],
  c,
  [6751, 10],
  c,
  [411, 343],
  379,
  382,
  c,
  [41929, 16],
  430,
  c,
  [41921, 17],
  c,
  [418, 28],
  87,
  176,
  372,
  437,
  c,
  [422, 11],
  180,
  c,
  [7171, 6],
  c,
  [9743, 4],
  c,
  [20, 40],
  377,
  610,
  5,
  c,
  [6466, 756],
  c,
  [10972, 382],
  c,
  [6471, 10],
  s,
  [5, 3],
  c,
  [21356, 411],
  c,
  [20175, 410],
  c,
  [15781, 24],
  c,
  [32475, 30],
  c,
  [57487, 30],
  c,
  [82, 83],
  c,
  [19956, 14],
  10,
  c,
  [21160, 11],
  c,
  [9391, 22],
  c,
  [74786, 4],
  363,
  c,
  [11631, 4],
  s,
  [484, 7, 1],
  c,
  [76340, 5],
  c,
  [20404, 4],
  c,
  [13257, 414],
  c,
  [469, 11],
  c,
  [36452, 3],
  c,
  [472, 19],
  c,
  [36470, 348],
  584,
  c,
  [74730, 412],
  383,
  384,
  532,
  c,
  [77505, 6],
  c,
  [55328, 7],
  c,
  [55327, 7],
  c,
  [14, 7],
  c,
  [790, 346],
  530,
  584,
  5,
  6,
  c,
  [22000, 3],
  c,
  [43973, 3],
  c,
  [1668, 4],
  c,
  [1667, 9],
  503,
  c,
  [76007, 4],
  c,
  [70783, 15],
  c,
  [1753, 7],
  402,
  c,
  [45321, 19],
  c,
  [11459, 348],
  c,
  [19342, 21],
  c,
  [19337, 11],
  392,
  392,
  c,
  [378, 377],
  c,
  [2528, 4],
  541,
  392,
  398,
  542,
  c,
  [3, 6],
  c,
  [22016, 19],
  c,
  [18633, 4],
  c,
  [800, 4],
  547,
  c,
  [22853, 347],
  c,
  [18742, 5],
  c,
  [376, 23],
  c,
  [75597, 348],
  c,
  [376, 21],
  c,
  [22794, 10],
  c,
  [22391, 372],
  c,
  [22021, 752],
  c,
  [2745, 3],
  581,
  5,
  c,
  [25, 7],
  5,
  c,
  [385, 347],
  377,
  c,
  [356, 7],
  c,
  [378, 10],
  c,
  [17, 7],
  541,
  183,
  c,
  [67933, 6],
  c,
  [21275, 372],
  10,
  c,
  [42014, 7],
  c,
  [21278, 151],
  c,
  [912, 344],
  c,
  [21117, 14],
  c,
  [36768, 524],
  c,
  [21193, 510],
  c,
  [18684, 36],
  c,
  [998, 889],
  c,
  [19940, 331],
  c,
  [2297, 62],
  c,
  [2296, 3],
  c,
  [1223, 11],
  c,
  [8633, 410],
  c,
  [9041, 409],
  c,
  [18248, 32],
  c,
  [53489, 443],
  c,
  [37352, 409],
  c,
  [10747, 364],
  c,
  [412, 50],
  c,
  [36942, 34],
  c,
  [35, 36],
  c,
  [34, 21],
  431,
  c,
  [33068, 403],
  c,
  [513, 17],
  c,
  [5352, 344],
  469,
  482,
  483,
  556,
  c,
  [31784, 410],
  c,
  [36878, 14],
  c,
  [33825, 21],
  377,
  610,
  c,
  [34305, 33],
  c,
  [13674, 11],
  c,
  [13712, 48],
  c,
  [20, 80],
  c,
  [19, 6],
  c,
  [17, 4],
  c,
  [14, 74],
  c,
  [104, 19],
  388,
  87,
  176,
  c,
  [13961, 12],
  c,
  [35893, 5],
  c,
  [281, 29],
  c,
  [315, 25],
  c,
  [48237, 5],
  c,
  [2957, 32],
  c,
  [10197, 14],
  c,
  [23385, 4],
  c,
  [11397, 14],
  c,
  [3010, 23],
  c,
  [55551, 12],
  176,
  c,
  [40, 5],
  c,
  [2636, 8],
  c,
  [41, 7],
  c,
  [5711, 412],
  384,
  385,
  386,
  c,
  [47960, 3],
  c,
  [34298, 7],
  c,
  [508, 8],
  551,
  c,
  [4330, 791],
  s,
  [497, 6, 1],
  c,
  [32742, 37],
  c,
  [32724, 14],
  c,
  [11125, 376],
  c,
  [376, 376],
  383,
  c,
  [4707, 8],
  541,
  543,
  c,
  [11889, 377],
  c,
  [9043, 345],
  c,
  [11471, 3],
  585,
  588,
  c,
  [11849, 28],
  c,
  [69886, 349],
  c,
  [349, 346],
  570,
  571,
  c,
  [12199, 28],
  c,
  [376, 349],
  652,
  653,
  4,
  c,
  [36168, 6],
  c,
  [11802, 371],
  c,
  [70600, 344],
  382,
  c,
  [2205, 16],
  563,
  564,
  c,
  [2202, 6],
  10,
  c,
  [11405, 3],
  c,
  [31123, 900],
  c,
  [32493, 566],
  c,
  [10044, 55],
  c,
  [19421, 330],
  c,
  [1851, 146],
  c,
  [29590, 4],
  c,
  [8339, 22],
  432,
  c,
  [12862, 8],
  c,
  [39, 5],
  117,
  192,
  209,
  234,
  469,
  557,
  c,
  [6793, 33],
  c,
  [21684, 403],
  388,
  c,
  [5061, 294],
  c,
  [11413, 41],
  c,
  [7020, 12],
  c,
  [3929, 346],
  522,
  584,
  653,
  c,
  [19274, 39],
  171,
  292,
  c,
  [9114, 345],
  c,
  [41292, 4],
  297,
  c,
  [349, 346],
  552,
  553,
  c,
  [16465, 4],
  c,
  [18813, 15],
  c,
  [74016, 4],
  c,
  [18810, 24],
  c,
  [7333, 7],
  c,
  [8680, 9],
  c,
  [89659, 19],
  c,
  [89656, 5],
  c,
  [18874, 25],
  c,
  [60974, 346],
  c,
  [87610, 73],
  c,
  [64617, 14],
  c,
  [469, 13],
  c,
  [9115, 15],
  c,
  [514, 6],
  c,
  [48, 64],
  249,
  c,
  [566, 29],
  541,
  c,
  [7182, 11],
  c,
  [33881, 409],
  c,
  [7590, 376],
  c,
  [8731, 345],
  c,
  [77100, 10],
  c,
  [74989, 676],
  c,
  [7172, 5],
  c,
  [685, 334],
  c,
  [334, 4],
  371,
  565,
  10,
  c,
  [4911, 146],
  c,
  [4984, 74],
  5,
  c,
  [43535, 3],
  c,
  [4988, 3],
  39,
  c,
  [11836, 18],
  c,
  [48934, 404],
  c,
  [4931, 331],
  5,
  6,
  248,
  384,
  401,
  567,
  c,
  [23044, 13],
  c,
  [100146, 14],
  371,
  c,
  [3176, 383],
  c,
  [11561, 30],
  c,
  [63497, 819],
  c,
  [3622, 349],
  c,
  [5380, 19],
  c,
  [95037, 6],
  c,
  [2440, 11],
  c,
  [5390, 22],
  541,
  c,
  [26984, 411],
  c,
  [819, 346],
  571,
  584,
  404,
  c,
  [26925, 6],
  c,
  [43988, 369],
  c,
  [10924, 361],
  c,
  [5535, 6],
  4,
  c,
  [3938, 4],
  558,
  c,
  [1508, 410],
  c,
  [4344, 18],
  c,
  [19878, 3],
  c,
  [82678, 696],
  553,
  584,
  4,
  555,
  c,
  [50983, 387],
  c,
  [15845, 31],
  c,
  [6053, 297],
  c,
  [6408, 56],
  c,
  [30395, 384],
  559,
  560,
  c,
  [5048, 408],
  c,
  [410, 437],
  c,
  [50612, 5],
  469,
  c,
  [66601, 5],
  401,
  c,
  [52559, 3],
  c,
  [9, 4],
  221,
  c,
  [15202, 22],
  548,
  c,
  [1627, 3],
  98,
  561,
  4,
  c,
  [74275, 304],
  c,
  [466, 50],
  c,
  [21767, 3],
  c,
  [21753, 17],
  425,
  c,
  [33315, 18],
  c,
  [77735, 7],
  c,
  [479, 3],
  c,
  [888, 27],
  c,
  [9992, 12],
  109,
  180,
  197,
  c,
  [12497, 3],
  c,
  [19197, 16],
  c,
  [34, 16],
  342,
  c,
  [35, 17],
  c,
  [5243, 10],
  c,
  [66, 6],
  c,
  [19392, 19],
  98,
  561,
  c,
  [539, 4],
  68,
  170,
  277,
  375,
  403,
  c,
  [10050, 408],
  342,
  184,
  c,
  [410, 383],
  c,
  [1412, 27],
  c,
  [13427, 32]
]),
  type: u([
  s,
  [2, 10],
  s,
  [0, 13],
  1,
  s,
  [2, 38],
  0,
  0,
  c,
  [60, 10],
  c,
  [70, 12],
  s,
  [2, 402],
  c,
  [404, 361],
  c,
  [768, 349],
  c,
  [1118, 350],
  c,
  [350, 17],
  s,
  [0, 11],
  c,
  [1072, 350],
  c,
  [351, 15],
  c,
  [372, 13],
  c,
  [7, 21],
  c,
  [1495, 24],
  c,
  [1917, 404],
  s,
  [0, 31],
  c,
  [412, 411],
  s,
  [2, 1101],
  c,
  [1516, 387],
  c,
  [1871, 359],
  c,
  [2726, 17],
  c,
  [2267, 402],
  c,
  [375, 349],
  c,
  [4955, 357],
  c,
  [5747, 15],
  c,
  [1510, 23],
  c,
  [47, 10],
  c,
  [1164, 756],
  c,
  [411, 77],
  c,
  [13, 5],
  c,
  [21, 8],
  c,
  [8, 16],
  c,
  [4288, 419],
  c,
  [878, 26],
  c,
  [450, 71],
  c,
  [524, 412],
  c,
  [408, 1634],
  c,
  [6446, 386],
  s,
  [0, 33],
  c,
  [5454, 157],
  c,
  [579, 239],
  c,
  [5414, 6],
  c,
  [5419, 385],
  c,
  [4249, 107],
  c,
  [7758, 1102],
  s,
  [2, 5822],
  c,
  [6924, 159],
  c,
  [159, 81],
  c,
  [81, 80],
  c,
  [80, 240],
  c,
  [796, 316],
  c,
  [396, 238],
  c,
  [238, 82],
  c,
  [320, 180],
  c,
  [13038, 755],
  c,
  [15711, 386],
  c,
  [16444, 734],
  c,
  [1491, 375],
  c,
  [759, 353],
  c,
  [357, 42],
  c,
  [19975, 369],
  c,
  [16789, 341],
  c,
  [1461, 68],
  c,
  [64, 44],
  c,
  [20819, 16],
  c,
  [1581, 433],
  c,
  [17014, 37],
  c,
  [12262, 392],
  c,
  [18165, 693],
  c,
  [4642, 744],
  c,
  [15834, 409],
  c,
  [409, 4500],
  c,
  [21618, 1284],
  c,
  [1694, 415],
  c,
  [414, 415],
  c,
  [22419, 387],
  c,
  [7930, 214],
  c,
  [79, 316],
  c,
  [9763, 33],
  c,
  [10332, 46],
  c,
  [15637, 619],
  c,
  [31143, 635],
  c,
  [409, 109],
  c,
  [3161, 415],
  c,
  [906, 83],
  c,
  [83, 3],
  c,
  [2861, 33],
  c,
  [24896, 82],
  c,
  [2979, 6],
  c,
  [24581, 6],
  c,
  [3780, 415],
  c,
  [1535, 492],
  c,
  [29651, 706],
  c,
  [2760, 438],
  c,
  [2676, 495],
  c,
  [7478, 735],
  c,
  [409, 1199],
  c,
  [489, 110],
  c,
  [20644, 164],
  c,
  [166, 6],
  c,
  [172, 21],
  c,
  [1091, 443],
  c,
  [33207, 9],
  c,
  [9017, 417],
  c,
  [18794, 357],
  c,
  [30591, 353],
  c,
  [39489, 359],
  c,
  [35548, 792],
  c,
  [424, 56],
  c,
  [17, 18],
  c,
  [2821, 380],
  c,
  [32150, 408],
  c,
  [1258, 99],
  c,
  [9182, 83],
  c,
  [25483, 320],
  c,
  [4285, 166],
  c,
  [81, 322],
  c,
  [83, 79],
  c,
  [77, 78],
  c,
  [11984, 394],
  c,
  [79, 73],
  c,
  [73, 438],
  c,
  [675, 310],
  c,
  [15272, 1127],
  c,
  [14850, 73],
  c,
  [10296, 824],
  c,
  [11111, 817],
  c,
  [8991, 7],
  c,
  [422, 11],
  c,
  [6877, 793],
  c,
  [46677, 473],
  c,
  [10764, 405],
  c,
  [3328, 486],
  c,
  [26143, 444],
  c,
  [1371, 40],
  c,
  [11473, 395],
  c,
  [3899, 806],
  c,
  [1302, 65],
  c,
  [39, 33],
  c,
  [3532, 858],
  c,
  [3943, 795],
  c,
  [445, 60],
  c,
  [23039, 418],
  c,
  [415, 26],
  c,
  [441, 384],
  c,
  [31522, 378],
  c,
  [350, 36],
  c,
  [14491, 12],
  c,
  [34390, 700],
  c,
  [15614, 68],
  c,
  [16042, 351],
  c,
  [14071, 19],
  c,
  [1967, 400],
  c,
  [1963, 71],
  c,
  [452, 373],
  c,
  [1639, 376],
  c,
  [376, 365],
  c,
  [4874, 381],
  c,
  [376, 747],
  c,
  [6011, 391],
  c,
  [48835, 753],
  c,
  [1127, 235],
  c,
  [21143, 83],
  c,
  [5711, 386],
  c,
  [31662, 926],
  c,
  [16537, 457],
  c,
  [10953, 867],
  c,
  [1768, 517],
  c,
  [891, 656],
  c,
  [331, 33],
  c,
  [22072, 381],
  c,
  [55080, 134],
  c,
  [30177, 384],
  c,
  [10483, 34],
  c,
  [497, 5],
  c,
  [5, 10],
  c,
  [4360, 817],
  c,
  [56010, 7],
  c,
  [1256, 384],
  c,
  [831, 57],
  c,
  [45016, 353],
  c,
  [34291, 76],
  c,
  [43327, 634],
  c,
  [1156, 65],
  c,
  [5795, 1127],
  c,
  [6528, 1196],
  c,
  [403, 4030],
  c,
  [418, 67],
  c,
  [17779, 40],
  c,
  [7236, 6],
  c,
  [44477, 1132],
  c,
  [1635, 398],
  c,
  [69441, 439],
  c,
  [57569, 182],
  c,
  [99, 31],
  c,
  [41243, 16],
  c,
  [10252, 15],
  c,
  [650, 441],
  c,
  [10248, 355],
  c,
  [24110, 412],
  c,
  [77505, 13],
  c,
  [21641, 9],
  c,
  [53651, 358],
  c,
  [1667, 48],
  c,
  [862, 382],
  c,
  [2686, 378],
  c,
  [378, 19],
  c,
  [4634, 9],
  c,
  [393, 28],
  c,
  [56921, 356],
  c,
  [1998, 368],
  c,
  [18629, 403],
  c,
  [376, 754],
  c,
  [380, 371],
  c,
  [40742, 358],
  c,
  [71600, 37],
  c,
  [22033, 503],
  c,
  [36768, 536],
  c,
  [19425, 526],
  c,
  [18684, 88],
  c,
  [53445, 1135],
  c,
  [331, 88],
  c,
  [60046, 794],
  c,
  [18633, 406],
  c,
  [4051, 482],
  c,
  [12383, 408],
  c,
  [32999, 96],
  c,
  [35, 34],
  c,
  [3443, 758],
  c,
  [758, 443],
  c,
  [20854, 57],
  c,
  [13712, 43],
  c,
  [20, 91],
  c,
  [14, 84],
  c,
  [4995, 42],
  c,
  [1552, 70],
  c,
  [36, 19],
  c,
  [37317, 70],
  c,
  [14568, 422],
  c,
  [508, 50],
  c,
  [51522, 784],
  c,
  [35143, 393],
  c,
  [816, 376],
  c,
  [55181, 25],
  c,
  [11889, 382],
  c,
  [35476, 717],
  c,
  [70592, 706],
  c,
  [1461, 26],
  c,
  [3446, 375],
  c,
  [757, 362],
  c,
  [15295, 20],
  c,
  [10892, 1025],
  c,
  [30725, 484],
  c,
  [557, 321],
  c,
  [32974, 163],
  c,
  [8375, 43],
  c,
  [9750, 409],
  c,
  [1517, 345],
  c,
  [53439, 31],
  c,
  [4305, 384],
  c,
  [1139, 351],
  c,
  [5771, 396],
  c,
  [74571, 108],
  c,
  [32530, 456],
  c,
  [21171, 76],
  c,
  [51705, 773],
  c,
  [377, 360],
  c,
  [350, 324],
  c,
  [78140, 364],
  c,
  [685, 341],
  c,
  [92462, 144],
  c,
  [73, 83],
  c,
  [92710, 92],
  c,
  [16344, 669],
  c,
  [23044, 21],
  c,
  [98628, 419],
  c,
  [63088, 1165],
  c,
  [350, 59],
  c,
  [1227, 760],
  c,
  [8100, 380],
  c,
  [1113, 367],
  c,
  [64323, 433],
  c,
  [8138, 352],
  c,
  [26974, 351],
  c,
  [57074, 420],
  c,
  [25376, 723],
  c,
  [68953, 448],
  c,
  [410, 424],
  c,
  [12028, 31],
  c,
  [47542, 406],
  c,
  [888, 128],
  c,
  [19743, 9],
  c,
  [76613, 797],
  c,
  [934, 58],
  s,
  [0, 4]
]),
  state: u([
  s,
  [1, 4, 1],
  8,
  7,
  11,
  10,
  12,
  9,
  15,
  5,
  6,
  25,
  24,
  32,
  30,
  31,
  15,
  34,
  33,
  11,
  10,
  35,
  15,
  37,
  36,
  46,
  47,
  41,
  44,
  42,
  46,
  47,
  391,
  393,
  395,
  394,
  46,
  47,
  396,
  c,
  [6, 3],
  398,
  c,
  [42, 10],
  46,
  47,
  400,
  399,
  44,
  42,
  402,
  404,
  408,
  412,
  403,
  406,
  407,
  413,
  416,
  417,
  420,
  419,
  c,
  [58, 4],
  467,
  47,
  443,
  458,
  437,
  451,
  470,
  457,
  438,
  452,
  454,
  431,
  441,
  428,
  464,
  442,
  465,
  471,
  472,
  519,
  520,
  473,
  521,
  522,
  523,
  474,
  459,
  426,
  423,
  424,
  425,
  c,
  [31, 28],
  524,
  425,
  46,
  47,
  44,
  528,
  531,
  530,
  46,
  47,
  535,
  c,
  [106, 3],
  536,
  c,
  [43, 12],
  538,
  c,
  [44, 15],
  539,
  46,
  47,
  541,
  46,
  47,
  543,
  44,
  544,
  546,
  545,
  406,
  407,
  548,
  547,
  c,
  [132, 3],
  549,
  412,
  556,
  557,
  c,
  [93, 27],
  559,
  558,
  c,
  [29, 27],
  564,
  562,
  565,
  32,
  567,
  31,
  15,
  32,
  568,
  c,
  [4, 3],
  569,
  c,
  [195, 29],
  572,
  570,
  571,
  573,
  c,
  [109, 3],
  574,
  406,
  407,
  575,
  610,
  611,
  595,
  607,
  c,
  [42, 27],
  612,
  c,
  [28, 27],
  613,
  c,
  [28, 27],
  614,
  c,
  [28, 27],
  615,
  c,
  [28, 27],
  616,
  618,
  619,
  467,
  47,
  621,
  c,
  [439, 5],
  c,
  [35, 24],
  620,
  531,
  s,
  [623, 4, 1],
  531,
  630,
  631,
  633,
  634,
  c,
  [73, 13],
  636,
  c,
  [39, 14],
  637,
  638,
  657,
  659,
  660,
  661,
  663,
  664,
  668,
  669,
  671,
  675,
  677,
  c,
  [41, 12],
  679,
  c,
  [389, 18],
  44,
  680,
  681,
  686,
  687,
  684,
  682,
  c,
  [38, 5],
  691,
  c,
  [118, 22],
  690,
  46,
  47,
  692,
  c,
  [574, 4],
  395,
  694,
  695,
  c,
  [307, 4],
  46,
  47,
  698,
  699,
  700,
  702,
  46,
  47,
  703,
  705,
  c,
  [585, 4],
  35,
  15,
  704,
  c,
  [21, 4],
  c,
  [4, 4],
  717,
  c,
  [78, 3],
  720,
  721,
  c,
  [10, 4],
  724,
  546,
  727,
  c,
  [469, 3],
  728,
  c,
  [360, 3],
  729,
  c,
  [559, 28],
  732,
  686,
  687,
  733,
  762,
  734,
  735,
  737,
  743,
  738,
  739,
  754,
  755,
  740,
  756,
  757,
  523,
  741,
  742,
  46,
  47,
  770,
  769,
  c,
  [51, 27],
  772,
  c,
  [28, 27],
  773,
  c,
  [28, 27],
  774,
  c,
  [28, 27],
  775,
  c,
  [28, 27],
  776,
  c,
  [28, 27],
  777,
  c,
  [28, 27],
  778,
  c,
  [28, 27],
  779,
  c,
  [28, 27],
  780,
  c,
  [28, 27],
  781,
  c,
  [28, 27],
  782,
  c,
  [28, 27],
  783,
  c,
  [28, 27],
  784,
  c,
  [28, 27],
  785,
  c,
  [28, 27],
  786,
  c,
  [28, 27],
  787,
  c,
  [28, 27],
  793,
  803,
  807,
  806,
  c,
  [559, 8],
  c,
  [4, 12],
  812,
  c,
  [5, 4],
  531,
  623,
  681,
  c,
  [59, 12],
  814,
  817,
  815,
  c,
  [687, 16],
  c,
  [31, 12],
  818,
  c,
  [29, 16],
  c,
  [61, 8],
  821,
  c,
  [31, 5],
  826,
  c,
  [31, 15],
  827,
  829,
  835,
  837,
  838,
  839,
  c,
  [103, 4],
  841,
  s,
  [845, 4, 1],
  c,
  [164, 27],
  849,
  859,
  850,
  851,
  c,
  [31, 12],
  860,
  c,
  [32, 15],
  861,
  c,
  [29, 11],
  867,
  862,
  441,
  863,
  864,
  c,
  [30, 13],
  c,
  [58, 12],
  870,
  868,
  c,
  [59, 15],
  869,
  c,
  [119, 27],
  871,
  c,
  [28, 12],
  878,
  875,
  c,
  [30, 15],
  876,
  c,
  [58, 27],
  879,
  c,
  [28, 12],
  880,
  c,
  [308, 28],
  881,
  c,
  [29, 28],
  882,
  c,
  [29, 28],
  884,
  c,
  [29, 16],
  s,
  [885, 4, 1],
  891,
  892,
  893,
  c,
  [36, 12],
  894,
  c,
  [36, 16],
  c,
  [366, 4],
  899,
  c,
  [185, 27],
  904,
  905,
  46,
  47,
  909,
  908,
  702,
  910,
  911,
  913,
  46,
  47,
  c,
  [1712, 6],
  916,
  917,
  918,
  46,
  47,
  920,
  c,
  [1513, 28],
  922,
  c,
  [1500, 28],
  927,
  929,
  611,
  928,
  944,
  946,
  467,
  47,
  954,
  948,
  949,
  955,
  950,
  951,
  959,
  470,
  962,
  960,
  957,
  961,
  42,
  963,
  762,
  965,
  c,
  [1122, 12],
  966,
  835,
  968,
  969,
  664,
  663,
  661,
  669,
  675,
  671,
  657,
  660,
  659,
  668,
  971,
  c,
  [654, 20],
  c,
  [4, 44],
  c,
  [143, 27],
  974,
  c,
  [28, 27],
  975,
  977,
  807,
  979,
  c,
  [63, 31],
  981,
  c,
  [616, 12],
  441,
  991,
  c,
  [615, 25],
  867,
  441,
  992,
  c,
  [28, 16],
  c,
  [1606, 15],
  993,
  c,
  [409, 16],
  994,
  997,
  1003,
  1005,
  c,
  [122, 12],
  1006,
  c,
  [813, 16],
  c,
  [29, 7],
  1007,
  c,
  [843, 22],
  c,
  [30, 7],
  1008,
  c,
  [30, 22],
  c,
  [215, 4],
  1019,
  1018,
  c,
  [217, 27],
  1021,
  1022,
  c,
  [29, 27],
  1026,
  c,
  [345, 8],
  1035,
  1052,
  c,
  [228, 13],
  1055,
  c,
  [256, 27],
  1056,
  c,
  [28, 27],
  1057,
  c,
  [28, 14],
  c,
  [90, 4],
  1059,
  1060,
  c,
  [378, 16],
  878,
  1064,
  c,
  [879, 28],
  878,
  1065,
  c,
  [30, 29],
  1066,
  c,
  [30, 16],
  c,
  [94, 16],
  1069,
  c,
  [792, 20],
  c,
  [33, 12],
  1074,
  c,
  [33, 16],
  1082,
  c,
  [30, 5],
  1084,
  c,
  [290, 22],
  1085,
  c,
  [1930, 3],
  1088,
  c,
  [67, 4],
  1089,
  46,
  47,
  1091,
  700,
  702,
  c,
  [332, 27],
  1092,
  812,
  1095,
  1101,
  c,
  [1940, 3],
  1103,
  1104,
  1108,
  c,
  [37, 27],
  1110,
  1113,
  46,
  47,
  1121,
  1120,
  1123,
  46,
  47,
  1125,
  1124,
  1127,
  467,
  47,
  1130,
  1128,
  1131,
  c,
  [822, 5],
  c,
  [20, 3],
  1132,
  c,
  [20, 3],
  1121,
  1133,
  1123,
  467,
  47,
  1135,
  c,
  [590, 5],
  1136,
  1134,
  c,
  [850, 9],
  1137,
  531,
  1140,
  1143,
  1145,
  1146,
  c,
  [2103, 3],
  1148,
  c,
  [88, 27],
  1149,
  c,
  [28, 27],
  1150,
  c,
  [830, 35],
  1153,
  c,
  [455, 13],
  1154,
  c,
  [483, 27],
  1155,
  c,
  [1410, 26],
  c,
  [84, 15],
  1156,
  c,
  [116, 31],
  1160,
  762,
  1162,
  c,
  [2190, 3],
  1161,
  c,
  [1069, 10],
  1052,
  c,
  [645, 3],
  c,
  [2451, 30],
  1166,
  812,
  1168,
  c,
  [81, 12],
  1171,
  c,
  [782, 16],
  1172,
  1005,
  1173,
  1005,
  1175,
  c,
  [877, 13],
  c,
  [34, 15],
  1176,
  c,
  [28, 27],
  1177,
  1181,
  s,
  [1183, 4, 1],
  c,
  [33, 27],
  1188,
  c,
  [2449, 6],
  1190,
  1191,
  1194,
  c,
  [9, 4],
  762,
  1196,
  c,
  [2380, 13],
  c,
  [56, 27],
  1197,
  1198,
  c,
  [29, 27],
  1199,
  c,
  [350, 13],
  1200,
  c,
  [350, 14],
  762,
  1201,
  c,
  [100, 24],
  867,
  441,
  1202,
  c,
  [421, 27],
  1203,
  c,
  [28, 27],
  1204,
  c,
  [28, 27],
  1205,
  c,
  [28, 27],
  1206,
  c,
  [28, 27],
  1207,
  c,
  [28, 27],
  1208,
  c,
  [28, 27],
  1209,
  c,
  [28, 27],
  1210,
  c,
  [28, 27],
  1211,
  c,
  [28, 27],
  1212,
  c,
  [28, 27],
  1213,
  c,
  [28, 27],
  1214,
  c,
  [28, 14],
  s,
  [1052, 3],
  1219,
  1220,
  c,
  [440, 27],
  1221,
  c,
  [28, 27],
  1222,
  762,
  1223,
  c,
  [540, 25],
  1227,
  c,
  [2041, 28],
  c,
  [28, 15],
  1228,
  1230,
  1231,
  1232,
  c,
  [619, 4],
  1234,
  1235,
  c,
  [3654, 7],
  1237,
  1236,
  1239,
  c,
  [47, 27],
  1240,
  c,
  [672, 6],
  1243,
  c,
  [1190, 28],
  426,
  1244,
  425,
  1245,
  1248,
  c,
  [3147, 6],
  1249,
  c,
  [7, 6],
  46,
  47,
  1251,
  918,
  812,
  1253,
  c,
  [940, 6],
  954,
  1256,
  c,
  [1994, 10],
  c,
  [14, 3],
  1259,
  c,
  [14, 10],
  1260,
  1262,
  1264,
  1265,
  1266,
  46,
  47,
  1268,
  46,
  47,
  1271,
  c,
  [1213, 3],
  1273,
  1127,
  c,
  [1198, 3],
  1274,
  c,
  [1203, 4],
  1275,
  1123,
  531,
  1276,
  c,
  [1210, 5],
  1113,
  681,
  1281,
  1282,
  c,
  [1189, 3],
  1285,
  c,
  [1133, 35],
  1286,
  c,
  [28, 27],
  1287,
  c,
  [60, 4],
  1052,
  1052,
  c,
  [66, 31],
  1291,
  c,
  [28, 27],
  1292,
  c,
  [1111, 5],
  1293,
  c,
  [382, 10],
  c,
  [76, 31],
  1296,
  c,
  [28, 27],
  1297,
  c,
  [60, 16],
  1299,
  c,
  [1950, 23],
  c,
  [1167, 22],
  c,
  [2235, 39],
  1304,
  46,
  47,
  1305,
  1306,
  c,
  [32, 27],
  1307,
  c,
  [64, 4],
  1310,
  c,
  [281, 6],
  s,
  [1052, 12],
  c,
  [95, 12],
  1318,
  c,
  [100, 31],
  1321,
  1325,
  1327,
  c,
  [30, 27],
  1329,
  c,
  [28, 3],
  1330,
  1331,
  1333,
  1335,
  1334,
  1336,
  c,
  [34, 24],
  1332,
  1113,
  c,
  [528, 3],
  1341,
  c,
  [542, 13],
  1342,
  c,
  [14, 10],
  1113,
  1343,
  c,
  [16, 3],
  1347,
  c,
  [30, 12],
  1131,
  470,
  1348,
  c,
  [1850, 3],
  1350,
  695,
  46,
  47,
  1351,
  1352,
  1353,
  46,
  47,
  1355,
  1352,
  1356,
  1350,
  695,
  681,
  46,
  47,
  1357,
  c,
  [1762, 3],
  1359,
  1358,
  c,
  [1782, 4],
  1360,
  961,
  1363,
  c,
  [283, 35],
  1364,
  c,
  [28, 27],
  1365,
  c,
  [28, 27],
  1366,
  c,
  [92, 8],
  762,
  1368,
  c,
  [906, 13],
  c,
  [23, 8],
  1369,
  1005,
  c,
  [6, 4],
  1370,
  c,
  [126, 15],
  867,
  441,
  1373,
  c,
  [1408, 15],
  c,
  [587, 4],
  1376,
  c,
  [63, 10],
  1377,
  46,
  47,
  1378,
  395,
  1379,
  c,
  [871, 6],
  395,
  1383,
  46,
  47,
  1385,
  1386,
  1387,
  c,
  [197, 10],
  c,
  [4174, 31],
  1113,
  1113,
  1393,
  c,
  [177, 27],
  1395,
  c,
  [321, 3],
  1396,
  c,
  [337, 11],
  c,
  [96, 3],
  1398,
  695,
  762,
  1402,
  c,
  [4015, 15],
  1403,
  1352,
  1356,
  c,
  [22, 17],
  1407,
  c,
  [519, 12],
  1411,
  1005,
  c,
  [2505, 14],
  1413,
  c,
  [208, 19],
  1414,
  c,
  [60, 10],
  1417,
  1418,
  c,
  [1028, 6],
  c,
  [52, 3],
  1421,
  c,
  [510, 29],
  c,
  [186, 12],
  1422,
  c,
  [1218, 28],
  1423,
  c,
  [4341, 18],
  395,
  1425,
  c,
  [4298, 5],
  c,
  [577, 3],
  c,
  [39, 10],
  1426,
  c,
  [39, 18],
  1428,
  1353,
  1431,
  467,
  47,
  1432,
  c,
  [539, 6],
  1434,
  c,
  [44, 12],
  1438,
  c,
  [44, 16],
  1052,
  46,
  47,
  1440,
  c,
  [4373, 5],
  1441,
  1387,
  1442,
  c,
  [41, 3],
  1445,
  c,
  [697, 30],
  46,
  47,
  1448,
  1352,
  1353,
  c,
  [39, 3],
  1450,
  1451,
  c,
  [35, 24],
  1455,
  c,
  [30, 3],
  1456,
  c,
  [30, 29],
  1457,
  c,
  [30, 26],
  1458,
  1460,
  1463,
  c,
  [33, 3],
  1465,
  c,
  [32, 25],
  c,
  [251, 4],
  1471,
  1472,
  c,
  [506, 27],
  1479,
  c,
  [28, 3],
  1482,
  c,
  [63, 29]
]),
  mode: u([
  2,
  2,
  1,
  c,
  [3, 3],
  s,
  [1, 6],
  s,
  [2, 13],
  c,
  [15, 17],
  1,
  c,
  [42, 4],
  c,
  [46, 11],
  c,
  [33, 15],
  s,
  [2, 366],
  c,
  [395, 7],
  c,
  [26, 23],
  c,
  [436, 10],
  s,
  [1, 1031],
  c,
  [1464, 14],
  c,
  [356, 344],
  c,
  [1399, 11],
  c,
  [1858, 10],
  c,
  [6, 8],
  c,
  [1458, 5],
  c,
  [6, 6],
  c,
  [1886, 13],
  c,
  [415, 8],
  c,
  [409, 349],
  c,
  [394, 11],
  c,
  [361, 32],
  c,
  [1849, 385],
  c,
  [2617, 354],
  c,
  [32, 33],
  c,
  [3034, 369],
  c,
  [1101, 351],
  c,
  [3755, 376],
  c,
  [383, 9],
  c,
  [732, 342],
  c,
  [3032, 7],
  c,
  [4074, 612],
  c,
  [610, 461],
  c,
  [5585, 9],
  c,
  [1087, 9],
  c,
  [1093, 10],
  c,
  [1465, 356],
  c,
  [806, 426],
  c,
  [2616, 8],
  c,
  [1210, 397],
  c,
  [4964, 12],
  c,
  [3756, 18],
  c,
  [3051, 21],
  c,
  [4623, 21],
  c,
  [474, 21],
  c,
  [6456, 1038],
  s,
  [1, 1252],
  c,
  [2359, 8],
  c,
  [5412, 71],
  c,
  [5483, 76],
  c,
  [4833, 10],
  c,
  [6399, 104],
  c,
  [83, 53],
  c,
  [85, 69],
  c,
  [4818, 386],
  c,
  [565, 108],
  s,
  [2, 877],
  c,
  [1606, 81],
  c,
  [8338, 365],
  c,
  [411, 1199],
  c,
  [1645, 414],
  c,
  [413, 3719],
  c,
  [438, 184],
  c,
  [159, 158],
  c,
  [158, 80],
  c,
  [80, 56],
  c,
  [136, 79],
  c,
  [79, 158],
  c,
  [14191, 182],
  c,
  [552, 212],
  c,
  [923, 180],
  c,
  [14959, 57],
  c,
  [81, 81],
  c,
  [1322, 160],
  c,
  [17906, 17],
  c,
  [9869, 732],
  c,
  [2749, 374],
  c,
  [14657, 809],
  c,
  [724, 265],
  c,
  [1079, 352],
  c,
  [1803, 5],
  c,
  [367, 12],
  c,
  [1112, 715],
  c,
  [12095, 10],
  c,
  [14744, 14],
  c,
  [14768, 17],
  c,
  [759, 18],
  c,
  [19791, 10],
  c,
  [38, 29],
  c,
  [2636, 13],
  c,
  [15655, 356],
  c,
  [3834, 17],
  c,
  [22084, 17],
  c,
  [430, 12],
  c,
  [1232, 20],
  c,
  [433, 14],
  c,
  [66, 18],
  c,
  [21721, 1040],
  c,
  [14746, 734],
  c,
  [381, 4192],
  c,
  [5969, 11],
  c,
  [5976, 81],
  c,
  [475, 217],
  c,
  [217, 50],
  c,
  [21614, 12],
  c,
  [21657, 30],
  c,
  [6372, 26],
  c,
  [63, 14],
  c,
  [5773, 1520],
  c,
  [386, 16],
  c,
  [13699, 376],
  c,
  [30453, 382],
  c,
  [12691, 125],
  c,
  [505, 75],
  c,
  [75, 19],
  c,
  [8971, 8],
  c,
  [104, 48],
  c,
  [21629, 18],
  c,
  [10293, 6],
  c,
  [9555, 13],
  c,
  [9559, 10],
  c,
  [11762, 23],
  c,
  [31202, 10],
  c,
  [736, 13],
  c,
  [75, 71],
  c,
  [22114, 78],
  c,
  [29164, 34],
  c,
  [103, 35],
  c,
  [966, 389],
  c,
  [22329, 439],
  c,
  [11075, 405],
  c,
  [13312, 417],
  c,
  [30460, 54],
  c,
  [31285, 10],
  c,
  [14100, 55],
  c,
  [3147, 31],
  c,
  [1817, 77],
  c,
  [28582, 776],
  c,
  [390, 376],
  c,
  [27576, 2287],
  c,
  [35661, 382],
  c,
  [17783, 423],
  c,
  [34926, 58],
  c,
  [19393, 85],
  c,
  [543, 57],
  c,
  [15620, 404],
  c,
  [387, 28],
  c,
  [415, 385],
  c,
  [5911, 7],
  c,
  [352, 351],
  c,
  [30835, 1082],
  c,
  [18411, 21],
  c,
  [7293, 395],
  c,
  [2674, 18],
  c,
  [38146, 412],
  c,
  [10420, 31],
  c,
  [4073, 329],
  c,
  [8080, 65],
  c,
  [10000, 13],
  c,
  [24096, 229],
  c,
  [79, 181],
  c,
  [23622, 58],
  c,
  [81, 81],
  c,
  [24812, 159],
  c,
  [80, 79],
  c,
  [4497, 89],
  c,
  [10347, 70],
  c,
  [460, 11],
  c,
  [11180, 68],
  c,
  [75, 76],
  c,
  [29823, 56],
  c,
  [75, 176],
  c,
  [460, 49],
  c,
  [11555, 19],
  c,
  [1813, 8],
  c,
  [11477, 37],
  c,
  [69, 9],
  c,
  [2337, 17],
  c,
  [69, 342],
  c,
  [12044, 193],
  c,
  [10078, 14],
  c,
  [75, 18],
  c,
  [225, 12],
  c,
  [229, 31],
  c,
  [99, 11],
  c,
  [42968, 390],
  c,
  [16430, 384],
  c,
  [14073, 378],
  c,
  [1210, 448],
  c,
  [22222, 1534],
  c,
  [10162, 769],
  c,
  [3159, 96],
  c,
  [5942, 252],
  c,
  [94, 77],
  c,
  [1576, 384],
  c,
  [10427, 81],
  c,
  [12641, 1589],
  c,
  [15337, 1204],
  c,
  [2800, 411],
  c,
  [1586, 425],
  c,
  [11382, 20],
  c,
  [33514, 728],
  c,
  [31707, 33],
  c,
  [4419, 732],
  c,
  [8788, 8],
  c,
  [13267, 364],
  c,
  [46900, 19],
  c,
  [14086, 392],
  c,
  [5948, 25],
  c,
  [5965, 353],
  c,
  [11275, 21],
  c,
  [372, 370],
  c,
  [47993, 365],
  c,
  [731, 371],
  c,
  [1102, 731],
  c,
  [53687, 388],
  c,
  [382, 372],
  c,
  [26636, 370],
  c,
  [16186, 80],
  c,
  [858, 125],
  c,
  [13118, 31],
  c,
  [236, 78],
  c,
  [25476, 355],
  c,
  [26315, 827],
  c,
  [14428, 69],
  c,
  [14497, 1579],
  c,
  [1579, 1187],
  c,
  [29987, 461],
  c,
  [14549, 5],
  c,
  [27807, 2664],
  s,
  [1, 5161],
  c,
  [41976, 86],
  c,
  [8183, 272],
  c,
  [14504, 16],
  c,
  [14140, 37],
  c,
  [39458, 22],
  c,
  [27485, 10],
  c,
  [12838, 11],
  c,
  [25866, 1843],
  c,
  [69372, 105],
  c,
  [81, 63],
  c,
  [18855, 13],
  c,
  [34414, 29],
  c,
  [29559, 11],
  c,
  [66611, 385],
  c,
  [2915, 17],
  c,
  [1748, 1099],
  c,
  [43650, 11],
  c,
  [30846, 13],
  c,
  [12346, 20],
  c,
  [45636, 22],
  c,
  [1155, 733],
  c,
  [13104, 24],
  c,
  [53251, 353],
  c,
  [33206, 27],
  c,
  [38534, 375],
  c,
  [20447, 738],
  c,
  [20818, 374],
  c,
  [1495, 351],
  c,
  [33879, 17],
  c,
  [58138, 385],
  c,
  [70761, 25],
  c,
  [20086, 132],
  c,
  [21712, 408],
  c,
  [35819, 22],
  c,
  [2488, 11],
  c,
  [17519, 810],
  c,
  [18348, 103],
  c,
  [932, 829],
  c,
  [7219, 321],
  c,
  [37031, 57],
  c,
  [73890, 401],
  c,
  [29264, 410],
  c,
  [50606, 432],
  c,
  [34993, 795],
  c,
  [35024, 33],
  c,
  [30980, 408],
  c,
  [5944, 346],
  c,
  [728, 411],
  c,
  [29, 15],
  c,
  [61901, 20],
  c,
  [82093, 21],
  c,
  [65275, 16],
  c,
  [19, 16],
  c,
  [11044, 16],
  c,
  [19, 46],
  c,
  [40630, 19],
  c,
  [4703, 8],
  c,
  [13, 64],
  c,
  [13224, 18],
  c,
  [233, 18],
  c,
  [246, 18],
  c,
  [277, 31],
  c,
  [22063, 38],
  c,
  [9748, 23],
  c,
  [373, 18],
  c,
  [77110, 48],
  c,
  [14237, 373],
  c,
  [13807, 17],
  c,
  [6151, 767],
  c,
  [31003, 20],
  c,
  [49455, 1469],
  c,
  [716, 715],
  c,
  [43509, 351],
  c,
  [32060, 728],
  c,
  [9336, 69],
  c,
  [9405, 1144],
  c,
  [1278, 138],
  c,
  [9539, 385],
  c,
  [1736, 138],
  c,
  [7935, 24],
  c,
  [6565, 12],
  c,
  [1775, 724],
  c,
  [3009, 358],
  c,
  [18403, 727],
  c,
  [17988, 19],
  c,
  [730, 19],
  c,
  [2385, 31],
  c,
  [2057, 13],
  c,
  [18045, 405],
  c,
  [14969, 50],
  c,
  [48, 64],
  c,
  [64, 30],
  c,
  [57389, 1765],
  c,
  [42278, 321],
  c,
  [4699, 138],
  c,
  [6504, 69],
  c,
  [5239, 8],
  c,
  [44089, 420],
  c,
  [12282, 297],
  c,
  [95354, 1048],
  c,
  [17060, 458],
  c,
  [13421, 25],
  c,
  [23146, 752],
  c,
  [41324, 374],
  c,
  [26778, 742],
  c,
  [4117, 710],
  c,
  [31658, 1873],
  c,
  [80173, 13],
  c,
  [60007, 28],
  c,
  [14127, 10],
  c,
  [97658, 352],
  c,
  [12029, 25],
  c,
  [73652, 24],
  c,
  [40402, 44],
  c,
  [31762, 19],
  c,
  [31850, 44],
  s,
  [1, 786]
]),
  goto: u([
  8,
  8,
  13,
  387,
  387,
  19,
  14,
  16,
  17,
  18,
  20,
  21,
  s,
  [357, 3],
  s,
  [369, 4],
  c,
  [6, 6],
  23,
  22,
  s,
  [360, 3],
  s,
  [368, 4],
  c,
  [6, 6],
  26,
  27,
  28,
  966,
  29,
  s,
  [966, 3],
  13,
  386,
  386,
  c,
  [46, 3],
  13,
  c,
  [50, 5],
  s,
  [964, 379],
  39,
  s,
  [964, 3],
  38,
  s,
  [964, 18],
  s,
  [372, 3],
  40,
  s,
  [372, 10],
  s,
  [48, 343, 1],
  43,
  45,
  c,
  [345, 193],
  392,
  c,
  [345, 149],
  c,
  [344, 194],
  c,
  [689, 150],
  45,
  397,
  c,
  [1510, 10],
  c,
  [1044, 345],
  401,
  s,
  [361, 3],
  965,
  c,
  [3, 3],
  965,
  965,
  405,
  409,
  410,
  411,
  s,
  [960, 4],
  415,
  414,
  c,
  [6, 12],
  418,
  s,
  [364, 3],
  c,
  [1861, 4],
  364,
  364,
  c,
  [1863, 4],
  421,
  422,
  s,
  [369, 8],
  c,
  [1867, 4],
  935,
  935,
  440,
  935,
  427,
  429,
  430,
  c,
  [412, 69],
  499,
  c,
  [412, 90],
  450,
  c,
  [412, 133],
  s,
  [500, 5, 1],
  496,
  505,
  506,
  444,
  489,
  507,
  497,
  448,
  355,
  508,
  509,
  475,
  498,
  510,
  511,
  362,
  495,
  512,
  365,
  490,
  491,
  368,
  513,
  370,
  371,
  514,
  492,
  515,
  516,
  493,
  494,
  378,
  517,
  c,
  [412, 11],
  s,
  [935, 3],
  432,
  s,
  [935, 4],
  436,
  485,
  s,
  [935, 5],
  445,
  466,
  518,
  453,
  455,
  456,
  460,
  461,
  462,
  468,
  469,
  449,
  433,
  463,
  439,
  446,
  447,
  s,
  [476, 9, 1],
  486,
  487,
  488,
  434,
  435,
  s,
  [935, 4],
  440,
  c,
  [397, 346],
  432,
  436,
  485,
  c,
  [385, 31],
  s,
  [961, 350],
  525,
  s,
  [961, 31],
  526,
  s,
  [514, 4],
  527,
  s,
  [514, 368],
  529,
  c,
  [2298, 344],
  s,
  [944, 6],
  533,
  532,
  s,
  [944, 373],
  377,
  534,
  s,
  [377, 5],
  202,
  c,
  [733, 343],
  202,
  45,
  537,
  947,
  378,
  534,
  s,
  [378, 5],
  440,
  c,
  [2224, 379],
  540,
  c,
  [735, 228],
  520,
  c,
  [735, 114],
  542,
  c,
  [4111, 345],
  s,
  [977, 5],
  c,
  [3749, 3],
  s,
  [408, 3],
  405,
  c,
  [3, 3],
  405,
  405,
  550,
  s,
  [405, 5],
  555,
  553,
  551,
  554,
  552,
  s,
  [974, 6],
  411,
  s,
  [975, 6],
  409,
  410,
  c,
  [1113, 366],
  560,
  c,
  [1114, 14],
  561,
  c,
  [1495, 380],
  563,
  s,
  [417, 4],
  566,
  s,
  [417, 7],
  c,
  [4517, 4],
  c,
  [4, 8],
  c,
  [405, 380],
  s,
  [365, 3],
  965,
  c,
  [3, 3],
  c,
  [4964, 6],
  s,
  [389, 6],
  576,
  s,
  [389, 12],
  s,
  [934, 3],
  577,
  s,
  [934, 16],
  s,
  [940, 4],
  591,
  585,
  583,
  584,
  s,
  [586, 5, 1],
  582,
  609,
  605,
  s,
  [940, 3],
  578,
  s,
  [940, 4],
  606,
  s,
  [940, 5],
  596,
  579,
  608,
  592,
  593,
  594,
  598,
  599,
  600,
  580,
  602,
  581,
  597,
  601,
  603,
  604,
  s,
  [940, 4],
  c,
  [482, 380],
  c,
  [380, 1520],
  617,
  13,
  c,
  [382, 333],
  622,
  c,
  [382, 12],
  c,
  [7664, 4],
  c,
  [386, 34],
  s,
  [756, 6],
  533,
  756,
  532,
  s,
  [756, 68],
  311,
  311,
  13,
  s,
  [311, 75],
  13,
  627,
  315,
  315,
  628,
  s,
  [315, 75],
  169,
  169,
  629,
  s,
  [169, 76],
  s,
  [605, 6],
  533,
  605,
  532,
  s,
  [605, 68],
  632,
  469,
  469,
  635,
  469,
  c,
  [1162, 363],
  724,
  c,
  [777, 17],
  s,
  [530, 25],
  639,
  s,
  [530, 52],
  619,
  619,
  622,
  s,
  [619, 384],
  c,
  [385, 27],
  620,
  620,
  623,
  s,
  [620, 384],
  c,
  [385, 27],
  319,
  319,
  842,
  s,
  [319, 49],
  c,
  [50, 27],
  640,
  777,
  777,
  641,
  s,
  [777, 408],
  779,
  779,
  642,
  s,
  [779, 408],
  781,
  781,
  643,
  s,
  [781, 408],
  783,
  783,
  644,
  s,
  [783, 408],
  645,
  312,
  312,
  646,
  s,
  [312, 410],
  327,
  327,
  647,
  s,
  [327, 410],
  328,
  328,
  648,
  s,
  [328, 410],
  334,
  334,
  649,
  s,
  [334, 410],
  337,
  337,
  650,
  s,
  [337, 410],
  338,
  338,
  651,
  s,
  [338, 410],
  324,
  324,
  652,
  s,
  [324, 410],
  308,
  308,
  653,
  s,
  [308, 410],
  314,
  314,
  654,
  s,
  [314, 410],
  320,
  320,
  655,
  s,
  [320, 410],
  s,
  [78, 27],
  656,
  s,
  [78, 54],
  s,
  [303, 51],
  808,
  s,
  [303, 26],
  304,
  304,
  837,
  s,
  [304, 23],
  658,
  s,
  [304, 26],
  c,
  [51, 24],
  s,
  [304, 3],
  s,
  [305, 51],
  815,
  s,
  [305, 26],
  306,
  306,
  837,
  s,
  [306, 23],
  658,
  s,
  [306, 26],
  c,
  [51, 24],
  s,
  [306, 3],
  307,
  307,
  837,
  s,
  [307, 23],
  658,
  s,
  [307, 26],
  c,
  [51, 24],
  s,
  [307, 3],
  309,
  309,
  662,
  s,
  [309, 49],
  604,
  s,
  [309, 26],
  310,
  310,
  662,
  s,
  [310, 49],
  604,
  s,
  [310, 26],
  313,
  313,
  665,
  s,
  [313, 49],
  817,
  s,
  [313, 26],
  s,
  [317, 51],
  805,
  s,
  [317, 26],
  s,
  [318, 51],
  806,
  s,
  [318, 26],
  s,
  [321, 26],
  667,
  666,
  s,
  [321, 51],
  322,
  322,
  837,
  s,
  [322, 23],
  658,
  s,
  [322, 26],
  c,
  [51, 24],
  s,
  [322, 3],
  325,
  325,
  662,
  s,
  [325, 49],
  604,
  s,
  [325, 26],
  s,
  [330, 51],
  809,
  s,
  [330, 26],
  s,
  [333, 51],
  807,
  s,
  [333, 26],
  335,
  335,
  670,
  s,
  [335, 23],
  673,
  s,
  [335, 4],
  672,
  s,
  [335, 22],
  845,
  s,
  [335, 26],
  336,
  336,
  674,
  s,
  [336, 23],
  673,
  s,
  [336, 4],
  672,
  s,
  [336, 22],
  845,
  s,
  [336, 26],
  340,
  340,
  832,
  s,
  [340, 49],
  c,
  [50, 27],
  829,
  829,
  676,
  s,
  [829, 77],
  s,
  [389, 3],
  577,
  c,
  [11500, 16],
  678,
  c,
  [9911, 380],
  c,
  [13467, 344],
  s,
  [945, 6],
  533,
  532,
  s,
  [945, 373],
  683,
  c,
  [726, 343],
  685,
  688,
  689,
  440,
  612,
  c,
  [1453, 723],
  379,
  534,
  s,
  [379, 5],
  693,
  c,
  [352, 344],
  696,
  697,
  677,
  677,
  591,
  585,
  677,
  c,
  [14011, 8],
  677,
  609,
  677,
  677,
  605,
  606,
  596,
  c,
  [14000, 14],
  677,
  701,
  c,
  [382, 344],
  c,
  [344, 344],
  707,
  706,
  c,
  [20105, 5],
  708,
  s,
  [455, 7],
  709,
  455,
  555,
  553,
  554,
  552,
  710,
  711,
  712,
  s,
  [978, 3],
  713,
  s,
  [978, 4],
  s,
  [984, 4],
  c,
  [14768, 12],
  984,
  606,
  984,
  984,
  c,
  [757, 15],
  984,
  714,
  715,
  716,
  s,
  [986, 3],
  c,
  [38, 12],
  986,
  606,
  986,
  986,
  c,
  [38, 15],
  s,
  [986, 3],
  s,
  [435, 3],
  718,
  719,
  s,
  [435, 6],
  c,
  [463, 344],
  s,
  [374, 4],
  27,
  s,
  [374, 8],
  s,
  [376, 4],
  27,
  s,
  [376, 8],
  s,
  [967, 3],
  722,
  s,
  [967, 9],
  s,
  [989, 4],
  c,
  [432, 10],
  989,
  609,
  989,
  989,
  605,
  989,
  606,
  989,
  989,
  723,
  c,
  [436, 15],
  s,
  [989, 3],
  725,
  726,
  989,
  c,
  [16545, 14],
  s,
  [476, 11],
  730,
  s,
  [476, 6],
  731,
  c,
  [19873, 381],
  c,
  [3110, 346],
  c,
  [723, 160],
  c,
  [346, 133],
  747,
  763,
  753,
  765,
  764,
  751,
  750,
  749,
  744,
  745,
  760,
  767,
  768,
  752,
  748,
  736,
  746,
  759,
  758,
  766,
  761,
  518,
  c,
  [1503, 344],
  771,
  c,
  [5222, 379],
  655,
  c,
  [15514, 380],
  656,
  c,
  [381, 380],
  657,
  c,
  [381, 380],
  658,
  c,
  [381, 380],
  659,
  c,
  [381, 380],
  660,
  c,
  [381, 380],
  661,
  c,
  [381, 380],
  662,
  c,
  [381, 380],
  663,
  c,
  [381, 380],
  664,
  c,
  [381, 380],
  665,
  c,
  [381, 380],
  666,
  435,
  882,
  882,
  440,
  s,
  [882, 6],
  429,
  430,
  s,
  [882, 5],
  c,
  [394, 76],
  882,
  c,
  [394, 216],
  882,
  c,
  [394, 49],
  s,
  [882, 4],
  432,
  s,
  [882, 5],
  436,
  485,
  s,
  [882, 15],
  c,
  [418, 12],
  s,
  [882, 7],
  463,
  s,
  [882, 6],
  c,
  [430, 15],
  s,
  [882, 5],
  434,
  c,
  [434, 3],
  s,
  [882, 5],
  c,
  [20906, 1139],
  673,
  435,
  791,
  792,
  788,
  789,
  790,
  c,
  [386, 379],
  675,
  435,
  794,
  802,
  801,
  799,
  796,
  797,
  798,
  795,
  800,
  s,
  [618, 348],
  805,
  s,
  [618, 27],
  804,
  808,
  809,
  s,
  [667, 433],
  653,
  s,
  [667, 8],
  810,
  s,
  [866, 61],
  580,
  s,
  [866, 13],
  s,
  [867, 61],
  580,
  s,
  [867, 13],
  s,
  [881, 5],
  585,
  881,
  881,
  c,
  [8988, 5],
  881,
  881,
  582,
  s,
  [881, 45],
  580,
  881,
  581,
  s,
  [881, 11],
  s,
  [885, 4],
  591,
  585,
  885,
  885,
  c,
  [9063, 8],
  s,
  [885, 3],
  609,
  s,
  [885, 3],
  605,
  s,
  [885, 8],
  606,
  s,
  [885, 16],
  c,
  [9085, 7],
  s,
  [885, 5],
  c,
  [9090, 3],
  885,
  c,
  [9090, 3],
  s,
  [885, 7],
  s,
  [886, 4],
  591,
  585,
  886,
  886,
  c,
  [75, 8],
  s,
  [886, 3],
  609,
  s,
  [886, 3],
  605,
  s,
  [886, 8],
  606,
  s,
  [886, 16],
  c,
  [75, 7],
  s,
  [886, 5],
  c,
  [75, 3],
  886,
  c,
  [75, 3],
  s,
  [886, 7],
  811,
  s,
  [752, 6],
  533,
  752,
  532,
  s,
  [752, 68],
  813,
  c,
  [9718, 12],
  c,
  [10510, 16],
  422,
  c,
  [22218, 4],
  c,
  [22217, 11],
  s,
  [369, 4],
  s,
  [756, 16],
  s,
  [369, 4],
  397,
  s,
  [339, 382],
  s,
  [757, 6],
  533,
  757,
  532,
  s,
  [757, 68],
  440,
  627,
  816,
  c,
  [3342, 759],
  819,
  606,
  606,
  635,
  s,
  [606, 4],
  533,
  606,
  532,
  s,
  [606, 42],
  c,
  [50, 5],
  s,
  [606, 22],
  440,
  820,
  825,
  c,
  [462, 361],
  828,
  463,
  824,
  c,
  [464, 3],
  822,
  823,
  c,
  [466, 14],
  s,
  [859, 16],
  832,
  s,
  [859, 3],
  833,
  834,
  831,
  s,
  [859, 4],
  836,
  830,
  s,
  [859, 52],
  468,
  840,
  c,
  [1839, 21],
  723,
  c,
  [1840, 7],
  s,
  [532, 17],
  842,
  s,
  [532, 59],
  843,
  844,
  s,
  [468, 4],
  c,
  [1041, 380],
  690,
  855,
  856,
  857,
  854,
  858,
  853,
  852,
  c,
  [24136, 364],
  c,
  [1810, 18],
  703,
  865,
  866,
  c,
  [381, 343],
  c,
  [379, 13],
  c,
  [378, 16],
  440,
  709,
  c,
  [5909, 1108],
  877,
  c,
  [381, 29],
  872,
  873,
  874,
  c,
  [28339, 1522],
  823,
  823,
  883,
  s,
  [823, 77],
  c,
  [460, 380],
  468,
  s,
  [837, 25],
  658,
  s,
  [837, 80],
  c,
  [81, 56],
  468,
  889,
  890,
  468,
  468,
  c,
  [15620, 18],
  c,
  [566, 380],
  895,
  697,
  896,
  591,
  585,
  897,
  611,
  c,
  [6792, 26],
  898,
  385,
  s,
  [900, 4, 1],
  c,
  [419, 380],
  s,
  [476, 3],
  906,
  c,
  [811, 3],
  907,
  c,
  [15384, 344],
  s,
  [469, 3],
  912,
  469,
  915,
  914,
  13,
  c,
  [352, 330],
  622,
  c,
  [352, 12],
  c,
  [17698, 4],
  45,
  919,
  c,
  [701, 344],
  921,
  c,
  [1434, 380],
  923,
  924,
  925,
  s,
  [416, 3],
  926,
  s,
  [416, 8],
  c,
  [395, 380],
  940,
  934,
  932,
  933,
  s,
  [935, 5, 1],
  930,
  931,
  941,
  942,
  943,
  s,
  [992, 13],
  945,
  s,
  [572, 11],
  947,
  s,
  [572, 5],
  956,
  c,
  [1166, 214],
  958,
  c,
  [1166, 84],
  496,
  c,
  [1166, 3],
  489,
  352,
  497,
  c,
  [1166, 5],
  498,
  c,
  [1166, 3],
  495,
  364,
  c,
  [423, 4],
  c,
  [1166, 4],
  492,
  374,
  375,
  c,
  [423, 3],
  c,
  [38971, 13],
  485,
  952,
  953,
  466,
  518,
  c,
  [409, 12],
  s,
  [589, 50],
  964,
  s,
  [589, 27],
  c,
  [18005, 308],
  c,
  [18004, 6],
  859,
  859,
  967,
  c,
  [8080, 80],
  859,
  859,
  604,
  604,
  662,
  s,
  [604, 6],
  970,
  s,
  [604, 70],
  817,
  817,
  665,
  s,
  [817, 76],
  c,
  [159, 9],
  s,
  [604, 72],
  c,
  [79, 156],
  845,
  845,
  674,
  s,
  [845, 22],
  673,
  s,
  [845, 4],
  672,
  s,
  [845, 52],
  670,
  c,
  [81, 78],
  c,
  [4255, 105],
  c,
  [80, 135],
  667,
  666,
  c,
  [82, 80],
  s,
  [928, 7],
  970,
  s,
  [928, 68],
  972,
  s,
  [868, 5],
  585,
  s,
  [868, 4],
  c,
  [4090, 3],
  868,
  868,
  582,
  s,
  [868, 45],
  580,
  868,
  581,
  s,
  [868, 11],
  s,
  [869, 5],
  585,
  s,
  [869, 4],
  c,
  [75, 3],
  869,
  869,
  582,
  s,
  [869, 45],
  580,
  869,
  581,
  s,
  [869, 11],
  s,
  [870, 12],
  588,
  870,
  870,
  582,
  s,
  [870, 45],
  580,
  870,
  581,
  s,
  [870, 11],
  s,
  [871, 12],
  588,
  871,
  871,
  582,
  s,
  [871, 45],
  580,
  871,
  581,
  s,
  [871, 11],
  s,
  [872, 12],
  588,
  872,
  872,
  582,
  s,
  [872, 45],
  580,
  872,
  581,
  s,
  [872, 11],
  s,
  [873, 15],
  582,
  s,
  [873, 45],
  580,
  873,
  581,
  s,
  [873, 11],
  s,
  [874, 4],
  585,
  874,
  874,
  c,
  [4539, 5],
  582,
  s,
  [874, 3],
  609,
  s,
  [874, 3],
  605,
  s,
  [874, 8],
  606,
  s,
  [874, 16],
  608,
  c,
  [4563, 3],
  s,
  [874, 5],
  580,
  874,
  581,
  874,
  601,
  s,
  [874, 9],
  s,
  [875, 4],
  585,
  875,
  875,
  c,
  [69, 6],
  s,
  [875, 3],
  609,
  s,
  [875, 3],
  605,
  s,
  [875, 8],
  606,
  s,
  [875, 16],
  c,
  [69, 4],
  s,
  [875, 5],
  580,
  875,
  581,
  875,
  601,
  s,
  [875, 9],
  s,
  [876, 4],
  585,
  876,
  876,
  c,
  [69, 6],
  s,
  [876, 3],
  609,
  s,
  [876, 3],
  605,
  s,
  [876, 8],
  606,
  s,
  [876, 16],
  c,
  [69, 4],
  s,
  [876, 5],
  580,
  876,
  581,
  876,
  601,
  s,
  [876, 9],
  s,
  [877, 4],
  585,
  877,
  877,
  c,
  [69, 6],
  s,
  [877, 3],
  609,
  s,
  [877, 3],
  605,
  s,
  [877, 8],
  606,
  s,
  [877, 16],
  c,
  [69, 4],
  s,
  [877, 5],
  580,
  877,
  581,
  877,
  601,
  s,
  [877, 9],
  s,
  [878, 4],
  585,
  878,
  878,
  c,
  [69, 6],
  s,
  [878, 3],
  609,
  s,
  [878, 3],
  605,
  s,
  [878, 8],
  606,
  s,
  [878, 16],
  c,
  [69, 4],
  s,
  [878, 5],
  580,
  878,
  581,
  878,
  601,
  s,
  [878, 9],
  s,
  [879, 4],
  585,
  879,
  879,
  c,
  [69, 6],
  s,
  [879, 3],
  609,
  s,
  [879, 3],
  605,
  s,
  [879, 8],
  606,
  s,
  [879, 16],
  c,
  [69, 4],
  s,
  [879, 5],
  580,
  879,
  581,
  879,
  601,
  s,
  [879, 9],
  s,
  [880, 5],
  585,
  880,
  880,
  c,
  [70, 5],
  880,
  880,
  582,
  s,
  [880, 45],
  580,
  880,
  581,
  s,
  [880, 11],
  s,
  [883, 4],
  591,
  585,
  883,
  883,
  c,
  [5029, 8],
  s,
  [883, 3],
  609,
  s,
  [883, 3],
  605,
  s,
  [883, 8],
  606,
  s,
  [883, 16],
  c,
  [5058, 7],
  s,
  [883, 5],
  c,
  [5063, 3],
  883,
  c,
  [5063, 3],
  s,
  [883, 7],
  s,
  [884, 4],
  591,
  585,
  884,
  884,
  c,
  [75, 8],
  s,
  [884, 3],
  609,
  s,
  [884, 3],
  605,
  s,
  [884, 8],
  606,
  s,
  [884, 14],
  596,
  884,
  c,
  [75, 7],
  s,
  [884, 5],
  c,
  [75, 3],
  884,
  c,
  [75, 3],
  s,
  [884, 7],
  s,
  [887, 5],
  585,
  887,
  887,
  c,
  [75, 5],
  887,
  887,
  582,
  973,
  887,
  887,
  609,
  s,
  [887, 27],
  608,
  s,
  [887, 8],
  580,
  887,
  581,
  s,
  [887, 10],
  c,
  [3379, 379],
  674,
  c,
  [7034, 380],
  676,
  435,
  976,
  c,
  [14073, 376],
  978,
  808,
  s,
  [891, 5],
  585,
  891,
  891,
  c,
  [1210, 5],
  891,
  891,
  582,
  980,
  891,
  891,
  609,
  s,
  [891, 27],
  608,
  s,
  [891, 8],
  580,
  891,
  581,
  s,
  [891, 10],
  c,
  [4589, 380],
  988,
  987,
  985,
  983,
  984,
  982,
  986,
  989,
  990,
  440,
  c,
  [10912, 375],
  c,
  [375, 375],
  c,
  [36959, 383],
  995,
  996,
  697,
  998,
  1000,
  999,
  1001,
  697,
  1002,
  966,
  1004,
  29,
  c,
  [1535, 362],
  828,
  c,
  [9779, 380],
  c,
  [381, 400],
  1009,
  679,
  679,
  c,
  [15925, 28],
  679,
  1010,
  1011,
  s,
  [846, 66],
  1012,
  s,
  [846, 12],
  s,
  [848, 66],
  1013,
  s,
  [848, 12],
  s,
  [849, 66],
  1014,
  s,
  [849, 12],
  s,
  [850, 66],
  1015,
  s,
  [850, 12],
  860,
  860,
  1016,
  s,
  [860, 76],
  1017,
  722,
  840,
  1020,
  c,
  [43215, 381],
  s,
  [540, 19],
  1023,
  s,
  [540, 55],
  1024,
  1025,
  c,
  [458, 380],
  s,
  [1027, 4, 1],
  c,
  [1272, 12],
  1031,
  c,
  [1273, 16],
  1032,
  1033,
  1034,
  c,
  [1304, 21],
  1036,
  c,
  [32, 7],
  1037,
  1048,
  1042,
  1040,
  1041,
  s,
  [1043, 5, 1],
  1054,
  1038,
  449,
  1049,
  1050,
  1051,
  1039,
  1053,
  c,
  [3643, 751],
  c,
  [375, 374],
  1058,
  c,
  [28918, 4],
  c,
  [1175, 10],
  1062,
  606,
  1061,
  c,
  [1208, 15],
  708,
  697,
  c,
  [32, 12],
  1063,
  c,
  [1239, 16],
  c,
  [14608, 379],
  c,
  [14989, 381],
  c,
  [381, 383],
  1067,
  c,
  [1207, 14],
  606,
  1068,
  c,
  [1175, 364],
  c,
  [412, 31],
  714,
  697,
  1070,
  c,
  [4098, 28],
  1071,
  697,
  1072,
  697,
  1073,
  697,
  c,
  [417, 380],
  1075,
  697,
  s,
  [1076, 6, 1],
  c,
  [11382, 17],
  1083,
  697,
  c,
  [32059, 381],
  1086,
  1087,
  c,
  [12932, 344],
  678,
  678,
  591,
  585,
  678,
  c,
  [1171, 8],
  678,
  609,
  678,
  678,
  c,
  [1174, 17],
  678,
  s,
  [575, 4],
  1090,
  c,
  [31712, 345],
  c,
  [1519, 380],
  1093,
  1094,
  s,
  [441, 3],
  533,
  532,
  s,
  [474, 3],
  s,
  [1096, 5, 1],
  1102,
  c,
  [740, 344],
  c,
  [13267, 14],
  1105,
  1106,
  1107,
  s,
  [391, 6],
  1109,
  s,
  [391, 9],
  c,
  [773, 380],
  s,
  [475, 3],
  1111,
  s,
  [475, 14],
  s,
  [477, 12],
  1112,
  s,
  [1114, 6, 1],
  s,
  [477, 6],
  s,
  [500, 4],
  c,
  [804, 343],
  s,
  [500, 3],
  1122,
  s,
  [500, 16],
  45,
  s,
  [500, 4],
  s,
  [505, 4],
  c,
  [372, 343],
  s,
  [505, 3],
  1126,
  s,
  [505, 15],
  45,
  s,
  [505, 4],
  c,
  [15950, 215],
  c,
  [14435, 129],
  485,
  1129,
  c,
  [14433, 14],
  c,
  [1103, 366],
  c,
  [1102, 5],
  c,
  [371, 371],
  c,
  [15537, 331],
  c,
  [17052, 17],
  c,
  [15541, 18],
  s,
  [570, 350],
  1138,
  s,
  [570, 21],
  s,
  [223, 360],
  1139,
  s,
  [223, 16],
  c,
  [53334, 375],
  632,
  s,
  [581, 6],
  1141,
  s,
  [581, 70],
  s,
  [585, 6],
  1142,
  s,
  [585, 70],
  s,
  [589, 50],
  1144,
  s,
  [589, 27],
  468,
  c,
  [16105, 9],
  1147,
  s,
  [604, 70],
  c,
  [35252, 346],
  s,
  [929, 7],
  1147,
  s,
  [929, 68],
  c,
  [21842, 760],
  s,
  [889, 5],
  585,
  889,
  889,
  c,
  [6415, 5],
  889,
  889,
  582,
  1151,
  889,
  889,
  609,
  s,
  [889, 27],
  608,
  s,
  [889, 8],
  580,
  889,
  581,
  s,
  [889, 10],
  s,
  [893, 5],
  585,
  893,
  893,
  c,
  [69, 5],
  893,
  893,
  582,
  1152,
  893,
  893,
  609,
  s,
  [893, 27],
  608,
  s,
  [893, 8],
  580,
  893,
  581,
  s,
  [893, 10],
  c,
  [898, 381],
  c,
  [14488, 1082],
  c,
  [22464, 48],
  s,
  [895, 4],
  585,
  895,
  895,
  c,
  [1579, 5],
  895,
  895,
  582,
  1157,
  895,
  895,
  609,
  s,
  [895, 27],
  608,
  s,
  [895, 8],
  580,
  895,
  581,
  s,
  [895, 10],
  1158,
  1159,
  c,
  [42369, 449],
  c,
  [38187, 246],
  c,
  [12758, 10],
  1163,
  c,
  [12758, 6],
  c,
  [17, 10],
  1164,
  c,
  [17, 6],
  1165,
  c,
  [9996, 334],
  c,
  [15670, 51],
  1167,
  s,
  [753, 6],
  533,
  753,
  532,
  s,
  [753, 68],
  627,
  1169,
  c,
  [14976, 367],
  1170,
  c,
  [462, 14],
  c,
  [62266, 3],
  1174,
  c,
  [3, 4],
  c,
  [4064, 760],
  1178,
  1179,
  1180,
  836,
  1182,
  836,
  836,
  468,
  469,
  1187,
  c,
  [390, 380],
  c,
  [12034, 21],
  1189,
  c,
  [10861, 7],
  1192,
  c,
  [10115, 344],
  1193,
  29,
  1195,
  c,
  [12411, 28],
  c,
  [2760, 315],
  c,
  [1100, 380],
  1061,
  c,
  [5417, 755],
  c,
  [1451, 316],
  c,
  [16952, 1124],
  c,
  [375, 3376],
  s,
  [743, 3],
  865,
  866,
  s,
  [743, 5],
  c,
  [383, 343],
  743,
  485,
  743,
  c,
  [385, 12],
  s,
  [743, 3],
  463,
  743,
  743,
  c,
  [390, 15],
  s,
  [1218, 4, -1],
  629,
  s,
  [727, 17],
  1039,
  727,
  s,
  [728, 17],
  1039,
  728,
  742,
  742,
  c,
  [9128, 6],
  s,
  [742, 9],
  1039,
  742,
  706,
  1062,
  707,
  c,
  [6026, 382],
  c,
  [10242, 694],
  1224,
  1225,
  1226,
  c,
  [698, 380],
  713,
  c,
  [20587, 381],
  1229,
  697,
  s,
  [845, 24],
  c,
  [30710, 58],
  c,
  [81, 80],
  c,
  [18855, 16],
  1233,
  591,
  585,
  c,
  [34414, 27],
  c,
  [71132, 4],
  1238,
  c,
  [10840, 4],
  c,
  [19280, 4],
  c,
  [603, 51],
  1241,
  c,
  [603, 328],
  s,
  [439, 4],
  c,
  [9197, 13],
  s,
  [439, 3],
  c,
  [428, 15],
  1242,
  c,
  [20431, 345],
  c,
  [51219, 380],
  1246,
  1247,
  472,
  c,
  [73747, 6],
  13,
  1250,
  c,
  [72294, 348],
  45,
  466,
  466,
  533,
  532,
  1252,
  s,
  [404, 6],
  1254,
  s,
  [404, 8],
  1255,
  s,
  [571, 3],
  c,
  [1141, 12],
  s,
  [571, 6],
  606,
  s,
  [571, 4],
  c,
  [1148, 15],
  s,
  [571, 4],
  c,
  [33734, 362],
  1257,
  1258,
  c,
  [364, 362],
  1261,
  c,
  [20779, 4],
  511,
  1263,
  511,
  1263,
  511,
  1263,
  s,
  [479, 20],
  1267,
  s,
  [479, 6],
  c,
  [1174, 344],
  498,
  498,
  1269,
  s,
  [498, 25],
  1270,
  c,
  [373, 346],
  1272,
  s,
  [498, 24],
  c,
  [21178, 371],
  c,
  [20818, 742],
  533,
  532,
  1277,
  s,
  [487, 7],
  422,
  c,
  [378, 343],
  s,
  [369, 3],
  1122,
  369,
  c,
  [371, 8],
  s,
  [369, 4],
  c,
  [23047, 7],
  1278,
  1279,
  945,
  945,
  635,
  c,
  [58138, 373],
  1280,
  468,
  468,
  s,
  [582, 6],
  1141,
  s,
  [582, 70],
  s,
  [586, 6],
  1283,
  s,
  [586, 70],
  1284,
  c,
  [19928, 346],
  s,
  [865, 61],
  580,
  865,
  581,
  s,
  [865, 11],
  s,
  [888, 5],
  585,
  888,
  888,
  c,
  [4004, 5],
  888,
  888,
  582,
  s,
  [888, 3],
  609,
  s,
  [888, 27],
  608,
  s,
  [888, 8],
  580,
  888,
  581,
  s,
  [888, 10],
  c,
  [7655, 760],
  s,
  [897, 5],
  585,
  897,
  897,
  c,
  [829, 5],
  897,
  897,
  582,
  1288,
  897,
  897,
  609,
  s,
  [897, 27],
  608,
  s,
  [897, 8],
  580,
  897,
  581,
  s,
  [897, 10],
  c,
  [17634, 10],
  1289,
  c,
  [17651, 16],
  1290,
  c,
  [17, 6],
  s,
  [892, 5],
  585,
  892,
  892,
  c,
  [103, 5],
  892,
  892,
  582,
  s,
  [892, 3],
  609,
  s,
  [892, 27],
  608,
  s,
  [892, 8],
  580,
  892,
  581,
  s,
  [892, 10],
  c,
  [8587, 1075],
  s,
  [910, 4],
  591,
  585,
  910,
  910,
  c,
  [6080, 8],
  s,
  [910, 3],
  609,
  s,
  [910, 3],
  605,
  s,
  [910, 8],
  606,
  s,
  [910, 16],
  c,
  [6099, 7],
  s,
  [910, 5],
  580,
  581,
  910,
  601,
  s,
  [910, 7],
  1294,
  1295,
  c,
  [1149, 760],
  1298,
  c,
  [17247, 28],
  s,
  [668, 433],
  672,
  s,
  [668, 8],
  c,
  [34610, 381],
  1300,
  1301,
  c,
  [383, 381],
  1302,
  680,
  680,
  c,
  [1237, 28],
  680,
  681,
  681,
  c,
  [31, 28],
  681,
  1303,
  c,
  [30, 21],
  721,
  c,
  [31368, 387],
  543,
  c,
  [7438, 344],
  543,
  c,
  [726, 380],
  1308,
  1309,
  689,
  c,
  [1168, 28],
  700,
  1062,
  c,
  [30, 13],
  701,
  c,
  [31, 15],
  702,
  c,
  [4492, 10],
  c,
  [4491, 6],
  729,
  729,
  1042,
  729,
  729,
  c,
  [17, 3],
  s,
  [729, 9],
  1039,
  729,
  730,
  730,
  1042,
  730,
  730,
  c,
  [19, 3],
  s,
  [730, 9],
  1039,
  730,
  s,
  [731, 7],
  1045,
  s,
  [731, 9],
  1039,
  731,
  s,
  [732, 7],
  1045,
  s,
  [732, 9],
  1039,
  732,
  s,
  [733, 7],
  1045,
  s,
  [733, 9],
  1039,
  733,
  s,
  [734, 17],
  1039,
  734,
  735,
  c,
  [130, 6],
  1054,
  735,
  735,
  449,
  1039,
  735,
  736,
  c,
  [13, 7],
  736,
  736,
  449,
  1039,
  736,
  737,
  c,
  [13, 7],
  737,
  737,
  449,
  1039,
  737,
  738,
  c,
  [13, 7],
  738,
  738,
  449,
  1039,
  738,
  739,
  c,
  [13, 7],
  739,
  739,
  449,
  1039,
  739,
  740,
  c,
  [13, 7],
  740,
  740,
  449,
  1039,
  740,
  741,
  741,
  c,
  [14, 6],
  s,
  [741, 9],
  1039,
  741,
  1311,
  1314,
  1313,
  1312,
  1315,
  710,
  c,
  [263, 12],
  710,
  c,
  [294, 16],
  711,
  c,
  [293, 13],
  711,
  c,
  [30, 15],
  1316,
  712,
  697,
  1317,
  c,
  [356, 28],
  c,
  [9748, 15],
  1319,
  s,
  [573, 3],
  c,
  [47, 13],
  573,
  c,
  [48, 15],
  s,
  [57, 16],
  1320,
  s,
  [57, 20],
  c,
  [852, 380],
  s,
  [473, 3],
  577,
  1322,
  1323,
  1324,
  915,
  914,
  1326,
  s,
  [534, 9],
  1328,
  s,
  [534, 4],
  c,
  [404, 380],
  1337,
  c,
  [380, 49],
  1338,
  c,
  [380, 163],
  1339,
  c,
  [380, 94],
  1340,
  c,
  [380, 70],
  s,
  [478, 12],
  c,
  [7956, 7],
  s,
  [478, 6],
  c,
  [10597, 362],
  c,
  [362, 362],
  1345,
  c,
  [738, 7],
  1344,
  1346,
  c,
  [372, 362],
  c,
  [3482, 343],
  466,
  518,
  496,
  496,
  1349,
  s,
  [496, 25],
  c,
  [65724, 688],
  496,
  496,
  1354,
  c,
  [715, 368],
  635,
  533,
  532,
  s,
  [489, 4],
  c,
  [351, 343],
  s,
  [489, 3],
  1122,
  s,
  [489, 15],
  45,
  c,
  [367, 303],
  c,
  [33161, 45],
  c,
  [2164, 14],
  1361,
  1362,
  468,
  s,
  [890, 5],
  585,
  890,
  890,
  c,
  [4524, 5],
  890,
  890,
  582,
  s,
  [890, 3],
  609,
  s,
  [890, 27],
  608,
  s,
  [890, 8],
  580,
  890,
  581,
  s,
  [890, 10],
  s,
  [894, 5],
  585,
  894,
  894,
  c,
  [69, 5],
  894,
  894,
  582,
  s,
  [894, 3],
  609,
  s,
  [894, 27],
  608,
  s,
  [894, 8],
  580,
  894,
  581,
  s,
  [894, 10],
  c,
  [52555, 1140],
  s,
  [896, 5],
  585,
  896,
  896,
  c,
  [1209, 5],
  896,
  896,
  582,
  s,
  [896, 3],
  609,
  s,
  [896, 27],
  608,
  s,
  [896, 8],
  580,
  896,
  581,
  s,
  [896, 10],
  s,
  [911, 4],
  591,
  585,
  911,
  911,
  c,
  [5871, 8],
  s,
  [911, 3],
  609,
  s,
  [911, 3],
  605,
  s,
  [911, 8],
  606,
  s,
  [911, 16],
  c,
  [5899, 7],
  s,
  [911, 5],
  580,
  581,
  911,
  601,
  s,
  [911, 7],
  1367,
  1295,
  c,
  [9928, 315],
  s,
  [914, 5],
  585,
  914,
  914,
  c,
  [389, 5],
  914,
  914,
  582,
  s,
  [914, 3],
  609,
  s,
  [914, 27],
  608,
  s,
  [914, 8],
  580,
  914,
  581,
  s,
  [914, 10],
  s,
  [916, 5],
  585,
  916,
  916,
  c,
  [69, 5],
  916,
  916,
  582,
  s,
  [916, 3],
  609,
  s,
  [916, 27],
  608,
  s,
  [916, 8],
  580,
  916,
  581,
  s,
  [916, 10],
  966,
  29,
  c,
  [6441, 21],
  s,
  [720, 3],
  c,
  [6396, 7],
  545,
  545,
  1371,
  s,
  [545, 3],
  1372,
  c,
  [6479, 28],
  c,
  [20627, 375],
  1374,
  1375,
  c,
  [898, 315],
  c,
  [6696, 14],
  c,
  [18023, 345],
  s,
  [440, 3],
  c,
  [1082, 13],
  s,
  [440, 3],
  c,
  [1085, 15],
  1381,
  1380,
  1382,
  c,
  [382, 344],
  1384,
  c,
  [345, 344],
  s,
  [403, 3],
  c,
  [726, 12],
  s,
  [403, 4],
  606,
  s,
  [403, 3],
  c,
  [730, 15],
  s,
  [403, 4],
  s,
  [390, 3],
  1388,
  s,
  [390, 12],
  s,
  [394, 4],
  c,
  [59, 12],
  s,
  [394, 5],
  606,
  s,
  [394, 3],
  c,
  [60, 15],
  s,
  [394, 4],
  440,
  1389,
  c,
  [30807, 383],
  56,
  56,
  1390,
  s,
  [56, 45],
  220,
  220,
  1391,
  s,
  [220, 45],
  c,
  [83375, 18],
  1392,
  s,
  [315, 29],
  c,
  [6889, 9],
  1394,
  c,
  [3462, 380],
  c,
  [7269, 362],
  1397,
  c,
  [1728, 344],
  1399,
  903,
  1400,
  1401,
  c,
  [70974, 659],
  1404,
  1401,
  950,
  950,
  c,
  [663, 315],
  1405,
  1406,
  568,
  568,
  1408,
  1409,
  s,
  [898, 5],
  585,
  898,
  898,
  c,
  [2660, 5],
  898,
  898,
  582,
  s,
  [898, 3],
  609,
  s,
  [898, 27],
  608,
  s,
  [898, 8],
  580,
  898,
  581,
  s,
  [898, 10],
  s,
  [915, 5],
  585,
  915,
  915,
  c,
  [69, 5],
  915,
  915,
  582,
  s,
  [915, 3],
  609,
  s,
  [915, 27],
  608,
  s,
  [915, 8],
  580,
  915,
  581,
  s,
  [915, 10],
  s,
  [917, 5],
  585,
  917,
  917,
  c,
  [69, 5],
  917,
  917,
  582,
  s,
  [917, 3],
  609,
  s,
  [917, 27],
  608,
  s,
  [917, 8],
  580,
  917,
  581,
  s,
  [917, 10],
  1410,
  s,
  [966, 4],
  29,
  1412,
  744,
  c,
  [11511, 10],
  744,
  744,
  c,
  [11513, 5],
  c,
  [30167, 690],
  1415,
  1295,
  1416,
  572,
  947,
  c,
  [22009, 6],
  s,
  [533, 3],
  1419,
  s,
  [533, 10],
  1420,
  c,
  [11051, 380],
  c,
  [7245, 760],
  1424,
  c,
  [2758, 344],
  s,
  [513, 4],
  c,
  [5091, 12],
  s,
  [513, 6],
  606,
  s,
  [513, 12],
  c,
  [5101, 15],
  s,
  [513, 4],
  c,
  [779, 380],
  1427,
  903,
  c,
  [780, 344],
  1429,
  1430,
  1401,
  c,
  [41706, 372],
  c,
  [10384, 358],
  1433,
  549,
  1437,
  1435,
  1436,
  c,
  [1464, 380],
  745,
  c,
  [4117, 10],
  745,
  745,
  c,
  [4117, 5],
  1439,
  1295,
  c,
  [78305, 689],
  1192,
  1443,
  697,
  1444,
  697,
  c,
  [4097, 380],
  1446,
  903,
  1447,
  697,
  c,
  [733, 344],
  1449,
  c,
  [1823, 51],
  1454,
  c,
  [1823, 216],
  1453,
  c,
  [348, 27],
  1452,
  c,
  [4446, 134],
  c,
  [380, 709],
  544,
  697,
  s,
  [544, 4],
  s,
  [572, 3],
  906,
  572,
  947,
  1459,
  1388,
  s,
  [526, 4],
  1461,
  s,
  [526, 22],
  1462,
  1401,
  561,
  1464,
  440,
  s,
  [302, 4],
  429,
  430,
  s,
  [302, 5],
  c,
  [434, 293],
  c,
  [433, 50],
  302,
  436,
  485,
  302,
  c,
  [435, 12],
  s,
  [302, 5],
  463,
  302,
  302,
  c,
  [441, 15],
  s,
  [302, 5],
  434,
  435,
  s,
  [274, 13],
  1467,
  274,
  1466,
  s,
  [274, 18],
  s,
  [57, 17],
  1468,
  s,
  [57, 17],
  c,
  [4992, 10],
  1470,
  609,
  1469,
  c,
  [11952, 17],
  561,
  1464,
  561,
  1464,
  1473,
  1474,
  1477,
  1476,
  1475,
  1478,
  c,
  [3518, 380],
  1480,
  1481,
  c,
  [1317, 296],
  c,
  [382, 84],
  1483,
  c,
  [12753, 28]
])
}),
defaultActions: bda({
  idx: u([
  s,
  [3, 5, 1],
  20,
  31,
  32,
  38,
  41,
  s,
  [45, 346, 1],
  393,
  395,
  398,
  408,
  414,
  415,
  421,
  422,
  425,
  427,
  428,
  s,
  [436, 4, 1],
  441,
  442,
  446,
  447,
  449,
  s,
  [452, 5, 1],
  460,
  461,
  462,
  465,
  s,
  [468, 7, 1],
  477,
  s,
  [482, 6, 1],
  s,
  [518, 5, 1],
  527,
  528,
  531,
  541,
  s,
  [545, 5, 1],
  552,
  554,
  556,
  557,
  560,
  562,
  568,
  571,
  579,
  603,
  604,
  610,
  611,
  618,
  624,
  625,
  626,
  631,
  633,
  656,
  s,
  [658, 4, 1],
  663,
  664,
  668,
  669,
  671,
  675,
  s,
  [681, 9, 1],
  692,
  695,
  696,
  699,
  702,
  703,
  705,
  710,
  712,
  716,
  717,
  718,
  721,
  s,
  [725, 4, 1],
  s,
  [731, 4, 1],
  s,
  [737, 5, 1],
  s,
  [744, 5, 1],
  s,
  [753, 5, 1],
  760,
  761,
  762,
  766,
  769,
  795,
  797,
  798,
  799,
  802,
  805,
  806,
  807,
  811,
  812,
  813,
  816,
  817,
  820,
  826,
  829,
  831,
  835,
  839,
  s,
  [852, 8, 1],
  864,
  886,
  887,
  895,
  896,
  897,
  900,
  902,
  909,
  914,
  915,
  s,
  [917, 6, 1],
  924,
  s,
  [925, 4, 2],
  s,
  [932, 13, 1],
  955,
  960,
  961,
  966,
  968,
  979,
  s,
  [982, 4, 1],
  988,
  994,
  998,
  999,
  1001,
  1002,
  1005,
  1009,
  1019,
  1022,
  s,
  [1027, 4, 1],
  1032,
  1034,
  1037,
  1058,
  1067,
  1071,
  1072,
  1073,
  1075,
  1076,
  1078,
  1079,
  1081,
  1083,
  1087,
  1088,
  1091,
  1095,
  1102,
  1103,
  1104,
  1106,
  1107,
  1119,
  1121,
  1124,
  1125,
  1132,
  1133,
  1137,
  1146,
  1148,
  1162,
  1165,
  1168,
  1169,
  1171,
  s,
  [1178, 7, 1],
  1186,
  1187,
  1190,
  1191,
  1195,
  1201,
  1218,
  1219,
  1220,
  1224,
  1225,
  1226,
  1229,
  1230,
  1231,
  1233,
  s,
  [1235, 5, 1],
  1243,
  1248,
  1249,
  1251,
  s,
  [1262, 5, 1],
  1273,
  1274,
  1275,
  1278,
  1280,
  1284,
  1285,
  1294,
  1298,
  s,
  [1300, 4, 1],
  1306,
  1308,
  1309,
  1310,
  1314,
  1316,
  1317,
  1319,
  1326,
  1327,
  1331,
  s,
  [1333, 4, 1],
  1341,
  1343,
  1347,
  1352,
  1357,
  1359,
  1361,
  1362,
  1367,
  1368,
  1372,
  1377,
  1378,
  1379,
  1381,
  1383,
  1386,
  1389,
  1393,
  1396,
  1399,
  1400,
  1404,
  1407,
  1409,
  1410,
  1415,
  1417,
  1418,
  1421,
  s,
  [1427, 6, 1],
  1439,
  s,
  [1441, 4, 1],
  1446,
  1449,
  1451,
  1458,
  1459,
  1460,
  1462,
  1463,
  s,
  [1466, 7, 1],
  1475,
  1476,
  s,
  [1480, 4, 1]
]),
  goto: u([
  s,
  [4, 4, 1],
  356,
  2,
  368,
  369,
  963,
  373,
  619,
  620,
  621,
  s,
  [9, 343, 1],
  380,
  950,
  3,
  409,
  958,
  959,
  358,
  359,
  936,
  941,
  862,
  925,
  750,
  751,
  615,
  754,
  755,
  761,
  762,
  667,
  s,
  [636, 5, 1],
  645,
  646,
  647,
  772,
  648,
  649,
  634,
  s,
  [597, 4, 1],
  776,
  s,
  [785, 6, 1],
  624,
  820,
  821,
  826,
  827,
  515,
  516,
  613,
  521,
  362,
  976,
  363,
  407,
  410,
  412,
  414,
  972,
  973,
  985,
  982,
  375,
  968,
  939,
  900,
  902,
  671,
  654,
  922,
  758,
  759,
  760,
  641,
  642,
  811,
  836,
  831,
  830,
  813,
  812,
  810,
  835,
  814,
  841,
  839,
  614,
  607,
  608,
  953,
  s,
  [625, 5, 1],
  381,
  948,
  418,
  437,
  615,
  522,
  457,
  406,
  415,
  983,
  411,
  433,
  942,
  987,
  988,
  366,
  367,
  388,
  937,
  938,
  863,
  s,
  [590, 5, 1],
  s,
  [805, 5, 1],
  815,
  818,
  819,
  824,
  825,
  842,
  622,
  623,
  832,
  864,
  899,
  904,
  906,
  908,
  923,
  617,
  918,
  715,
  903,
  616,
  615,
  686,
  687,
  764,
  630,
  643,
  847,
  851,
  718,
  s,
  [691, 8, 1],
  725,
  833,
  834,
  419,
  517,
  609,
  383,
  946,
  442,
  462,
  463,
  464,
  615,
  461,
  456,
  413,
  979,
  981,
  434,
  969,
  669,
  653,
  s,
  [655, 12, 1],
  971,
  487,
  773,
  774,
  595,
  601,
  919,
  901,
  905,
  907,
  909,
  924,
  920,
  684,
  685,
  763,
  668,
  965,
  770,
  719,
  771,
  s,
  [778, 4, 2],
  s,
  [792, 4, 1],
  800,
  802,
  803,
  804,
  603,
  816,
  843,
  844,
  828,
  962,
  384,
  949,
  438,
  454,
  980,
  943,
  970,
  990,
  991,
  509,
  499,
  481,
  501,
  483,
  485,
  562,
  602,
  930,
  682,
  716,
  688,
  765,
  631,
  s,
  [852, 7, 1],
  644,
  717,
  538,
  539,
  775,
  726,
  748,
  704,
  705,
  797,
  798,
  799,
  822,
  840,
  838,
  610,
  s,
  [352, 4, 1],
  436,
  443,
  458,
  459,
  465,
  506,
  510,
  507,
  508,
  s,
  [480, 4, 2],
  569,
  587,
  596,
  931,
  912,
  921,
  766,
  768,
  769,
  861,
  542,
  529,
  791,
  699,
  749,
  796,
  801,
  382,
  670,
  370,
  392,
  s,
  [395, 4, 1],
  490,
  492,
  494,
  578,
  488,
  565,
  588,
  583,
  913,
  683,
  531,
  371,
  574,
  445,
  468,
  471,
  535,
  399,
  491,
  493,
  497,
  502,
  504,
  564,
  584,
  767,
  746,
  470,
  460,
  393,
  495,
  579,
  580,
  503,
  563,
  566,
  747,
  536,
  537,
  401,
  400,
  512,
  541,
  550,
  467,
  402,
  523,
  567,
  546,
  s,
  [552, 5, 1],
  547,
  548,
  558,
  559,
  557,
  560,
  551,
  525
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack
    var lstack = new Array(128);        // location stack
    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks
    var yyloc;

    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 1484 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };


    // shallow clone objects, straight copy of simple `src` values
    // e.g. `lexer.yytext` MAY be a complex value object,
    // rather than a simple string/value.
    function shallow_copy(src) {
        if (typeof src === 'object') {
            var dst = {};
            for (var k in src) {
                if (Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
            return dst;
        }
        return src;
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }
    function copy_yylloc(loc) {
        var rv = shallow_copy(loc);
        if (rv && rv.range) {
            rv.range = rv.range.slice(0);
        }
        return rv;
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };

    // merge yylloc info into a new yylloc instance.
    //
    // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
    //
    // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
    // case these override the corresponding first/last indexes.
    //
    // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
    // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
    // yylloc info.
    //
    // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
    this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
        var i1 = first_index | 0,
            i2 = last_index | 0;
        var l1 = first_yylloc,
            l2 = last_yylloc;
        var rv;

        // rules:
        // - first/last yylloc entries override first/last indexes

        if (!l1) {
            if (first_index != null) {
                for (var i = i1; i <= i2; i++) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
        }

        if (!l2) {
            if (last_index != null) {
                for (var i = i2; i >= i1; i--) {
                    l2 = lstack[i];
                    if (l2) {
                        break;
                    }
                }
            }
        }

        // - detect if an epsilon rule is being processed and act accordingly:
        if (!l1 && first_index == null) {
            // epsilon rule span merger. With optional look-ahead in l2.
            if (!dont_look_back) {
                for (var i = (i1 || sp) - 1; i >= 0; i--) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
            if (!l1) {
                if (!l2) {
                    // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                    // without look-ahead and no preceding terms and/or `dont_look_back` set:
                    // in that case we ca do nothing but return NULL/UNDEFINED:
                    return undefined;
                } else {
                    // shallow-copy L2: after all, we MAY be looking
                    // at unconventional yylloc info objects...
                    rv = shallow_copy(l2);
                    if (rv.range) {
                        // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                        rv.range = rv.range.slice(0);
                    }
                    return rv;
                }
            } else {
                // shallow-copy L1, then adjust first col/row 1 column past the end.
                rv = shallow_copy(l1);
                rv.first_line = rv.last_line;
                rv.first_column = rv.last_column;
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                    rv.range[0] = rv.range[1];
                }

                if (l2) {
                    // shallow-mixin L2, then adjust last col/row accordingly.
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }
                return rv;
            }
        }

        if (!l1) {
            l1 = l2;
            l2 = null;
        }
        if (!l1) {
            return undefined;
        }

        // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
        // at unconventional yylloc info objects...
        rv = shallow_copy(l1);

        // first_line: ...,
        // first_column: ...,
        // last_line: ...,
        // last_column: ...,
        if (rv.range) {
            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
            rv.range = rv.range.slice(0);
        }

        if (l2) {
            shallow_copy_noclobber(rv, l2);
            rv.last_line = l2.last_line;
            rv.last_column = l2.last_column;
            if (rv.range && l2.range) {
                rv.range[1] = l2.range[1];
            }
        }

        return rv;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: copy_yylloc(lexer.yylloc),
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 

        yyloc = lexer.yylloc;
        lstack[sp] = yyloc;
        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;
                lstack[sp] = copy_yylloc(lexer.yylloc);
                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:



                yyloc = lexer.yylloc;
                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, yyloc, newState, sp - 1, vstack, lstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;
                lstack[sp] = yyval._$;
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... true
//   location assignment: ............. true
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
    done: false,                                /// INTERNAL USE ONLY  
    _backtrack: false,                          /// INTERNAL USE ONLY  
    _input: '',                                 /// INTERNAL USE ONLY  
    _more: false,                               /// INTERNAL USE ONLY  
    _signaled_error_token: false,               /// INTERNAL USE ONLY  
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        } 
        // else: keep `this._input` as is.  
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column; 
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it 
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead. 
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch. 
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true,
      reentrant: true,
      bisonBridge: true,
      bisonLocations: true,
      neverInteractive: true,
      nodefault: true,
      noinput: true,
      nounput: true,
      noyywrap: true,
      noyyalloc: true,
      noyyrealloc: true,
      noyyfree: true,
      warn: true,
      prefix: 'core_yy'
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;

      /*
       * GUC variables.  This is a DIRECT violation of the warning given at the
       * head of gram.y, ie flex/bison code must not depend on any GUC variables;
       * as such, changing their values can induce very unintuitive behavior.
       * But we shall have to live with it until we can remove these variables.
       */
      const backslash_quote = 2;  // BACKSLASH_QUOTE_SAFE_ENCODING 

      const escape_string_warning = true;
      const standard_conforming_strings = true;

      function process_integer_literal(token, lval) {
        let val = parseInt(token);

        if (val.toString().length < token.length) {
          lval.str = token;
          return 'FCONST';
        }

        lval.ival = val;
        return 'ICONST';
      }

      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        /*! Conditions:: INITIAL */
        /*! Rule::       {whitespace} */
        /* ignore */
        break;

      case 1:
        /*! Conditions:: INITIAL */
        /*! Rule::       {xcstart} */
        yy.extra.xcdepth = 0;

        this.begin('xc');
        this.less(2);
        break;

      case 2:
        /*! Conditions:: xc */
        /*! Rule::       {xcstart} */
        yy.extra.xcdepth++;

        /* Put back any characters past slash-star; see above */
        this.less(2);

        break;

      case 3:
        /*! Conditions:: xc */
        /*! Rule::       {xcstop} */
        {
          if (yy.extra.xcdepth <= 0) {
            this.popState();
          } else {
            yy.extra.xcdepth--;
          }
        }

        break;

      case 4:
        /*! Conditions:: xc */
        /*! Rule::       {xcinside} */
        /* ignore */
        break;

      case 5:
        /*! Conditions:: xc */
        /*! Rule::       {op_chars} */
        /* ignore */
        break;

      case 6:
        /*! Conditions:: xc */
        /*! Rule::       \*+ */
        /* ignore */
        break;

      case 7:
        /*! Conditions:: xc */
        /*! Rule::       $ */
        throw new Error('unterminated /* comment');

        break;

      case 8:
        /*! Conditions:: INITIAL */
        /*! Rule::       {xqstart} */
        yy.extra.warn_on_first_escape = true;

        yy.extra.saw_non_ascii = false;

        // SET_YYLLOC();
        if (yy.extra.standard_conforming_strings)
          this.begin('xq');
        else
          this.begin('xe');

        yy.extra.literalbuf = '';
        yy.extra.literallen = 0;
        break;

      case 9:
        /*! Conditions:: INITIAL */
        /*! Rule::       {xestart} */
        yy.extra.warn_on_first_escape = false;

        yy.extra.saw_non_ascii = false;

        // SET_YYLLOC();
        this.begin('xe');

        yy.extra.literalbuf = '';
        yy.extra.literallen = 0;
        break;

      case 10:
        /*! Conditions:: INITIAL */
        /*! Rule::       {xusstart} */
        // SET_YYLLOC();
        if (!yy.extra.standard_conforming_strings) ereport(
          ERROR,
          (errcode(ERRCODE_FEATURE_NOT_SUPPORTED), errmsg('unsafe use of string constant with Unicode escapes'), errdetail(
            'String constants with Unicode escapes cannot be used when standard_conforming_strings is off.'
          ), lexer_errposition())
        );

        this.begin('xus');
        yy.extra.literallen = 0;
        yy.extra.literalbuf = '';
        break;

      case 11:
        /*! Conditions:: xq xe */
        /*! Rule::       {quotestop} */
        this.less(1);

        this.popState();

        /*
         * check that the data remains valid if it might have been
         * made invalid by unescaping any chars.
         */
        // if (yy.extra.saw_non_ascii)
        //  pg_verifymbstr(yy.extra.literalbuf,
        //           yy.extra.literallen,
        //           false);
        yy.lval.str = yy.extra.literalbuf;

        return 417;
        break;

      case 12:
        /*! Conditions:: xq xe */
        /*! Rule::       {quotefail} */
        this.less(1);

        this.popState();

        /*
         * check that the data remains valid if it might have been
         * made invalid by unescaping any chars.
         */
        // if (yy.extra.saw_non_ascii)
        //  pg_verifymbstr(yy.extra.literalbuf,
        //           yy.extra.literallen,
        //           false);
        yy.lval.str = yy.extra.literalbuf;

        return 417;
        break;

      case 13:
        /*! Conditions:: xus */
        /*! Rule::       {quotestop} */
        /* throw back all but the quote */
        this.less(1);

        /* xusend state looks for possible UESCAPE */
        this.begin('xusend');

        break;

      case 14:
        /*! Conditions:: xus */
        /*! Rule::       {quotefail} */
        /* throw back all but the quote */
        this.less(1);

        /* xusend state looks for possible UESCAPE */
        this.begin('xusend');

        break;

      case 15:
        /*! Conditions:: xusend */
        /*! Rule::       {whitespace} */
        /* stay in xusend state over whitespace */
        break;

      case 16:
        /*! Conditions:: xq xe xus */
        /*! Rule::       {xqdouble} */
        yy.extra.literalbuf += '\'';

        break;

      case 17:
        /*! Conditions:: xq xus */
        /*! Rule::       {xqinside} */
        yy.extra.literalbuf += yy_.yytext;

        break;

      case 18:
        /*! Conditions:: xq xe xus */
        /*! Rule::       {quotecontinue} */
        /* ignore */
        break;

      case 19:
        /*! Conditions:: xq xe xus */
        /*! Rule::       $ */
        throw new Error('unterminated quoted string');

        break;

      case 20:
        /*! Conditions:: INITIAL */
        /*! Rule::       {xdstart} */
        this.begin('xd');

        yy.extra.literallen = 0;
        yy.extra.literalbuf = '';
        break;

      case 21:
        /*! Conditions:: INITIAL */
        /*! Rule::       {xuistart} */
        this.begin('xui');

        yy.extra.literallen = 0;
        yy.extra.literalbuf = '';
        break;

      case 22:
        /*! Conditions:: xd */
        /*! Rule::       {xdstop} */
        var ident = '';

        this.popState();

        if (yy.extra.literalbuf.length === 0)
          throw new Error('zero-length delimited identifier');

        ident = yy.extra.literalbuf;

        if (yy.extra.literalbuf.length >= 64)
          ident = yy.extra.literalbuf.slice(0, 64);

        yy.lval.str = ident;
        return 407;
        break;

      case 23:
        /*! Conditions:: xui */
        /*! Rule::       {dquote} */
        this.less(1);

        /* xuiend state looks for possible UESCAPE */
        this.begin('xuiend');

        break;

      case 24:
        /*! Conditions:: xuiend */
        /*! Rule::       {whitespace} */
        /* stay in xuiend state over whitespace */
        break;

      case 25:
        /*! Conditions:: xd xui */
        /*! Rule::       {xddouble} */
        yy.extra.literalbuf += '"';

        break;

      case 26:
        /*! Conditions:: xd xui */
        /*! Rule::       {xdinside} */
        yy.extra.literalbuf += yy_.yytext;

        break;

      case 27:
        /*! Conditions:: xd xui */
        /*! Rule::       $ */
        throw new Error('unterminated quoted identifier');

        break;

      case 34:
        /*! Conditions:: INITIAL */
        /*! Rule::       {less_greater} */
        /* We accept both "<>" and "!=" as meaning NOT_EQUALS */
        return 421;

        break;

      case 35:
        /*! Conditions:: INITIAL */
        /*! Rule::       {not_equals} */
        /* We accept both "<>" and "!=" as meaning NOT_EQUALS */
        return 421;

        break;

      case 36:
        /*! Conditions:: INITIAL */
        /*! Rule::       {self} */
        // SET_YYLLOC();
        return yy_.yytext[0];

        break;

      case 37:
        /*! Conditions:: INITIAL */
        /*! Rule::       {operator} */
        {
          /*
           * Check for embedded slash-star or dash-dash; those
           * are comment starts, so operator must stop there.
           * Note that slash-star or dash-dash at the first
           * character will match a prior rule, not this one.
           */
          let nchars = yy_.yyleng;

          let slashstar = yy_.yytext.indexOf('/*');
          let dashdash = yy_.yytext.indexOf('--');

          if (slashstar > -1 && dashdash > -1) {
            /* if both appear, take the first one */
            if (slashstar > dashdash)
              slashstar = dashdash;
          } else if (slashstar < 0)
            slashstar = dashdash;

          if (slashstar > -1)
            nchars = slashstar;

          /*
           * For SQL compatibility, '+' and '-' cannot be the
           * last char of a multi-char operator unless the operator
           * contains chars that are not in SQL operators.
           * The idea is to lex '=-' as two operators, but not
           * to forbid operator names like '?-' that could not be
           * sequences of SQL operators.
           */
          if (nchars > 1 && (yy_.yytext[nchars - 1] == '+' || yy_.yytext[nchars - 1] == '-')) {
            let ic;

            for (ic = nchars - 2; ic >= 0; ic--) {
              let c = yy_.yytext[ic];

              if (c == '~' || c == '!' || c == '@' || c == '#' || c == '^' || c == '&' || c == '|' || c == '`' || c == '?' || c == '%')
                break;
            }

            if (ic < 0) {
              /*
               * didn't find a qualifying character, so remove
               * all trailing [+-]
               */
              do {
                nchars--;
              } while (nchars > 1 && (yy_.yytext[nchars - 1] == '+' || yy_.yytext[nchars - 1] == '-'));
            }
          }

          // SET_YYLLOC();

          if (nchars < yy_.yyleng) {
            /* Strip the unwanted chars from the token */
            this.less(nchars);

            /*
             * If what we have left is only one char, and it's
             * one of the characters matching "self", then
             * return it as a character token the same way
             * that the "self" rule would have.
             */
            if (nchars == 1 && ',()[].;:+-*/%^<>='.includes(yy_.yytext[0]))
              return yy_.yytext[0];

            /*
             * Likewise, if what we have left is two chars, and
             * those match the tokens ">=", "<=", "=>", "<>" or
             * "!=", then we must return the appropriate token
             * rather than the generic Op.
             */
            if (nchars == 2) {
              if (yy_.yytext[0] == '=' && yy_.yytext[1] == '>')
                return 428;

              if (yy_.yytext[0] == '>' && yy_.yytext[1] == '=')
                return 420;

              if (yy_.yytext[0] == '<' && yy_.yytext[1] == '=')
                return 419;

              if (yy_.yytext[0] == '<' && yy_.yytext[1] == '>')
                return 421;

              if (yy_.yytext[0] == '!' && yy_.yytext[1] == '=')
                return 421;
            }
          }

          /*
           * Complain if operator is too long.  Unlike the case
           * for identifiers, we make this an error not a notice-
           * and-truncate, because the odds are we are looking at
           * a syntactic mistake anyway.
           */
          if (nchars >= 64)
            throw new Error('operator too long');

          yy.lval.str = yy_.yytext;
          return 418;
        }

        break;

      case 38:
        /*! Conditions:: INITIAL */
        /*! Rule::       {param} */
        yy.lval.ival = parseInt(yy_.yytext.slice(1));

        return 438;
        break;

      case 39:
        /*! Conditions:: INITIAL */
        /*! Rule::       {integer} */
        return process_integer_literal(yy_.yytext, yy.lval);

        break;

      case 40:
        /*! Conditions:: INITIAL */
        /*! Rule::       {decimal} */
        yy.lval.str = pstrdup(yy_.yytext);

        return 410;
        break;

      case 41:
        /*! Conditions:: INITIAL */
        /*! Rule::       {decimalfail} */
        /* throw back the .., and treat as integer */
        this.less(yy_.yyleng - 2);

        return process_integer_literal(yy_.yytext, yy.lval);
        break;

      case 42:
        /*! Conditions:: INITIAL */
        /*! Rule::       {real} */
        yy.lval.str = yy_.yytext;

        break;

      case 43:
        /*! Conditions:: INITIAL */
        /*! Rule::       {identifier} */
        {
          /* Is it a keyword? */
          let kwnum = _.ScanKeywordLookup(yy_.yytext);

          if (kwnum >= 0) {
            yy.lval.keyword = _.GetScanKeyword(kwnum, yy.extra.keywordlist);
            return yy.lval.keyword;
          }

          /*
           * No.  Convert the identifier to lower case, and truncate
           * if necessary.
           */
          yy_.yytext = yy_.yytext.toLowerCase().trim();

          yy.lval.str = yy_.yytext;
          return 407;
        }

        break;

      case 44:
        /*! Conditions:: INITIAL */
        /*! Rule::       {other} */
        // SET_YYLLOC();
        return yy_.yytext[0];

        break;

      case 45:
        /*! Conditions:: INITIAL */
        /*! Rule::       $ */
        // return 1 
        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: INITIAL */
      /*! Rule::       {typecast} */
      28: 435,

      /*! Conditions:: INITIAL */
      /*! Rule::       {dot_dot} */
      29: 'DOT_DOT',

      /*! Conditions:: INITIAL */
      /*! Rule::       {colon_equals} */
      30: 427,

      /*! Conditions:: INITIAL */
      /*! Rule::       {equals_greater} */
      31: 428,

      /*! Conditions:: INITIAL */
      /*! Rule::       {less_equals} */
      32: 419,

      /*! Conditions:: INITIAL */
      /*! Rule::       {greater_equals} */
      33: 420
    },

    rules: [
      /*  0: */  /^(?:(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*)))))/,
      /*  1: */  /^(?:(\/\*(?:[!#%&*+\-/<-@\^`|~])*))/,
      /*  2: */  /^(?:(\/\*(?:[!#%&*+\-/<-@\^`|~])*))/,
      /*  3: */  /^(?:(\*+\/))/,
      /*  4: */  /^(?:([^*/]+))/,
      /*  5: */  /^(?:([!#%&*+\-/<-@\^`|~]))/,
      /*  6: */  /^(?:\*+)/,
      /*  7: */  /^(?:$)/,
      /*  8: */  /^(?:((?:')))/,
      /*  9: */  /^(?:([Ee](?:')))/,
      /* 10: */  /^(?:([Uu]&(?:')))/,
      /* 11: */  /^(?:((?:')(?:((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))*))/,
      /* 12: */  /^(?:((?:')(?:((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))*-))/,
      /* 13: */  /^(?:((?:')(?:((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))*))/,
      /* 14: */  /^(?:((?:')(?:((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))*-))/,
      /* 15: */  /^(?:(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*)))))/,
      /* 16: */  /^(?:((?:')(?:')))/,
      /* 17: */  /^(?:([^']+))/,
      /* 18: */  /^(?:((?:')(?:((?:((?:[\t\f ])|(?:(--(?:[^\n\r])*))))*(?:[\n\r])(?:((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))(?:[\n\r])))*))(?:')))/,
      /* 19: */  /^(?:$)/,
      /* 20: */  /^(?:((?:")))/,
      /* 21: */  /^(?:([Uu]&(?:")))/,
      /* 22: */  /^(?:((?:")))/,
      /* 23: */  /^(?:("))/,
      /* 24: */  /^(?:(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*)))))/,
      /* 25: */  /^(?:((?:")(?:")))/,
      /* 26: */  /^(?:([^"]+))/,
      /* 27: */  /^(?:$)/,
      /* 28: */  /^(?:(::))/,
      /* 29: */  /^(?:(\.\.))/,
      /* 30: */  /^(?:(:=))/,
      /* 31: */  /^(?:(=>))/,
      /* 32: */  /^(?:(<=))/,
      /* 33: */  /^(?:(>=))/,
      /* 34: */  /^(?:(<>))/,
      /* 35: */  /^(?:(!=))/,
      /* 36: */  /^(?:([%(-/:->\[\]\^]))/,
      /* 37: */  /^(?:((?:[!#%&*+\-/<-@\^`|~])+))/,
      /* 38: */  /^(?:(\$(?:(?:\d)+)))/,
      /* 39: */  /^(?:((?:\d)+))/,
      /* 40: */  /^(?:((((?:\d)*\.(?:\d)+)|((?:\d)+\.(?:\d)*))))/,
      /* 41: */  /^(?:((?:\d)+\.\.))/,
      /* 42: */  /^(?:(((?:(?:\d)+)|(?:(((?:\d)*\.(?:\d)+)|((?:\d)+\.(?:\d)*))))[Ee][-+]?(?:\d)+))/,
      /* 43: */  /^(?:((?:[A-Z_a-z-ÿ])(?:[\w$-ÿ])*))/,
      /* 44: */  /^(?:(.))/,
      /* 45: */  /^(?:$)/
    ],

    conditions: {
      'xb': {
        rules: [],
        inclusive: false
      },

      'xc': {
        rules: [2, 3, 4, 5, 6, 7],
        inclusive: false
      },

      'xd': {
        rules: [22, 25, 26, 27],
        inclusive: false
      },

      'xh': {
        rules: [],
        inclusive: false
      },

      'xq': {
        rules: [11, 12, 16, 17, 18, 19],
        inclusive: false
      },

      'xe': {
        rules: [11, 12, 16, 18, 19],
        inclusive: false
      },

      'xdolq': {
        rules: [],
        inclusive: false
      },

      'xui': {
        rules: [23, 25, 26, 27],
        inclusive: false
      },

      'xuiend': {
        rules: [24],
        inclusive: false
      },

      'xus': {
        rules: [13, 14, 16, 17, 18, 19],
        inclusive: false
      },

      'xusend': {
        rules: [15],
        inclusive: false
      },

      'xeu': {
        rules: [],
        inclusive: false
      },

      'INITIAL': {
        rules: [
          0,
          1,
          8,
          9,
          10,
          20,
          21,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45
        ],

        inclusive: true
      }
    }
  };

  return lexer;
}();
parser.lexer = lexer;

function makeRawStmt(stmt, stmt_location) {
	return {
		stmt,
		stmt_location,
		stmt_len: 0				/* might get changed later */
	}
}

/* Adjust a RawStmt to reflect that it doesn't run to the end of the string */
function updateRawStmtEnd(rs, end_location) {
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs.stmt_len > 0)
		return;

	/* OK, update length of RawStmt */
	rs.stmt_len = end_location - rs.stmt_location;
}

function IsA(arg, nodeTag) {
	return typeof arg === 'object' && arg.type === 'T_' + nodeTag;
}


function Parser() {
    this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

function yyparse() {
    return parser.parse.apply(parser, arguments);
}



export default {
    parser,
    Parser,
    parse: yyparse,
    
};

